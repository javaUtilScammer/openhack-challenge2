import { CosmosClientOptions, IHeaders, QueryIterator, RequestOptions, Response, SqlQuerySpec } from ".";
import { DatabaseAccount } from "./documents";
import { GlobalEndpointManager } from "./globalEndpointManager";
import { FeedOptions } from "./request";
/**
 * @hidden
 * @ignore
 */
export declare class ClientContext {
    private cosmosClientOptions;
    private globalEndpointManager;
    private readonly sessionContainer;
    private connectionPolicy;
    private requestHandler;
    partitionKeyDefinitionCache: {
        [containerUrl: string]: any;
    };
    constructor(cosmosClientOptions: CosmosClientOptions, globalEndpointManager: GlobalEndpointManager);
    /** @ignore */
    read<T>(path: string, type: string, id: string, initialHeaders: IHeaders, options?: RequestOptions): Promise<Response<T>>;
    queryFeed(path: string, type: string, // TODO: code smell: enum?
    id: string, resultFn: (result: {
        [key: string]: any;
    }) => any[], // TODO: any
    query: SqlQuerySpec | string, options: FeedOptions, partitionKeyRangeId?: string): Promise<Response<any>>;
    queryPartitionKeyRanges(collectionLink: string, query?: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<{}>;
    delete<T>(path: string, type: string, id: string, initialHeaders: IHeaders, options?: RequestOptions): Promise<Response<T>>;
    create<T>(body: T, path: string, type: string, id: string, initialHeaders: IHeaders, options?: RequestOptions): Promise<Response<T>>;
    private processQueryFeedResponse;
    private applySessionToken;
    replace<T>(resource: any, path: string, type: string, id: string, initialHeaders: IHeaders, options?: RequestOptions): Promise<Response<T>>;
    upsert<T>(body: T, path: string, type: string, id: string, initialHeaders: IHeaders, options?: RequestOptions): Promise<Response<T>>;
    execute<T>(sprocLink: string, params?: any[], // TODO: any
    options?: RequestOptions): Promise<Response<T>>;
    /**
     * Gets the Database account information.
     * @param {string} [options.urlConnection]   - The endpoint url whose database account needs to be retrieved. \
     * If not present, current client's url will be used.
     */
    getDatabaseAccount(options?: RequestOptions): Promise<Response<DatabaseAccount>>;
    private captureSessionToken;
    private getSessionToken;
    private clearSessionToken;
    private getSessionParams;
    private isMasterResource;
}
