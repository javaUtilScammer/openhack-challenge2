"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class implements the retry policy for endpoint discovery.
 * @hidden
 */
class EndpointDiscoveryRetryPolicy {
    /**
     * @constructor EndpointDiscoveryRetryPolicy
     * @param {object} globalEndpointManager The GlobalEndpointManager instance.
     */
    constructor(globalEndpointManager) {
        this.globalEndpointManager = globalEndpointManager;
        this.maxRetryAttemptCount = EndpointDiscoveryRetryPolicy.maxRetryAttemptCount;
        this.currentRetryAttemptCount = 0;
        this.retryAfterInMilliseconds = EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds;
    }
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     */
    shouldRetry(err) {
        return __awaiter(this, void 0, void 0, function* () {
            if (err) {
                if (this.currentRetryAttemptCount < this.maxRetryAttemptCount &&
                    this.globalEndpointManager.enableEndpointDiscovery) {
                    this.currentRetryAttemptCount++;
                    // TODO: Tracing
                    // console.log("Write region was changed, refreshing the regions list from database account
                    // and will retry the request.");
                    yield this.globalEndpointManager.refreshEndpointList();
                    return true;
                }
            }
            return false;
        });
    }
}
EndpointDiscoveryRetryPolicy.maxRetryAttemptCount = 120; // TODO: Constant?
EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds = 1000;
exports.EndpointDiscoveryRetryPolicy = EndpointDiscoveryRetryPolicy;
//# sourceMappingURL=endpointDiscoveryRetryPolicy.js.map