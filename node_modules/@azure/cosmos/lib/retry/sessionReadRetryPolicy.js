"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const common_1 = require("../common");
/**
 * This class implements the retry policy for session consistent reads.
 * @hidden
 */
class SessionReadRetryPolicy {
    /**
     * @constructor SessionReadRetryPolicy
     * @param {object} globalEndpointManager                           - The GlobalEndpointManager instance.
     * @property {object} request                                      - The Http request information
     */
    constructor(globalEndpointManager, request) {
        this.globalEndpointManager = globalEndpointManager;
        this.request = request;
        /** Current retry attempt count. */
        this.currentRetryAttemptCount = 0;
        this.retryAfterInMilliseconds = SessionReadRetryPolicy.retryAfterInMilliseconds;
        this.maxRetryAttemptCount = SessionReadRetryPolicy.maxRetryAttemptCount;
    } // TODO: any request
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     * @param {function} callback - The callback function which takes bool argument which specifies whether the request\
     * will be retried or not.
     */
    shouldRetry(err) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: any custom error
            if (err) {
                if (this.currentRetryAttemptCount <= this.maxRetryAttemptCount &&
                    (this.request.operationType === common_1.Constants.OperationTypes.Read ||
                        this.request.operationType === common_1.Constants.OperationTypes.Query)) {
                    const readEndpoint = yield this.globalEndpointManager.getReadEndpoint();
                    const writeEndpoint = yield this.globalEndpointManager.getWriteEndpoint();
                    if (readEndpoint !== writeEndpoint && this.request.endpointOverride == null) {
                        this.currentRetryAttemptCount++;
                        // TODO: tracing
                        // console.log("Read with session token not available in read region.\
                        // Trying read from write region.");
                        this.request.endpointOverride = writeEndpoint;
                        const newUrl = url.parse(writeEndpoint);
                        return [true, newUrl];
                    }
                    else {
                        // TODO: tracing
                        // console.log("Clear the the token for named base request");
                        this.request.client.clearSessionToken(this.request.path);
                        return false;
                    }
                }
            }
            return false;
        });
    }
}
/** Max number of retry attempts to perform. */
SessionReadRetryPolicy.maxRetryAttemptCount = 1;
/** Retry interval in milliseconds. */
SessionReadRetryPolicy.retryAfterInMilliseconds = 0;
exports.SessionReadRetryPolicy = SessionReadRetryPolicy;
//# sourceMappingURL=sessionReadRetryPolicy.js.map