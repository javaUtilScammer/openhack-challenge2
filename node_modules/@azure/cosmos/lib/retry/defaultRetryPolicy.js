"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class implements the default connection retry policy for requests.
 * @property {int} currentRetryAttemptCount           - Current retry attempt count.
 * @hidden
 */
class DefaultRetryPolicy {
    /**
     * @constructor ResourceThrottleRetryPolicy
     * @param {string} operationType - The type of operation being performed.
     */
    constructor(operationType) {
        this.operationType = operationType;
        this.maxRetryAttemptCount = 10;
        this.currentRetryAttemptCount = 0;
        this.retryAfterInMilliseconds = 1000;
        // Windows Socket Error Codes
        this.WindowsInterruptedFunctionCall = 10004;
        this.WindowsFileHandleNotValid = 10009;
        this.WindowsPermissionDenied = 10013;
        this.WindowsBadAddress = 10014;
        this.WindowsInvalidArgumnet = 10022;
        this.WindowsResourceTemporarilyUnavailable = 10035;
        this.WindowsOperationNowInProgress = 10036;
        this.WindowsAddressAlreadyInUse = 10048;
        this.WindowsConnectionResetByPeer = 10054;
        this.WindowsCannotSendAfterSocketShutdown = 10058;
        this.WindowsConnectionTimedOut = 10060;
        this.WindowsConnectionRefused = 10061;
        this.WindowsNameTooLong = 10063;
        this.WindowsHostIsDown = 10064;
        this.WindowsNoRouteTohost = 10065;
        // Linux Error Codes
        this.LinuxConnectionReset = "ECONNRESET";
        this.CONNECTION_ERROR_CODES = [
            this.WindowsInterruptedFunctionCall,
            this.WindowsFileHandleNotValid,
            this.WindowsPermissionDenied,
            this.WindowsBadAddress,
            this.WindowsInvalidArgumnet,
            this.WindowsResourceTemporarilyUnavailable,
            this.WindowsOperationNowInProgress,
            this.WindowsAddressAlreadyInUse,
            this.WindowsConnectionResetByPeer,
            this.WindowsCannotSendAfterSocketShutdown,
            this.WindowsConnectionTimedOut,
            this.WindowsConnectionRefused,
            this.WindowsNameTooLong,
            this.WindowsHostIsDown,
            this.WindowsNoRouteTohost,
            this.LinuxConnectionReset
        ];
    }
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     * @param {function} callback - The callback function which takes bool argument which
     *                              specifies whether the request will be retried or not.
     */
    shouldRetry(err) {
        return __awaiter(this, void 0, void 0, function* () {
            if (err) {
                if (this.currentRetryAttemptCount < this.maxRetryAttemptCount && this.needs_retry(err.code)) {
                    this.currentRetryAttemptCount++;
                    return true;
                }
            }
            return false;
        });
    }
    needs_retry(code) {
        if ((this.operationType === "read" || this.operationType === "query") &&
            this.CONNECTION_ERROR_CODES.indexOf(code) !== -1) {
            return true;
        }
        else {
            return false;
        }
    }
}
exports.DefaultRetryPolicy = DefaultRetryPolicy;
//# sourceMappingURL=defaultRetryPolicy.js.map