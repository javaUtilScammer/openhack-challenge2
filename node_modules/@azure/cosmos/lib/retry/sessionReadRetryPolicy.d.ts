/// <reference types="node" />
import * as url from "url";
import { GlobalEndpointManager } from "../globalEndpointManager";
import { ErrorResponse } from "../request/request";
/**
 * This class implements the retry policy for session consistent reads.
 * @hidden
 */
export declare class SessionReadRetryPolicy {
    private globalEndpointManager;
    private request;
    /** Max number of retry attempts to perform. */
    static readonly maxRetryAttemptCount: number;
    /** Retry interval in milliseconds. */
    static readonly retryAfterInMilliseconds: number;
    /** Current retry attempt count. */
    currentRetryAttemptCount: number;
    retryAfterInMilliseconds: number;
    private maxRetryAttemptCount;
    /**
     * @constructor SessionReadRetryPolicy
     * @param {object} globalEndpointManager                           - The GlobalEndpointManager instance.
     * @property {object} request                                      - The Http request information
     */
    constructor(globalEndpointManager: GlobalEndpointManager, request: any);
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     * @param {function} callback - The callback function which takes bool argument which specifies whether the request\
     * will be retried or not.
     */
    shouldRetry(err: ErrorResponse): Promise<boolean | [boolean, url.UrlWithStringQuery]>;
}
