import { RequestOptions } from ".";
import { Response } from ".";
import { CosmosClientOptions } from "./CosmosClientOptions";
import { DatabaseAccount } from "./documents";
/**
 * @hidden
 * This internal class implements the logic for endpoint management for geo-replicated database accounts.
 * @property {object} client                       - The document client instance.
 * @property {string} defaultEndpoint              - The endpoint used to create the client instance.
 * @property {bool} enableEndpointDiscovery        - Flag to enable/disable automatic redirecting of requests
 *                                                   based on read/write operations.
 * @property {Array} preferredLocations            - List of azure regions to be used as preferred locations
 *                                                   for read requests.
 * @property {bool} isEndpointCacheInitialized     - Flag to determine whether the endpoint cache is initialized or not.
 */
export declare class GlobalEndpointManager {
    private readDatabaseAccount;
    private defaultEndpoint;
    private readEndpoint;
    private writeEndpoint;
    enableEndpointDiscovery: boolean;
    private preferredLocations;
    private isEndpointCacheInitialized;
    /**
     * @constructor GlobalEndpointManager
     * @param {object} options                          - The document client instance.
     */
    constructor(options: CosmosClientOptions, readDatabaseAccount: (opts: RequestOptions) => Promise<Response<DatabaseAccount>>);
    /**
     * Gets the current read endpoint from the endpoint cache.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {function} callback        - The callback function which takes readEndpoint(string) as an argument.
     */
    getReadEndpoint(): Promise<string>;
    /**
     * Sets the current read endpoint.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {string} readEndpoint        - The endpoint to be set as readEndpoint.
     */
    setReadEndpoint(readEndpoint: string): void;
    /**
     * Gets the current write endpoint from the endpoint cache.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {function} callback        - The callback function which takes writeEndpoint(string) as an argument.
     */
    getWriteEndpoint(): Promise<string>;
    /**
     * Sets the current write endpoint.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {string} writeEndpoint        - The endpoint to be set as writeEndpoint.
     */
    setWriteEndpoint(writeEndpoint: string): void;
    /**
     * Refreshes the endpoint list by retrieving the writable and readable locations
     *  from the geo-replicated database account and then updating the locations cache.
     *   We skip the refreshing if EnableEndpointDiscovery is set to False
     * @memberof GlobalEndpointManager
     * @instance
     */
    refreshEndpointList(): Promise<string[]>;
    /**
     * Gets the database account first by using the default endpoint, and if that doesn't returns
     * use the endpoints for the preferred locations in the order they are specified to get
     * the database account.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {function} callback        - The callback function which takes databaseAccount(object) as an argument.
     */
    private _getDatabaseAccount;
    /**
     * Gets the locational endpoint using the location name passed to it using the default endpoint.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {string} defaultEndpoint - The default endpoint to use for teh endpoint.
     * @param {string} locationName    - The location name for the azure region like "East US".
     */
    private static _getLocationalEndpoint;
    /**
     * Updates the read and write endpoints from the passed-in readable and writable locations.
     * @memberof GlobalEndpointManager
     * @instance
     * @param {Array} writableLocations     - The list of writable locations for the geo-enabled database account.
     * @param {Array} readableLocations     - The list of readable locations for the geo-enabled database account.
     * @param {function} callback           - The function to be called as callback after executing this method.
     */
    private _updateLocationsCache;
}
