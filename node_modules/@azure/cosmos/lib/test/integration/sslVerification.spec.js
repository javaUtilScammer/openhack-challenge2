"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const __1 = require("../..");
const TestHelpers_1 = require("../common/TestHelpers");
const endpoint = "https://localhost:443";
const masterKey = "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
// TODO: Skipping these tests for now until we find a way to run these tests in a seperate nodejs process
// Currently all tests are run in same process so we cannot update the environment variables for different tests
// This test runs fine when run independently but fails when run along with rest of the tests.
describe.skip("Validate SSL verification check for emulator", function () {
    it("nativeApi Client Should throw exception", function () {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const client = new __1.CosmosClient({ endpoint, auth: { masterKey } });
                // create database
                yield TestHelpers_1.getTestDatabase("ssl verification", client);
            }
            catch (err) {
                // connecting to emulator should throw SSL verification error,
                // unless you explicitly disable it via connectionPolicy.DisableSSLVerification
                assert.equal(err.code, "DEPTH_ZERO_SELF_SIGNED_CERT", "client should throw exception");
            }
        });
    });
    it("nativeApi Client Should successfully execute request", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const connectionPolicy = new __1.DocumentBase.ConnectionPolicy();
            // Disable SSL verification explicitly
            connectionPolicy.DisableSSLVerification = true;
            const client = new __1.CosmosClient({
                endpoint,
                auth: { masterKey },
                connectionPolicy
            });
            // create database
            yield TestHelpers_1.getTestDatabase("ssl verification", client);
        });
    });
});
//# sourceMappingURL=sslVerification.spec.js.map