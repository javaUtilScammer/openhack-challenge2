"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const __1 = require("../..");
const _testConfig_1 = require("../common/_testConfig");
const TestHelpers_1 = require("../common/TestHelpers");
const client = new __1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey } });
// TODO: these tests are all disabled
describe("RU Per Minute", function () {
    let database;
    // - removes all the databases,
    //  - creates a new database,
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        yield TestHelpers_1.removeAllDatabases();
        database = yield TestHelpers_1.getTestDatabase("RU Per minute");
    }));
    // - removes all the databases,
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        yield TestHelpers_1.removeAllDatabases();
    }));
    xit("Create container with RU Per Minute Offer", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const containerDefinition = {
                id: "sample col"
            };
            const options = {
                offerEnableRUPerMinuteThroughput: true,
                offerVersion: "V2",
                offerThroughput: 400
            };
            yield database.containers.create(containerDefinition, options);
            const { result: offers } = yield client.offers.readAll().toArray();
            assert.equal(offers.length, 1);
            const offer = offers[0];
            assert.equal(offer.offerType, "Invalid");
            assert.notEqual(offer.content, undefined);
            assert.equal(offer.content.offerIsRUPerMinuteThroughputEnabled, true);
        });
    });
    xit("Create container without RU Per Minute Offer", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const containerDefinition = {
                id: "sample col"
            };
            const options = {
                offerVersion: "V2",
                offerThroughput: 400
            };
            yield database.containers.create(containerDefinition, options);
            const { result: offers } = yield client.offers.readAll().toArray();
            assert.equal(offers.length, 1);
            const offer = offers[0];
            assert.equal(offer.offerType, "Invalid");
            assert.notEqual(offer.content, undefined);
            assert.equal(offer.content.offerIsRUPerMinuteThroughputEnabled, false);
        });
    });
    xit("Create container with RU Per Minute Offer and insert Document with disableRUPerMinuteUsage options", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const containerDefinition = {
                id: "sample col"
            };
            const options = {
                offerEnableRUPerMinuteThroughput: true,
                offerVersion: "V2",
                offerThroughput: 400
            };
            yield database.containers.create(containerDefinition, options);
            const container = database.container(containerDefinition.id);
            const options2 = {
                disableRUPerMinuteUsage: true
            };
            const { headers } = yield container.items.create({ id: "sample document" }, options2);
            assert(headers[__1.Constants.HttpHeaders.IsRUPerMinuteUsed] !== true);
        });
    });
});
//# sourceMappingURL=ruPerMin.spec.js.map