"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const net = require("net");
const url = require("url");
const __1 = require("../..");
const _testConfig_1 = require("../common/_testConfig");
const TestHelpers_1 = require("../common/TestHelpers");
const isBrowser = new Function("try {return this===window;}catch(e){ return false;}");
if (!isBrowser()) {
    describe("Validate http proxy setting in environment variable", function () {
        const proxy = http.createServer((req, resp) => {
            resp.writeHead(200, { "Content-Type": "text/plain" });
            resp.end();
        });
        proxy.on("connect", (req, clientSocket, head) => {
            const serverUrl = url.parse(`http://${req.url}`);
            const serverSocket = net.connect(parseInt(serverUrl.port, 10), serverUrl.hostname, () => {
                clientSocket.write("HTTP/1.1 200 Connection Established\r\n" + "Proxy-agent: Node.js-Proxy\r\n" + "\r\n");
                serverSocket.write(head);
                serverSocket.pipe(clientSocket);
                clientSocket.pipe(serverSocket);
            });
        });
        const proxyPort = 8989;
        const connectionPolicy = new __1.DocumentBase.ConnectionPolicy();
        connectionPolicy.ProxyUrl = "http://127.0.0.1:8989";
        it("nativeApi Client Should successfully execute request", function () {
            return __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => {
                    proxy.listen(proxyPort, "127.0.0.1", () => __awaiter(this, void 0, void 0, function* () {
                        try {
                            const client = new __1.CosmosClient({
                                endpoint: _testConfig_1.endpoint,
                                auth: { masterKey: _testConfig_1.masterKey },
                                connectionPolicy
                            });
                            // create database
                            yield client.databases.create({
                                id: TestHelpers_1.addEntropy("ProxyTest")
                            });
                            resolve();
                        }
                        catch (err) {
                            throw err;
                        }
                        finally {
                            proxy.close();
                        }
                    }));
                });
            });
        });
        it("nativeApi Client Should execute request in error while the proxy setting is not correct", function () {
            return __awaiter(this, void 0, void 0, function* () {
                this.timeout(10000);
                return new Promise((resolve, reject) => {
                    proxy.listen(proxyPort + 1, "127.0.0.1", () => __awaiter(this, void 0, void 0, function* () {
                        try {
                            const client = new __1.CosmosClient({
                                endpoint: _testConfig_1.endpoint,
                                auth: { masterKey: _testConfig_1.masterKey },
                                connectionPolicy
                            });
                            // create database
                            yield client.databases.create({
                                id: TestHelpers_1.addEntropy("ProxyTest")
                            });
                            reject(new Error("Should create database in error while the proxy setting is not correct"));
                        }
                        catch (err) {
                            resolve();
                        }
                        finally {
                            proxy.close();
                        }
                    }));
                });
            });
        });
    });
}
//# sourceMappingURL=proxy.spec.js.map