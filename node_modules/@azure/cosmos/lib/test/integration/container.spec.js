"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const client_1 = require("../../client");
describe("Container", function () {
    describe("extractPartitionKey", function () {
        let partitionKeyDefinition; // TODO: any
        const container = new client_1.Container({ database: { client: null } }, undefined, undefined);
        beforeEach(function () {
            partitionKeyDefinition = undefined;
        });
        describe("With undefined partitionKeyDefinition", function () {
            it("should return undefined", function () {
                const document = {};
                const result = container.extractPartitionKey(document, partitionKeyDefinition);
                assert.equal(result, undefined);
            });
        });
        describe("With a defined partitionKeyDefinition", function () {
            beforeEach(function () {
                partitionKeyDefinition = { paths: ["/a/b"] };
            });
            it("should return [{}] when document has no partition key value", function () {
                const document = {};
                const result = container.extractPartitionKey(document, partitionKeyDefinition);
                assert.deepEqual(result, [{}]);
            });
            it("should return [null] when document has a null partition key value", function () {
                const document = { a: { b: null } };
                const result = container.extractPartitionKey(document, partitionKeyDefinition);
                assert.deepEqual(result, [null]);
            });
            it("should return [{}] when document has a partially defined partition key value", function () {
                const document = { a: "some value" };
                const result = container.extractPartitionKey(document, partitionKeyDefinition);
                assert.deepEqual(result, [{}]);
            });
            it("should return [value] when document has a valid partition key value", function () {
                const document = { a: { b: "some value" } };
                const result = container.extractPartitionKey(document, partitionKeyDefinition);
                assert.deepEqual(result, ["some value"]);
            });
        });
    });
});
//# sourceMappingURL=container.spec.js.map