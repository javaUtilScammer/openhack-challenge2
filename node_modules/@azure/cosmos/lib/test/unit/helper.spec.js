"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const common_1 = require("../../common");
describe("Helper methods", function () {
    describe("isResourceValid Unit Tests", function () {
        it("id is not string", function (done) {
            const err = {};
            const result = common_1.Helper.isResourceValid({ id: 1 }, err);
            assert.equal(result, false);
            assert.deepEqual(err, { message: "Id must be a string." });
            done();
        });
    });
    describe("setIsUpsertHeader", function () {
        it("Should add is-upsert header.", function (done) {
            const headers = {};
            assert.equal(undefined, headers[common_1.Constants.HttpHeaders.IsUpsert]);
            common_1.Helper.setIsUpsertHeader(headers);
            assert.equal(true, headers[common_1.Constants.HttpHeaders.IsUpsert]);
            done();
        });
        it("Should update is-upsert header.", function (done) {
            const headers = {};
            headers[common_1.Constants.HttpHeaders.IsUpsert] = false;
            assert.equal(false, headers[common_1.Constants.HttpHeaders.IsUpsert]);
            common_1.Helper.setIsUpsertHeader(headers);
            assert.equal(true, headers[common_1.Constants.HttpHeaders.IsUpsert]);
            done();
        });
        it("Should throw on undefined headers", function (done) {
            assert.throws(function () {
                common_1.Helper.setIsUpsertHeader(undefined);
            }, /The "headers" parameter must not be null or undefined/);
            done();
        });
        it("Should throw on null headers", function (done) {
            assert.throws(function () {
                common_1.Helper.setIsUpsertHeader(null);
            }, /The "headers" parameter must not be null or undefined/);
            done();
        });
        it("Should throw on invalid string headers", function (done) {
            assert.throws(function () {
                common_1.Helper.setIsUpsertHeader("");
            }, // Any type is intentional for test failure
            /The "headers" parameter must be an instance of "Object". Actual type is: "string"./);
            done();
        });
        it("Should throw on invalid number headers", function (done) {
            assert.throws(function () {
                common_1.Helper.setIsUpsertHeader(0);
            }, // Any type is intentional for test failure
            /The "headers" parameter must be an instance of "Object". Actual type is: "number"./);
            done();
        });
        it("Should throw on invalid boolean headers", function (done) {
            assert.throws(function () {
                common_1.Helper.setIsUpsertHeader(false);
            }, // Any type is intentional for test failure
            /The "headers" parameter must be an instance of "Object". Actual type is: "boolean"./);
            done();
        });
    });
});
//# sourceMappingURL=helper.spec.js.map