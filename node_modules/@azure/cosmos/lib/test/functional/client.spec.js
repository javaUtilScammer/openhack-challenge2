"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const __1 = require("../..");
const _testConfig_1 = require("../common/_testConfig");
const TestHelpers_1 = require("../common/TestHelpers");
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 10000);
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    // TODO: disabled tests need to get fixed or deleted
    describe("Validate client request timeout", function () {
        it("nativeApi Client Should throw exception", function () {
            return __awaiter(this, void 0, void 0, function* () {
                const connectionPolicy = new __1.DocumentBase.ConnectionPolicy();
                // making timeout 5 ms to make sure it will throw
                // (create database request takes 10ms-15ms to finish on emulator)
                connectionPolicy.RequestTimeout = 1;
                const client = new __1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey }, connectionPolicy });
                // create database
                try {
                    yield TestHelpers_1.getTestDatabase("request timeout", client);
                    assert.fail("Must throw when trying to connect to database");
                }
                catch (err) {
                    assert.equal(err.code, "ECONNRESET", "client should throw exception");
                }
            });
        });
    });
});
//# sourceMappingURL=client.spec.js.map