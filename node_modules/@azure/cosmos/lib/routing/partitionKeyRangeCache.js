"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const semaphore = require("semaphore");
const _1 = require(".");
const common_1 = require("../common");
/** @hidden */
class PartitionKeyRangeCache {
    constructor(clientContext) {
        this.clientContext = clientContext;
        this.collectionRoutingMapByCollectionId = {};
        this.sem = semaphore(1);
    }
    /**
     * Finds or Instantiates the requested Collection Routing Map and invokes callback
     * @param {callback} callback                - Function to execute for the collection routing map.
     *                                             the function takes two parameters error, collectionRoutingMap.
     * @param {string} collectionLink            - Requested collectionLink
     * @ignore
     */
    onCollectionRoutingMap(collectionLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const collectionId = common_1.Helper.getIdFromLink(collectionLink);
            let collectionRoutingMap = this.collectionRoutingMapByCollectionId[collectionId];
            if (collectionRoutingMap === undefined) {
                // attempt to consturct collection routing map
                collectionRoutingMap = yield new Promise((resolve, reject) => {
                    const semaphorizedFuncCollectionMapInstantiator = () => __awaiter(this, void 0, void 0, function* () {
                        let crm = this.collectionRoutingMapByCollectionId[collectionId];
                        if (crm === undefined) {
                            try {
                                const { result: resources } = yield this.clientContext.queryPartitionKeyRanges(collectionLink).toArray();
                                crm = _1.CollectionRoutingMapFactory.createCompleteRoutingMap(resources.map(r => [r, true]), collectionId);
                                this.collectionRoutingMapByCollectionId[collectionId] = crm;
                                this.sem.leave();
                                resolve(crm);
                            }
                            catch (err) {
                                this.sem.leave();
                                reject(err);
                            }
                        }
                        else {
                            // sanity gaurd
                            this.sem.leave();
                            // TODO: it looks like this code should never be reached...
                            // return resolve(collectionRoutingMap.getOverlappingRanges(partitionKeyRanges));
                            reject(new Error("Not yet implemented"));
                        }
                    });
                    // We want only one attempt to construct collectionRoutingMap
                    // so we pass the consturction in the semaphore take
                    this.sem.take(semaphorizedFuncCollectionMapInstantiator);
                });
            }
            return collectionRoutingMap;
        });
    }
    /**
     * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges
     * @param {callback} callback - Function execute on the overlapping partition key ranges result,
     *                                  takes two parameters error, partition key ranges
     * @param collectionLink
     * @param queryRanges
     * @ignore
     */
    getOverlappingRanges(collectionLink, queryRanges) {
        return __awaiter(this, void 0, void 0, function* () {
            const crm = yield this.onCollectionRoutingMap(collectionLink);
            return crm.getOverlappingRanges(queryRanges);
        });
    }
}
exports.PartitionKeyRangeCache = PartitionKeyRangeCache;
//# sourceMappingURL=partitionKeyRangeCache.js.map