var CosmosClient=function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=32)}([function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(143)),n(r(144)),n(r(145)),n(r(146)),n(r(147)),n(r(151))},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(148),i=r(149),o=r(41);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,r){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return u(this,e,t,r)}function u(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!c.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=a(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(c.isBuffer(t)){var r=0|l(t.length);return 0===(e=a(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(f(t),e=a(e,t<0?0:0|l(t)),!c.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|l(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function l(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(e).length;default:if(n)return U(e).length;t=(""+t).toLowerCase(),n=!0}}function b(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function y(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,i);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,i){var o,s=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var f=-1;for(o=r;o<a;o++)if(u(e,o)===u(t,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===c)return f*s}else-1!==f&&(o-=o-f),f=-1}else for(r+c>a&&(r=a-c),o=r;o>=0;o--){for(var h=!0,d=0;d<c;d++)if(u(e,o+d)!==u(t,d)){h=!1;break}if(h)return o}return-1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[r+s]=a}return s}function v(e,t,r,n){return N(U(t,e.length-r),e,r,n)}function w(e,t,r,n){return N(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function _(e,t,r,n){return w(e,t,r,n)}function S(e,t,r,n){return N(F(t),e,r,n)}function x(e,t,r,n){return N(function(e,t){for(var r,n,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function M(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function E(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,s,a,c,u=e[i],f=null,h=u>239?4:u>223?3:u>191?2:1;if(i+h<=r)switch(h){case 1:u<128&&(f=u);break;case 2:128==(192&(o=e[i+1]))&&(c=(31&u)<<6|63&o)>127&&(f=c);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(f=c)}null===f?(f=65533,h=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=h}return function(e){var t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=C));return r}(n)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,r){return u(null,e,t,r)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,r){return function(e,t,r,n){return f(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},c.allocUnsafe=function(e){return h(null,e)},c.allocUnsafeSlow=function(e){return h(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var s=e[r];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?E(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return A(this,t,r);case"utf8":case"utf-8":return E(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return M(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,r,n,i){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,i>>>=0,this===e)return 0;for(var o=i-n,s=r-t,a=Math.min(o,s),u=this.slice(n,i),f=e.slice(t,r),h=0;h<a;++h)if(u[h]!==f[h]){o=u[h],s=f[h];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,e,t,r);case"utf8":case"utf-8":return v(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return _(this,e,t,r);case"base64":return S(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function P(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function A(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=L(e[o]);return i}function I(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function T(e,t,r,n,i,o){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function O(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function B(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function D(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function q(e,t,r,n,o){return o||D(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function H(e,t,r,n,o){return o||D(e,0,r,8),i.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r,n=this.length;if(e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=c.prototype;else{var i=t-e;r=new c(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},c.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},c.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},c.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},c.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||T(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||T(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);T(this,e,t,r,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<r&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);T(this,e,t,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||T(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,r){return q(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return q(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return H(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return H(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var s=c.isBuffer(e)?e:U(new c(e,n).toString()),a=s.length;for(o=0;o<r-t;++o)this[o+t]=s[o%a]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function F(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function N(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(5))},function(e,t,r){var n=r(2),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=s),o(i,s),s.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},s.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){(function(e){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function o(e,t,r){if(o.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var s;"object"==typeof e?e.exports=o:t.BN=o,o.BN=o,o.wordSize=26;try{s=r(255).Buffer}catch(e){}function a(e,t,r){for(var n=0,i=Math.min(e.length,r),o=t;o<i;o++){var s=e.charCodeAt(o)-48;n<<=4,n|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return n}function c(e,t,r,n){for(var i=0,o=Math.min(e.length,r),s=t;s<o;s++){var a=e.charCodeAt(s)-48;i*=n,i+=a>=49?a-49+10:a>=17?a-17+10:a}return i}o.isBN=function(e){return e instanceof o||null!==e&&"object"==typeof e&&e.constructor.wordSize===o.wordSize&&Array.isArray(e.words)},o.max=function(e,t){return e.cmp(t)>0?e:t},o.min=function(e,t){return e.cmp(t)<0?e:t},o.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&i++,16===t?this._parseHex(e,i):this._parseBase(e,t,i),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initArray=function(e,t,r){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=e.length-1,o=0;i>=0;i-=3)s=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<e.length;i+=3)s=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this.strip()},o.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,o=0;for(r=e.length-6,n=0;r>=t;r-=6)i=a(e,r,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,n++);r+6!==t&&(i=a(e,t,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,f=r;f<a;f+=n)u=c(e,f,f+n,t),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var h=1;for(u=c(e,f,e.length,t),f=0;f<s;f++)h*=t;this.imuln(h),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},o.prototype.clone=function(){var e=new o(null);return this.copy(e),e},o.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],s=i*o,a=67108863&s,c=s/67108864|0;r.words[0]=a;for(var u=1;u<n;u++){for(var f=c>>>26,h=67108863&c,d=Math.min(u,t.length-1),l=Math.max(0,u-e.length+1);l<=d;l++){var p=u-l|0;f+=(s=(i=0|e.words[p])*(o=0|t.words[l])+h)/67108864|0,h=67108863&s}r.words[u]=0|h,c=0|f}return 0!==c?r.words[u]=0|c:r.length--,r.strip()}o.prototype.toString=function(e,t){var r;if(e=e||10,t=0|t||1,16===e||"hex"===e){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],c=(16777215&(a<<i|o)).toString(16);r=0!==(o=a>>>24-i&16777215)||s!==this.length-1?u[6-c.length]+c+r:c+r,(i+=2)>=26&&(i-=26,s--)}for(0!==o&&(r=o.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var d=f[e],l=h[e];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modn(l).toString(e);r=(p=p.idivn(l)).isZero()?b+r:u[d-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(e,t){return n(void 0!==s),this.toArrayLike(s,e,t)},o.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},o.prototype.toArrayLike=function(e,t,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var s,a,c="le"===t,u=new e(o),f=this.clone();if(c){for(a=0;!f.isZero();a++)s=f.andln(255),f.iushrn(8),u[a]=s;for(;a<o;a++)u[a]=0}else{for(a=0;a<o-i;a++)u[a]=0;for(a=0;!f.isZero();a++)s=f.andln(255),f.iushrn(8),u[o-a-1]=s}return u},Math.clz32?o.prototype._countBits=function(e){return 32-Math.clz32(e)}:o.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},o.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},o.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},o.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},o.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},o.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},o.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},o.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this.strip()},o.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},o.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},o.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},o.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this.strip()},o.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},o.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},o.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},o.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(e){return this.clone().inotn(e)},o.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var r=e/26|0,i=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},o.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,s=0;s<n.length;s++)o=(t=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&t;for(;0!==o&&s<r.length;s++)o=(t=(0|r.words[s])+o)>>26,this.words[s]=67108863&t;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(e){return this.clone().isub(e)};var l=function(e,t,r){var n,i,o,s=e.words,a=t.words,c=r.words,u=0,f=0|s[0],h=8191&f,d=f>>>13,l=0|s[1],p=8191&l,b=l>>>13,y=0|s[2],m=8191&y,g=y>>>13,v=0|s[3],w=8191&v,_=v>>>13,S=0|s[4],x=8191&S,M=S>>>13,E=0|s[5],C=8191&E,P=E>>>13,k=0|s[6],A=8191&k,I=k>>>13,R=0|s[7],T=8191&R,O=R>>>13,B=0|s[8],D=8191&B,q=B>>>13,H=0|s[9],j=8191&H,L=H>>>13,U=0|a[0],F=8191&U,N=U>>>13,z=0|a[1],K=8191&z,Q=z>>>13,W=0|a[2],V=8191&W,Y=W>>>13,G=0|a[3],J=8191&G,X=G>>>13,$=0|a[4],Z=8191&$,ee=$>>>13,te=0|a[5],re=8191&te,ne=te>>>13,ie=0|a[6],oe=8191&ie,se=ie>>>13,ae=0|a[7],ce=8191&ae,ue=ae>>>13,fe=0|a[8],he=8191&fe,de=fe>>>13,le=0|a[9],pe=8191&le,be=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(u+(n=Math.imul(h,F))|0)+((8191&(i=(i=Math.imul(h,N))+Math.imul(d,F)|0))<<13)|0;u=((o=Math.imul(d,N))+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(p,F),i=(i=Math.imul(p,N))+Math.imul(b,F)|0,o=Math.imul(b,N);var me=(u+(n=n+Math.imul(h,K)|0)|0)+((8191&(i=(i=i+Math.imul(h,Q)|0)+Math.imul(d,K)|0))<<13)|0;u=((o=o+Math.imul(d,Q)|0)+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(m,F),i=(i=Math.imul(m,N))+Math.imul(g,F)|0,o=Math.imul(g,N),n=n+Math.imul(p,K)|0,i=(i=i+Math.imul(p,Q)|0)+Math.imul(b,K)|0,o=o+Math.imul(b,Q)|0;var ge=(u+(n=n+Math.imul(h,V)|0)|0)+((8191&(i=(i=i+Math.imul(h,Y)|0)+Math.imul(d,V)|0))<<13)|0;u=((o=o+Math.imul(d,Y)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(w,F),i=(i=Math.imul(w,N))+Math.imul(_,F)|0,o=Math.imul(_,N),n=n+Math.imul(m,K)|0,i=(i=i+Math.imul(m,Q)|0)+Math.imul(g,K)|0,o=o+Math.imul(g,Q)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,Y)|0;var ve=(u+(n=n+Math.imul(h,J)|0)|0)+((8191&(i=(i=i+Math.imul(h,X)|0)+Math.imul(d,J)|0))<<13)|0;u=((o=o+Math.imul(d,X)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(x,F),i=(i=Math.imul(x,N))+Math.imul(M,F)|0,o=Math.imul(M,N),n=n+Math.imul(w,K)|0,i=(i=i+Math.imul(w,Q)|0)+Math.imul(_,K)|0,o=o+Math.imul(_,Q)|0,n=n+Math.imul(m,V)|0,i=(i=i+Math.imul(m,Y)|0)+Math.imul(g,V)|0,o=o+Math.imul(g,Y)|0,n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,X)|0)+Math.imul(b,J)|0,o=o+Math.imul(b,X)|0;var we=(u+(n=n+Math.imul(h,Z)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(d,Z)|0))<<13)|0;u=((o=o+Math.imul(d,ee)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(C,F),i=(i=Math.imul(C,N))+Math.imul(P,F)|0,o=Math.imul(P,N),n=n+Math.imul(x,K)|0,i=(i=i+Math.imul(x,Q)|0)+Math.imul(M,K)|0,o=o+Math.imul(M,Q)|0,n=n+Math.imul(w,V)|0,i=(i=i+Math.imul(w,Y)|0)+Math.imul(_,V)|0,o=o+Math.imul(_,Y)|0,n=n+Math.imul(m,J)|0,i=(i=i+Math.imul(m,X)|0)+Math.imul(g,J)|0,o=o+Math.imul(g,X)|0,n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(b,Z)|0,o=o+Math.imul(b,ee)|0;var _e=(u+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(d,re)|0))<<13)|0;u=((o=o+Math.imul(d,ne)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(A,F),i=(i=Math.imul(A,N))+Math.imul(I,F)|0,o=Math.imul(I,N),n=n+Math.imul(C,K)|0,i=(i=i+Math.imul(C,Q)|0)+Math.imul(P,K)|0,o=o+Math.imul(P,Q)|0,n=n+Math.imul(x,V)|0,i=(i=i+Math.imul(x,Y)|0)+Math.imul(M,V)|0,o=o+Math.imul(M,Y)|0,n=n+Math.imul(w,J)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(_,J)|0,o=o+Math.imul(_,X)|0,n=n+Math.imul(m,Z)|0,i=(i=i+Math.imul(m,ee)|0)+Math.imul(g,Z)|0,o=o+Math.imul(g,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(b,re)|0,o=o+Math.imul(b,ne)|0;var Se=(u+(n=n+Math.imul(h,oe)|0)|0)+((8191&(i=(i=i+Math.imul(h,se)|0)+Math.imul(d,oe)|0))<<13)|0;u=((o=o+Math.imul(d,se)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(T,F),i=(i=Math.imul(T,N))+Math.imul(O,F)|0,o=Math.imul(O,N),n=n+Math.imul(A,K)|0,i=(i=i+Math.imul(A,Q)|0)+Math.imul(I,K)|0,o=o+Math.imul(I,Q)|0,n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,Y)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,Y)|0,n=n+Math.imul(x,J)|0,i=(i=i+Math.imul(x,X)|0)+Math.imul(M,J)|0,o=o+Math.imul(M,X)|0,n=n+Math.imul(w,Z)|0,i=(i=i+Math.imul(w,ee)|0)+Math.imul(_,Z)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(m,re)|0,i=(i=i+Math.imul(m,ne)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,se)|0)+Math.imul(b,oe)|0,o=o+Math.imul(b,se)|0;var xe=(u+(n=n+Math.imul(h,ce)|0)|0)+((8191&(i=(i=i+Math.imul(h,ue)|0)+Math.imul(d,ce)|0))<<13)|0;u=((o=o+Math.imul(d,ue)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(D,F),i=(i=Math.imul(D,N))+Math.imul(q,F)|0,o=Math.imul(q,N),n=n+Math.imul(T,K)|0,i=(i=i+Math.imul(T,Q)|0)+Math.imul(O,K)|0,o=o+Math.imul(O,Q)|0,n=n+Math.imul(A,V)|0,i=(i=i+Math.imul(A,Y)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,Y)|0,n=n+Math.imul(C,J)|0,i=(i=i+Math.imul(C,X)|0)+Math.imul(P,J)|0,o=o+Math.imul(P,X)|0,n=n+Math.imul(x,Z)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(M,Z)|0,o=o+Math.imul(M,ee)|0,n=n+Math.imul(w,re)|0,i=(i=i+Math.imul(w,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(m,oe)|0,i=(i=i+Math.imul(m,se)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,se)|0,n=n+Math.imul(p,ce)|0,i=(i=i+Math.imul(p,ue)|0)+Math.imul(b,ce)|0,o=o+Math.imul(b,ue)|0;var Me=(u+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,de)|0)+Math.imul(d,he)|0))<<13)|0;u=((o=o+Math.imul(d,de)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(j,F),i=(i=Math.imul(j,N))+Math.imul(L,F)|0,o=Math.imul(L,N),n=n+Math.imul(D,K)|0,i=(i=i+Math.imul(D,Q)|0)+Math.imul(q,K)|0,o=o+Math.imul(q,Q)|0,n=n+Math.imul(T,V)|0,i=(i=i+Math.imul(T,Y)|0)+Math.imul(O,V)|0,o=o+Math.imul(O,Y)|0,n=n+Math.imul(A,J)|0,i=(i=i+Math.imul(A,X)|0)+Math.imul(I,J)|0,o=o+Math.imul(I,X)|0,n=n+Math.imul(C,Z)|0,i=(i=i+Math.imul(C,ee)|0)+Math.imul(P,Z)|0,o=o+Math.imul(P,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(M,re)|0,o=o+Math.imul(M,ne)|0,n=n+Math.imul(w,oe)|0,i=(i=i+Math.imul(w,se)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,se)|0,n=n+Math.imul(m,ce)|0,i=(i=i+Math.imul(m,ue)|0)+Math.imul(g,ce)|0,o=o+Math.imul(g,ue)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,de)|0)+Math.imul(b,he)|0,o=o+Math.imul(b,de)|0;var Ee=(u+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,be)|0)+Math.imul(d,pe)|0))<<13)|0;u=((o=o+Math.imul(d,be)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(j,K),i=(i=Math.imul(j,Q))+Math.imul(L,K)|0,o=Math.imul(L,Q),n=n+Math.imul(D,V)|0,i=(i=i+Math.imul(D,Y)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,Y)|0,n=n+Math.imul(T,J)|0,i=(i=i+Math.imul(T,X)|0)+Math.imul(O,J)|0,o=o+Math.imul(O,X)|0,n=n+Math.imul(A,Z)|0,i=(i=i+Math.imul(A,ee)|0)+Math.imul(I,Z)|0,o=o+Math.imul(I,ee)|0,n=n+Math.imul(C,re)|0,i=(i=i+Math.imul(C,ne)|0)+Math.imul(P,re)|0,o=o+Math.imul(P,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,se)|0)+Math.imul(M,oe)|0,o=o+Math.imul(M,se)|0,n=n+Math.imul(w,ce)|0,i=(i=i+Math.imul(w,ue)|0)+Math.imul(_,ce)|0,o=o+Math.imul(_,ue)|0,n=n+Math.imul(m,he)|0,i=(i=i+Math.imul(m,de)|0)+Math.imul(g,he)|0,o=o+Math.imul(g,de)|0;var Ce=(u+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,be)|0)+Math.imul(b,pe)|0))<<13)|0;u=((o=o+Math.imul(b,be)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(j,V),i=(i=Math.imul(j,Y))+Math.imul(L,V)|0,o=Math.imul(L,Y),n=n+Math.imul(D,J)|0,i=(i=i+Math.imul(D,X)|0)+Math.imul(q,J)|0,o=o+Math.imul(q,X)|0,n=n+Math.imul(T,Z)|0,i=(i=i+Math.imul(T,ee)|0)+Math.imul(O,Z)|0,o=o+Math.imul(O,ee)|0,n=n+Math.imul(A,re)|0,i=(i=i+Math.imul(A,ne)|0)+Math.imul(I,re)|0,o=o+Math.imul(I,ne)|0,n=n+Math.imul(C,oe)|0,i=(i=i+Math.imul(C,se)|0)+Math.imul(P,oe)|0,o=o+Math.imul(P,se)|0,n=n+Math.imul(x,ce)|0,i=(i=i+Math.imul(x,ue)|0)+Math.imul(M,ce)|0,o=o+Math.imul(M,ue)|0,n=n+Math.imul(w,he)|0,i=(i=i+Math.imul(w,de)|0)+Math.imul(_,he)|0,o=o+Math.imul(_,de)|0;var Pe=(u+(n=n+Math.imul(m,pe)|0)|0)+((8191&(i=(i=i+Math.imul(m,be)|0)+Math.imul(g,pe)|0))<<13)|0;u=((o=o+Math.imul(g,be)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,n=Math.imul(j,J),i=(i=Math.imul(j,X))+Math.imul(L,J)|0,o=Math.imul(L,X),n=n+Math.imul(D,Z)|0,i=(i=i+Math.imul(D,ee)|0)+Math.imul(q,Z)|0,o=o+Math.imul(q,ee)|0,n=n+Math.imul(T,re)|0,i=(i=i+Math.imul(T,ne)|0)+Math.imul(O,re)|0,o=o+Math.imul(O,ne)|0,n=n+Math.imul(A,oe)|0,i=(i=i+Math.imul(A,se)|0)+Math.imul(I,oe)|0,o=o+Math.imul(I,se)|0,n=n+Math.imul(C,ce)|0,i=(i=i+Math.imul(C,ue)|0)+Math.imul(P,ce)|0,o=o+Math.imul(P,ue)|0,n=n+Math.imul(x,he)|0,i=(i=i+Math.imul(x,de)|0)+Math.imul(M,he)|0,o=o+Math.imul(M,de)|0;var ke=(u+(n=n+Math.imul(w,pe)|0)|0)+((8191&(i=(i=i+Math.imul(w,be)|0)+Math.imul(_,pe)|0))<<13)|0;u=((o=o+Math.imul(_,be)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(j,Z),i=(i=Math.imul(j,ee))+Math.imul(L,Z)|0,o=Math.imul(L,ee),n=n+Math.imul(D,re)|0,i=(i=i+Math.imul(D,ne)|0)+Math.imul(q,re)|0,o=o+Math.imul(q,ne)|0,n=n+Math.imul(T,oe)|0,i=(i=i+Math.imul(T,se)|0)+Math.imul(O,oe)|0,o=o+Math.imul(O,se)|0,n=n+Math.imul(A,ce)|0,i=(i=i+Math.imul(A,ue)|0)+Math.imul(I,ce)|0,o=o+Math.imul(I,ue)|0,n=n+Math.imul(C,he)|0,i=(i=i+Math.imul(C,de)|0)+Math.imul(P,he)|0,o=o+Math.imul(P,de)|0;var Ae=(u+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,be)|0)+Math.imul(M,pe)|0))<<13)|0;u=((o=o+Math.imul(M,be)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(j,re),i=(i=Math.imul(j,ne))+Math.imul(L,re)|0,o=Math.imul(L,ne),n=n+Math.imul(D,oe)|0,i=(i=i+Math.imul(D,se)|0)+Math.imul(q,oe)|0,o=o+Math.imul(q,se)|0,n=n+Math.imul(T,ce)|0,i=(i=i+Math.imul(T,ue)|0)+Math.imul(O,ce)|0,o=o+Math.imul(O,ue)|0,n=n+Math.imul(A,he)|0,i=(i=i+Math.imul(A,de)|0)+Math.imul(I,he)|0,o=o+Math.imul(I,de)|0;var Ie=(u+(n=n+Math.imul(C,pe)|0)|0)+((8191&(i=(i=i+Math.imul(C,be)|0)+Math.imul(P,pe)|0))<<13)|0;u=((o=o+Math.imul(P,be)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(j,oe),i=(i=Math.imul(j,se))+Math.imul(L,oe)|0,o=Math.imul(L,se),n=n+Math.imul(D,ce)|0,i=(i=i+Math.imul(D,ue)|0)+Math.imul(q,ce)|0,o=o+Math.imul(q,ue)|0,n=n+Math.imul(T,he)|0,i=(i=i+Math.imul(T,de)|0)+Math.imul(O,he)|0,o=o+Math.imul(O,de)|0;var Re=(u+(n=n+Math.imul(A,pe)|0)|0)+((8191&(i=(i=i+Math.imul(A,be)|0)+Math.imul(I,pe)|0))<<13)|0;u=((o=o+Math.imul(I,be)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(j,ce),i=(i=Math.imul(j,ue))+Math.imul(L,ce)|0,o=Math.imul(L,ue),n=n+Math.imul(D,he)|0,i=(i=i+Math.imul(D,de)|0)+Math.imul(q,he)|0,o=o+Math.imul(q,de)|0;var Te=(u+(n=n+Math.imul(T,pe)|0)|0)+((8191&(i=(i=i+Math.imul(T,be)|0)+Math.imul(O,pe)|0))<<13)|0;u=((o=o+Math.imul(O,be)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,n=Math.imul(j,he),i=(i=Math.imul(j,de))+Math.imul(L,he)|0,o=Math.imul(L,de);var Oe=(u+(n=n+Math.imul(D,pe)|0)|0)+((8191&(i=(i=i+Math.imul(D,be)|0)+Math.imul(q,pe)|0))<<13)|0;u=((o=o+Math.imul(q,be)|0)+(i>>>13)|0)+(Oe>>>26)|0,Oe&=67108863;var Be=(u+(n=Math.imul(j,pe))|0)+((8191&(i=(i=Math.imul(j,be))+Math.imul(L,pe)|0))<<13)|0;return u=((o=Math.imul(L,be))+(i>>>13)|0)+(Be>>>26)|0,Be&=67108863,c[0]=ye,c[1]=me,c[2]=ge,c[3]=ve,c[4]=we,c[5]=_e,c[6]=Se,c[7]=xe,c[8]=Me,c[9]=Ee,c[10]=Ce,c[11]=Pe,c[12]=ke,c[13]=Ae,c[14]=Ie,c[15]=Re,c[16]=Te,c[17]=Oe,c[18]=Be,0!==u&&(c[19]=u,r.length++),r};function p(e,t,r){return(new b).mulp(e,t,r)}function b(e,t){this.x=e,this.y=t}Math.imul||(l=d),o.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?l(this,e,t):r<63?d(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,c=Math.min(o,t.length-1),u=Math.max(0,o-e.length+1);u<=c;u++){var f=o-u,h=(0|e.words[f])*(0|t.words[u]),d=67108863&h;a=67108863&(d=d+a|0),i+=(s=(s=s+(h/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,e,t):p(this,e,t)},b.prototype.makeRBT=function(e){for(var t=new Array(e),r=o.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},b.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},b.prototype.permute=function(e,t,r,n,i,o){for(var s=0;s<o;s++)n[s]=t[e[s]],i[s]=r[e[s]]},b.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,c=Math.cos(2*Math.PI/a),u=Math.sin(2*Math.PI/a),f=0;f<i;f+=a)for(var h=c,d=u,l=0;l<s;l++){var p=r[f+l],b=n[f+l],y=r[f+l+s],m=n[f+l+s],g=h*y-d*m;m=h*m+d*y,y=g,r[f+l]=p+y,n[f+l]=b+m,r[f+l+s]=p-y,n[f+l+s]=b-m,l!==a&&(g=c*h-u*d,d=c*d+u*h,h=g)}},b.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},b.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},b.prototype.convert13b=function(e,t,r,i){for(var o=0,s=0;s<t;s++)o+=0|e[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*t;s<i;++s)r[s]=0;n(0===o),n(0==(-8192&o))},b.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},b.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),c=new Array(n),u=new Array(n),f=new Array(n),h=new Array(n),d=r.words;d.length=n,this.convert13b(e.words,e.length,s,n),this.convert13b(t.words,t.length,u,n),this.transform(s,o,a,c,n,i),this.transform(u,o,f,h,n,i);for(var l=0;l<n;l++){var p=a[l]*f[l]-c[l]*h[l];c[l]=a[l]*h[l]+c[l]*f[l],a[l]=p}return this.conjugate(a,c,n),this.transform(a,c,d,o,n,i),this.conjugate(d,o,n),this.normalize13b(d,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},o.prototype.mul=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},o.prototype.mulf=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),p(this,e,t)},o.prototype.imul=function(e){return this.clone().mulTo(e,this)},o.prototype.imuln=function(e){n("number"==typeof e),n(e<67108864);for(var t=0,r=0;r<this.length;r++){var i=(0|this.words[r])*e,o=(67108863&i)+(67108863&t);t>>=26,t+=i/67108864|0,t+=o>>>26,this.words[r]=67108863&o}return 0!==t&&(this.words[r]=t,this.length++),this},o.prototype.muln=function(e){return this.clone().imuln(e)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=(e.words[n]&1<<i)>>>i}return t}(e);if(0===t.length)return new o(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,r=e%26,i=(e-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(t=0;t<this.length;t++){var a=this.words[t]&o,c=(0|this.words[t])-a<<r;this.words[t]=c|s,s=a>>>26-r}s&&(this.words[t]=s,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},o.prototype.iushrn=function(e,t,r){var i;n("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,s=Math.min((e-o)/26,this.length),a=67108863^67108863>>>o<<o,c=r;if(i-=s,i=Math.max(0,i),c){for(var u=0;u<s;u++)c.words[u]=this.words[u];c.length=s}if(0===s);else if(this.length>s)for(this.length-=s,u=0;u<this.length;u++)this.words[u]=this.words[u+s];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=i);u--){var h=0|this.words[u];this.words[u]=f<<26-o|h>>>o,f=h&a}return c&&0!==f&&(c.words[c.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(e,t,r){return n(0===this.negative),this.iushrn(e,t,r)},o.prototype.shln=function(e){return this.clone().ishln(e)},o.prototype.ushln=function(e){return this.clone().iushln(e)},o.prototype.shrn=function(e){return this.clone().ishrn(e)},o.prototype.ushrn=function(e){return this.clone().iushrn(e)},o.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,i=1<<t;return!(this.length<=r)&&!!(this.words[r]&i)},o.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(e){return this.clone().imaskn(e)},o.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},o.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},o.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},o.prototype.addn=function(e){return this.clone().iaddn(e)},o.prototype.subn=function(e){return this.clone().isubn(e)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(e,t,r){var i,o,s=e.length+r;this._expand(s);var a=0;for(i=0;i<e.length;i++){o=(0|this.words[i+r])+a;var c=(0|e.words[i])*t;a=((o-=67108863&c)>>26)-(c/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this.strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,s=0|i.words[i.length-1];0!==(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,c=n.length-i.length;if("mod"!==t){(a=new o(null)).length=c+1,a.words=new Array(a.length);for(var u=0;u<a.length;u++)a.words[u]=0}var f=n.clone()._ishlnsubmul(i,1,c);0===f.negative&&(n=f,a&&(a.words[c]=1));for(var h=c-1;h>=0;h--){var d=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(d=Math.min(d/s|0,67108863),n._ishlnsubmul(i,d,h);0!==n.negative;)d--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);a&&(a.words[h]=d)}return a&&a.strip(),n.strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(e,t,r){return n(!e.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===e.negative?(a=this.neg().divmod(e,t),"mod"!==t&&(i=a.div.neg()),"div"!==t&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(e)),{div:i,mod:s}):0===this.negative&&0!==e.negative?(a=this.divmod(e.neg(),t),"mod"!==t&&(i=a.div.neg()),{div:i,mod:a.mod}):0!=(this.negative&e.negative)?(a=this.neg().divmod(e.neg(),t),"div"!==t&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(e)),{div:a.div,mod:s}):e.length>this.length||this.cmp(e)<0?{div:new o(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new o(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new o(this.modn(e.words[0]))}:this._wordDiv(e,t);var i,s,a},o.prototype.div=function(e){return this.divmod(e,"div",!1).div},o.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},o.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},o.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},o.prototype.modn=function(e){n(e<=67108863);for(var t=(1<<26)%e,r=0,i=this.length-1;i>=0;i--)r=(t*r+(0|this.words[i]))%e;return r},o.prototype.idivn=function(e){n(e<=67108863);for(var t=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*t;this.words[r]=i/e|0,t=i%e}return this.strip()},o.prototype.divn=function(e){return this.clone().idivn(e)},o.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new o(1),s=new o(0),a=new o(0),c=new o(1),u=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++u;for(var f=r.clone(),h=t.clone();!t.isZero();){for(var d=0,l=1;0==(t.words[0]&l)&&d<26;++d,l<<=1);if(d>0)for(t.iushrn(d);d-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(f),s.isub(h)),i.iushrn(1),s.iushrn(1);for(var p=0,b=1;0==(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||c.isOdd())&&(a.iadd(f),c.isub(h)),a.iushrn(1),c.iushrn(1);t.cmp(r)>=0?(t.isub(r),i.isub(a),s.isub(c)):(r.isub(t),a.isub(i),c.isub(s))}return{a:a,b:c,gcd:r.iushln(u)}},o.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,s=new o(1),a=new o(0),c=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var u=0,f=1;0==(t.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(t.iushrn(u);u-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);for(var h=0,d=1;0==(r.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(r.iushrn(h);h-- >0;)a.isOdd()&&a.iadd(c),a.iushrn(1);t.cmp(r)>=0?(t.isub(r),s.isub(a)):(r.isub(t),a.isub(s))}return(i=0===t.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(e),i},o.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},o.prototype.invm=function(e){return this.egcd(e).a.umod(e)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(e){return this.words[0]&e},o.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,r=(e-t)/26,i=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)t=1;else{r&&(e=-e),n(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},o.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},o.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},o.prototype.gtn=function(e){return 1===this.cmpn(e)},o.prototype.gt=function(e){return 1===this.cmp(e)},o.prototype.gten=function(e){return this.cmpn(e)>=0},o.prototype.gte=function(e){return this.cmp(e)>=0},o.prototype.ltn=function(e){return-1===this.cmpn(e)},o.prototype.lt=function(e){return-1===this.cmp(e)},o.prototype.lten=function(e){return this.cmpn(e)<=0},o.prototype.lte=function(e){return this.cmp(e)<=0},o.prototype.eqn=function(e){return 0===this.cmpn(e)},o.prototype.eq=function(e){return 0===this.cmp(e)},o.red=function(e){return new S(e)},o.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(e){return this.red=e,this},o.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},o.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},o.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},o.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},o.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},o.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},o.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},o.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var y={k256:null,p224:null,p192:null,p25519:null};function m(e,t){this.name=e,this.p=new o(t,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function g(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function v(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(e){if("string"==typeof e){var t=o._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function x(e){S.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var e=new o(null);return e.words=new Array(Math.ceil(this.n/13)),e},m.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},m.prototype.split=function(e,t){e.iushrn(this.n,0,t)},m.prototype.imulK=function(e){return e.imul(this.k)},i(g,m),g.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++)t.words[n]=e.words[n];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var i=e.words[9];for(t.words[t.length++]=4194303&i,n=10;n<e.length;n++){var o=0|e.words[n];e.words[n-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,e.words[n-10]=i,0===i&&e.length>10?e.length-=10:e.length-=9},g.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(v,m),i(w,m),i(_,m),_.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},o._prime=function(e){if(y[e])return y[e];var t;if("k256"===e)t=new g;else if("p224"===e)t=new v;else if("p192"===e)t=new w;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new _}return y[e]=t,t},S.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},S.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},S.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},S.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},S.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},S.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},S.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},S.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},S.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},S.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},S.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},S.prototype.isqr=function(e){return this.imul(e,e.clone())},S.prototype.sqr=function(e){return this.mul(e,e)},S.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var r=this.m.add(new o(1)).iushrn(2);return this.pow(e,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),c=a.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(c);)f.redIAdd(c);for(var h=this.pow(f,i),d=this.pow(e,i.addn(1).iushrn(1)),l=this.pow(e,i),p=s;0!==l.cmp(a);){for(var b=l,y=0;0!==b.cmp(a);y++)b=b.redSqr();n(y<p);var m=this.pow(h,new o(1).iushln(p-y-1));d=d.redMul(m),h=m.redSqr(),l=l.redMul(h),p=y}return d},S.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},S.prototype.pow=function(e,t){if(t.isZero())return new o(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],s=0,a=0,c=t.bitLength()%26;for(0===c&&(c=26),n=t.length-1;n>=0;n--){for(var u=t.words[n],f=c-1;f>=0;f--){var h=u>>f&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==s?(s<<=1,s|=h,(4===++a||0===n&&0===f)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}c=26}return i},S.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},S.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},o.mont=function(e){return new x(e)},i(x,S),x.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},x.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},x.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new o(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(void 0===e||e,this)}).call(this,r(40)(e))},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var c,u=[],f=!1,h=-1;function d(){f&&c&&(f=!1,c.length?u=c.concat(u):h=-1,u.length&&l())}function l(){if(!f){var e=a(d);f=!0;for(var t=u.length;t;){for(c=u,u=[];++h<t;)c&&c[h].run();h=-1,t=u.length}c=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new p(e,t)),1!==u.length||f||a(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";var n=t;n.version=r(261).version,n.utils=r(262),n.rand=r(120),n.curve=r(38),n.curves=r(267),n.ec=r(275),n.eddsa=r(279)},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})},i=this&&this.__await||function(e){return this instanceof i?(this.v=e,this):new i(e)},o=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),s=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){o[e]&&(n[e]=function(t){return new Promise(function(r,n){s.push([e,t,r,n])>1||c(e,t)})})}function c(e,t){try{!function(e){e.value instanceof i?Promise.resolve(e.value.v).then(u,f):h(s[0][2],e)}(o[e](t))}catch(e){h(s[0][3],e)}}function u(e){c("next",e)}function f(e){c("throw",e)}function h(e,t){e(t),s.shift(),s.length&&c(s[0][0],s[0][1])}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(12);t.QueryIterator=class{constructor(e,t,r,n,i){this.clientContext=e,this.query=t,this.options=r,this.fetchFunctions=n,this.resourceLink=i,this.query=t,this.fetchFunctions=n,this.options=r,this.resourceLink=i,this.queryExecutionContext=this._createQueryExecutionContext()}forEach(e){return n(this,void 0,void 0,function*(){this.reset();let t=0;for(;this.queryExecutionContext.hasMoreResults();){const r=yield this.queryExecutionContext.nextItem();if(void 0===r.result)return;if(!1===e(r.result,r.headers,t))return;++t}})}getAsyncIterator(){return o(this,arguments,function*(){for(this.reset();this.queryExecutionContext.hasMoreResults();){const e=yield i(this.queryExecutionContext.nextItem());if(void 0===e.result)return yield i(void 0);yield yield i(e)}})}nextItem(){return n(this,void 0,void 0,function*(){return this.queryExecutionContext.nextItem()})}current(){return n(this,void 0,void 0,function*(){return this.queryExecutionContext.current()})}hasMoreResults(){return this.queryExecutionContext.hasMoreResults()}toArray(){return n(this,arguments,void 0,function*(){if(0!==arguments.length)throw new Error("toArray takes no arguments");return this.reset(),this.toArrayTempResources=[],this._toArrayImplementation()})}executeNext(){return n(this,void 0,void 0,function*(){return this.queryExecutionContext.fetchMore()})}reset(){this.queryExecutionContext=this._createQueryExecutionContext()}_toArrayImplementation(){return n(this,void 0,void 0,function*(){for(;this.queryExecutionContext.hasMoreResults();){const{result:e,headers:t}=yield this.queryExecutionContext.nextItem();if(this.toArrayLastResHeaders=t,void 0===e)break;this.toArrayTempResources.push(e)}return{result:this.toArrayTempResources,headers:this.toArrayLastResHeaders}})}_createQueryExecutionContext(){return new s.ProxyQueryExecutionContext(this.clientContext,this.query,this.options,this.fetchFunctions,this.resourceLink)}}},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=r(8),i=r(0);function o(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function s(e){return 1===e.length?"0"+e:e}function a(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(var n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}else for(n=0;n<e.length;n++)r[n]=0|e[n];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=s(e[r].toString(16));return t},t.htonl=o,t.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=o(i)),r+=a(i.toString(16))}return r},t.zero2=s,t.zero8=a,t.join32=function(e,t,r,i){var o=r-t;n(o%4==0);for(var s=new Array(o/4),a=0,c=t;a<s.length;a++,c+=4){var u;u="big"===i?e[c]<<24|e[c+1]<<16|e[c+2]<<8|e[c+3]:e[c+3]<<24|e[c+2]<<16|e[c+1]<<8|e[c],s[a]=u>>>0}return s},t.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},t.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},t.sum64=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,s=(o<n?1:0)+r+i;e[t]=s>>>0,e[t+1]=o},t.sum64_hi=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,n){return t+n>>>0},t.sum64_4_hi=function(e,t,r,n,i,o,s,a){var c=0,u=t;return c+=(u=u+n>>>0)<t?1:0,c+=(u=u+o>>>0)<o?1:0,e+r+i+s+(c+=(u=u+a>>>0)<a?1:0)>>>0},t.sum64_4_lo=function(e,t,r,n,i,o,s,a){return t+n+o+a>>>0},t.sum64_5_hi=function(e,t,r,n,i,o,s,a,c,u){var f=0,h=t;return f+=(h=h+n>>>0)<t?1:0,f+=(h=h+o>>>0)<o?1:0,f+=(h=h+a>>>0)<a?1:0,e+r+i+s+c+(f+=(h=h+u>>>0)<u?1:0)>>>0},t.sum64_5_lo=function(e,t,r,n,i,o,s,a,c,u){return t+n+o+a+u>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(59)),n(r(63)),n(r(64)),n(r(65)),n(r(177)),n(r(66)),n(r(43)),n(r(178)),n(r(179)),n(r(186)),n(r(187)),n(r(188)),n(r(189))},function(e,t,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function n(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function i(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var o=r(24),s=Object.prototype.hasOwnProperty,a=Array.prototype.slice,c="foo"===function(){}.name;function u(e){return Object.prototype.toString.call(e)}function f(e){return!i(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var h=e.exports=m,d=/\s*function\s+([^\(\s]*)\s*/;function l(e){if(o.isFunction(e)){if(c)return e.name;var t=e.toString().match(d);return t&&t[1]}}function p(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function b(e){if(c||!o.isFunction(e))return o.inspect(e);var t=l(e);return"[Function"+(t?": "+t:"")+"]"}function y(e,t,r,n,i){throw new h.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function m(e,t){e||y(e,!0,t,"==",h.ok)}function g(e,t,r,s){if(e===t)return!0;if(i(e)&&i(t))return 0===n(e,t);if(o.isDate(e)&&o.isDate(t))return e.getTime()===t.getTime();if(o.isRegExp(e)&&o.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(f(e)&&f(t)&&u(e)===u(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===n(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(i(e)!==i(t))return!1;var c=(s=s||{actual:[],expected:[]}).actual.indexOf(e);return-1!==c&&c===s.expected.indexOf(t)||(s.actual.push(e),s.expected.push(t),function(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(o.isPrimitive(e)||o.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=v(e),s=v(t);if(i&&!s||!i&&s)return!1;if(i)return e=a.call(e),t=a.call(t),g(e,t,r);var c,u,f=S(e),h=S(t);if(f.length!==h.length)return!1;for(f.sort(),h.sort(),u=f.length-1;u>=0;u--)if(f[u]!==h[u])return!1;for(u=f.length-1;u>=0;u--)if(c=f[u],!g(e[c],t[c],r,n))return!1;return!0}(e,t,r,s))}return r?e===t:e==t}function v(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function _(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&y(i,r,"Missing expected exception"+n);var s="string"==typeof n,a=!e&&o.isError(i),c=!e&&i&&!r;if((a&&s&&w(i,r)||c)&&y(i,r,"Got unwanted exception"+n),e&&i&&r&&!w(i,r)||!e&&i)throw i}h.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return p(b(e.actual),128)+" "+e.operator+" "+p(b(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||y;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=l(t),o=n.indexOf("\n"+i);if(o>=0){var s=n.indexOf("\n",o+1);n=n.substring(s+1)}this.stack=n}}},o.inherits(h.AssertionError,Error),h.fail=y,h.ok=m,h.equal=function(e,t,r){e!=t&&y(e,t,r,"==",h.equal)},h.notEqual=function(e,t,r){e==t&&y(e,t,r,"!=",h.notEqual)},h.deepEqual=function(e,t,r){g(e,t,!1)||y(e,t,r,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(e,t,r){g(e,t,!0)||y(e,t,r,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(e,t,r){g(e,t,!1)&&y(e,t,r,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function e(t,r,n){g(t,r,!0)&&y(t,r,n,"notDeepStrictEqual",e)},h.strictEqual=function(e,t,r){e!==t&&y(e,t,r,"===",h.strictEqual)},h.notStrictEqual=function(e,t,r){e===t&&y(e,t,r,"!==",h.notStrictEqual)},h.throws=function(e,t,r){_(!0,e,t,r)},h.doesNotThrow=function(e,t,r){_(!1,e,t,r)},h.ifError=function(e){if(e)throw e};var S=Object.keys||function(e){var t=[];for(var r in e)s.call(e,r)&&t.push(r);return t}}).call(this,r(5))},function(e,t,r){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,r)});case 3:return t.nextTick(function(){e.call(null,r,n)});case 4:return t.nextTick(function(){e.call(null,r,n,i)});default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return t.nextTick(function(){e.apply(null,o)})}}}:e.exports=t}).call(this,r(6))},function(e,t,r){var n=r(3).Buffer,i=r(47).Transform,o=r(26).StringDecoder;function s(e){i.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(0)(s,i),s.prototype.update=function(e,t,r){"string"==typeof e&&(e=n.from(e,t));var i=this._update(e);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},s.prototype.setAutoPadding=function(){},s.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},s.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},s.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},s.prototype._transform=function(e,t,r){var n;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){n=e}finally{r(n)}},s.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},s.prototype._finalOrDigest=function(e){var t=this.__final()||n.alloc(0);return e&&(t=this._toString(t,e,!0)),t},s.prototype._toString=function(e,t,r){if(this._decoder||(this._decoder=new o(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var n=this._decoder.write(e);return r&&(n+=this._decoder.end()),n},e.exports=s},function(e,t,r){"use strict";var n=r(14),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(10);o.inherits=r(0);var s=r(100),a=r(49);o.inherits(h,s);for(var c=i(a.prototype),u=0;u<c.length;u++){var f=c[u];h.prototype[f]||(h.prototype[f]=a.prototype[f])}function h(e){if(!(this instanceof h))return new h(e);s.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(133)),n(r(134)),n(r(155)),n(r(156)),n(r(157)),n(r(158)),n(r(159)),n(r(160)),n(r(161)),n(r(162)),n(r(163)),n(r(164)),n(r(165)),n(r(166))},function(e,t,r){"use strict";var n=r(139),i=r(140);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=v(e));return e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),f=["'"].concat(u),h=["%","/","?",";","#"].concat(f),d=["/","?","#"],l=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,b={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=r(57);function v(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),a=-1!==o&&o<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var v=e=u.join(a);if(v=v.trim(),!r&&1===e.split("#").length){var w=c.exec(v);if(w)return this.path=v,this.href=v,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?g.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var _=s.exec(v);if(_){var S=(_=_[0]).toLowerCase();this.protocol=S,v=v.substr(_.length)}if(r||_||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===v.substr(0,2);!x||_&&y[_]||(v=v.substr(2),this.slashes=!0)}if(!y[_]&&(x||_&&!m[_])){for(var M,E,C=-1,P=0;P<d.length;P++){-1!==(k=v.indexOf(d[P]))&&(-1===C||k<C)&&(C=k)}-1!==(E=-1===C?v.lastIndexOf("@"):v.lastIndexOf("@",C))&&(M=v.slice(0,E),v=v.slice(E+1),this.auth=decodeURIComponent(M)),C=-1;for(P=0;P<h.length;P++){var k;-1!==(k=v.indexOf(h[P]))&&(-1===C||k<C)&&(C=k)}-1===C&&(C=v.length),this.host=v.slice(0,C),v=v.slice(C),this.parseHost(),this.hostname=this.hostname||"";var A="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!A)for(var I=this.hostname.split(/\./),R=(P=0,I.length);P<R;P++){var T=I[P];if(T&&!T.match(l)){for(var O="",B=0,D=T.length;B<D;B++)T.charCodeAt(B)>127?O+="x":O+=T[B];if(!O.match(l)){var q=I.slice(0,P),H=I.slice(P+1),j=T.match(p);j&&(q.push(j[1]),H.unshift(j[2])),H.length&&(v="/"+H.join(".")+v),this.hostname=q.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),A||(this.hostname=n.toASCII(this.hostname));var L=this.port?":"+this.port:"",U=this.hostname||"";this.host=U+L,this.href+=this.host,A&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!b[S])for(P=0,R=f.length;P<R;P++){var F=f[P];if(-1!==v.indexOf(F)){var N=encodeURIComponent(F);N===F&&(N=escape(F)),v=v.split(F).join(N)}}var z=v.indexOf("#");-1!==z&&(this.hash=v.substr(z),v=v.slice(0,z));var K=v.indexOf("?");if(-1!==K?(this.search=v.substr(K),this.query=v.substr(K+1),t&&(this.query=g.parse(this.query)),v=v.slice(0,K)):t&&(this.search="",this.query={}),v&&(this.pathname=v),m[S]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){L=this.pathname||"";var Q=this.search||"";this.path=L+Q}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,s="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=g.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+o+(r=r.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),u=0;u<c.length;u++){var f=c[u];"protocol"!==f&&(r[f]=e[f])}return m[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!m[e.protocol]){for(var h=Object.keys(e),d=0;d<h.length;d++){var l=h[d];r[l]=e[l]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||y[e.protocol])r.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var b=r.pathname||"",g=r.search||"";r.path=b+g}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var v=r.pathname&&"/"===r.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),_=w||v||r.host&&e.pathname,S=_,x=r.pathname&&r.pathname.split("/")||[],M=(p=e.pathname&&e.pathname.split("/")||[],r.protocol&&!m[r.protocol]);if(M&&(r.hostname="",r.port=null,r.host&&(""===x[0]?x[0]=r.host:x.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),_=_&&(""===p[0]||""===x[0])),w)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,x=p;else if(p.length)x||(x=[]),x.pop(),x=x.concat(p),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(M)r.hostname=r.host=x.shift(),(A=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=A.shift(),r.host=r.hostname=A.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!x.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var E=x.slice(-1)[0],C=(r.host||e.host||x.length>1)&&("."===E||".."===E)||""===E,P=0,k=x.length;k>=0;k--)"."===(E=x[k])?x.splice(k,1):".."===E?(x.splice(k,1),P++):P&&(x.splice(k,1),P--);if(!_&&!S)for(;P--;P)x.unshift("..");!_||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),C&&"/"!==x.join("/").substr(-1)&&x.push("");var A,I=""===x[0]||x[0]&&"/"===x[0].charAt(0);M&&(r.hostname=r.host=I?"":x.length?x.shift():"",(A=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=A.shift(),r.host=r.hostname=A.shift()));return(_=_||r.host&&x.length)&&!I&&x.unshift(""),x.length?r.pathname=x.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function o(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,s,a,c,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var f=new Error('Uncaught, unspecified "error" event. ('+t+")");throw f.context=t,f}if(o(r=this._events[e]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),r.apply(this,a)}else if(i(r))for(a=Array.prototype.slice.call(arguments,1),s=(u=r.slice()).length,c=0;c<s;c++)u[c].apply(this,a);return!0},r.prototype.addListener=function(e,t){var s;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(s=o(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[e].length>s&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!n(t))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(e,i),r||(r=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},r.prototype.removeListener=function(e,t){var r,o,s,a;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(r=this._events[e]).length,o=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(a=s;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){o=a;break}if(o<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[e]))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){"use strict";var n=r(14),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(10);o.inherits=r(0);var s=r(73),a=r(76);o.inherits(h,s);for(var c=i(a.prototype),u=0;u<c.length;u++){var f=c[u];h.prototype[f]||(h.prototype[f]=a.prototype[f])}function h(e){if(!(this instanceof h))return new h(e);s.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";(function(t,n){var i=r(3).Buffer,o=t.crypto||t.msCrypto;o&&o.getRandomValues?e.exports=function(e,r){if(e>65536)throw new Error("requested too many random bytes");var s=new t.Uint8Array(e);e>0&&o.getRandomValues(s);var a=i.from(s.buffer);if("function"==typeof r)return n.nextTick(function(){r(null,a)});return a}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(5),r(6))},function(e,t,r){var n=r(3).Buffer;function i(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}i.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var r=this._block,i=this._blockSize,o=e.length,s=this._len,a=0;a<o;){for(var c=s%i,u=Math.min(o-a,i-c),f=0;f<u;f++)r[c+f]=e[a+f];a+=u,(s+=u)%i==0&&this._update(r)}return this._len+=o,this},i.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var o=this._hash();return e?o.toString(e):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=1e4,i=1/n,o=1e3*n,s=1/o,a=60*o,c=1/a,u=60*a,f=1/u,h=24*u,d=1/h,l=1e3,p=60*l,b=60*p,y=24*b,m=Number.MAX_SAFE_INTEGER/n,g=Number.MIN_SAFE_INTEGER/n;class v{constructor(e,t,r,i,o){if(!Number.isInteger(e))throw new Error("days is not an integer");if(!Number.isInteger(t))throw new Error("hours is not an integer");if(!Number.isInteger(r))throw new Error("minutes is not an integer");if(!Number.isInteger(i))throw new Error("seconds is not an integer");if(!Number.isInteger(o))throw new Error("milliseconds is not an integer");const s=1e3*(3600*e*24+3600*t+60*r+i)+o;if(s>m||s<g)throw new Error("Total number of milliseconds was either too large or too small");this._ticks=s*n}add(e){if(v.additionDoesOverflow(this._ticks,e._ticks))throw new Error("Adding the two timestamps causes an overflow.");const t=this._ticks+e._ticks;return v.fromTicks(t)}subtract(e){if(v.subtractionDoesUnderflow(this._ticks,e._ticks))throw new Error("Subtracting the two timestamps causes an underflow.");const t=this._ticks-e._ticks;return v.fromTicks(t)}compareTo(e){if(null==e)return 1;if(!v.isTimeSpan(e))throw new Error("Argument must be a TimeSpan object");return v.compare(this,e)}duration(){return v.fromTicks(this._ticks>=0?this._ticks:-this._ticks)}equals(e){return!!v.isTimeSpan(e)&&this._ticks===e._ticks}negate(){return v.fromTicks(-this._ticks)}days(){return Math.floor(this._ticks/h)}hours(){return Math.floor(this._ticks/u)}milliseconds(){return Math.floor(this._ticks/n)}seconds(){return Math.floor(this._ticks/o)}ticks(){return this._ticks}totalDays(){return this._ticks*d}totalHours(){return this._ticks*f}totalMilliseconds(){return this._ticks*i}totalMinutes(){return this._ticks*c}totalSeconds(){return this._ticks*s}static fromTicks(e){const t=new v(0,0,0,0,0);return t._ticks=e,t}static isTimeSpan(e){return e._ticks}static additionDoesOverflow(e,t){const r=e+t;return e!==r-t||t!==r-e}static subtractionDoesUnderflow(e,t){const r=e-t;return e!==r+t||t!==e-r}static compare(e,t){return e._ticks>t._ticks?1:e._ticks<t._ticks?-1:0}static interval(e,t){if(isNaN(e))throw new Error("value must be a number");const r=e*t;if(r>m||r<g)throw new Error("timespan too long");return v.fromTicks(Math.floor(r*n))}static fromMilliseconds(e){return v.interval(e,1)}static fromSeconds(e){return v.interval(e,l)}static fromMinutes(e){return v.interval(e,p)}static fromHours(e){return v.interval(e,b)}static fromDays(e){return v.interval(e,y)}}v.zero=new v(0,0,0,0,0),v.maxValue=v.fromTicks(Number.MAX_SAFE_INTEGER),v.minValue=v.fromTicks(Number.MIN_SAFE_INTEGER),t.TimeSpan=v},function(e,t,r){(function(e,n){var i=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(a(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,o=n.length,s=String(e).replace(i,function(e){if("%%"===e)return"%";if(r>=o)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}}),c=n[r];r<o;c=n[++r])b(c)||!w(c)?s+=" "+c:s+=" "+a(c);return s},t.deprecate=function(r,i){if(g(e.process))return function(){return t.deprecate(r,i).apply(this,arguments)};if(!0===n.noDeprecation)return r;var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(i);n.traceDeprecation?console.trace(i):console.error(i),o=!0}return r.apply(this,arguments)}};var o,s={};function a(e,r){var n={seen:[],stylize:u};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&t._extend(n,r),g(n.showHidden)&&(n.showHidden=!1),g(n.depth)&&(n.depth=2),g(n.colors)&&(n.colors=!1),g(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),f(n,e,n.depth)}function c(e,t){var r=a.styles[t];return r?"["+a.colors[r][0]+"m"+e+"["+a.colors[r][1]+"m":e}function u(e,t){return e}function f(e,r,n){if(e.customInspect&&r&&x(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return m(i)||(i=f(e,i,n)),i}var o=function(e,t){if(g(t))return e.stylize("undefined","undefined");if(m(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(y(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(b(t))return e.stylize("null","null")}(e,r);if(o)return o;var s=Object.keys(r),a=function(e){var t={};return e.forEach(function(e,r){t[e]=!0}),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(r)),S(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(r);if(0===s.length){if(x(r)){var c=r.name?": "+r.name:"";return e.stylize("[Function"+c+"]","special")}if(v(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(_(r))return e.stylize(Date.prototype.toString.call(r),"date");if(S(r))return h(r)}var u,w="",M=!1,E=["{","}"];(l(r)&&(M=!0,E=["[","]"]),x(r))&&(w=" [Function"+(r.name?": "+r.name:"")+"]");return v(r)&&(w=" "+RegExp.prototype.toString.call(r)),_(r)&&(w=" "+Date.prototype.toUTCString.call(r)),S(r)&&(w=" "+h(r)),0!==s.length||M&&0!=r.length?n<0?v(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),u=M?function(e,t,r,n,i){for(var o=[],s=0,a=t.length;s<a;++s)P(t,String(s))?o.push(d(e,t,r,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(d(e,t,r,n,i,!0))}),o}(e,r,n,a,s):s.map(function(t){return d(e,r,n,a,t,M)}),e.seen.pop(),function(e,t,r){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(u,w,E)):E[0]+w+E[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,r,n,i,o){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),P(n,i)||(s="["+i+"]"),a||(e.seen.indexOf(c.value)<0?(a=b(r)?f(e,c.value,null):f(e,c.value,r-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),g(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function l(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function b(e){return null===e}function y(e){return"number"==typeof e}function m(e){return"string"==typeof e}function g(e){return void 0===e}function v(e){return w(e)&&"[object RegExp]"===M(e)}function w(e){return"object"==typeof e&&null!==e}function _(e){return w(e)&&"[object Date]"===M(e)}function S(e){return w(e)&&("[object Error]"===M(e)||e instanceof Error)}function x(e){return"function"==typeof e}function M(e){return Object.prototype.toString.call(e)}function E(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(g(o)&&(o=n.env.NODE_DEBUG||""),e=e.toUpperCase(),!s[e])if(new RegExp("\\b"+e+"\\b","i").test(o)){var r=n.pid;s[e]=function(){var n=t.format.apply(t,arguments);console.error("%s %d: %s",e,r,n)}}else s[e]=function(){};return s[e]},t.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=l,t.isBoolean=p,t.isNull=b,t.isNullOrUndefined=function(e){return null==e},t.isNumber=y,t.isString=m,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=g,t.isRegExp=v,t.isObject=w,t.isDate=_,t.isError=S,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(171);var C=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function P(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",function(){var e=new Date,t=[E(e.getHours()),E(e.getMinutes()),E(e.getSeconds())].join(":");return[e.getDate(),C[e.getMonth()],t].join(" ")}(),t.format.apply(t,arguments))},t.inherits=r(0),t._extend=function(e,t){if(!t||!w(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}}).call(this,r(5),r(6))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(69)),n(r(181)),n(r(183)),n(r(184)),n(r(185))},function(e,t,r){"use strict";var n=r(3).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=c,this.end=u,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=f,this.end=h,t=3;break;default:return this.write=d,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:-1}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�".repeat(r);if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�".repeat(r+1);if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�".repeat(r+2)}}(this,e,t);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function c(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function f(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�".repeat(this.lastTotal-this.lastNeed):t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=s(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r)return 0;if((i=s(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r)return 0;if((i=s(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var n=r(0),i=r(46),o=r(50),s=r(51),a=r(15);function c(e){a.call(this,"digest"),this._hash=e}n(c,a),c.prototype._update=function(e){this._hash.update(e)},c.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new i:"rmd160"===e||"ripemd160"===e?new o:new c(s(e))}},function(e,t,r){(function(t){e.exports=function(e,r){for(var n=Math.min(e.length,r.length),i=new t(n),o=0;o<n;++o)i[o]=e[o]^r[o];return i}}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=r(11),i=r(8);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=o,o.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-r,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},o.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},function(e,t,r){var n=t;n.bignum=r(4),n.define=r(283).define,n.base=r(31),n.constants=r(126),n.decoders=r(289),n.encoders=r(291)},function(e,t,r){var n=t;n.Reporter=r(286).Reporter,n.DecoderBuffer=r(125).DecoderBuffer,n.EncoderBuffer=r(125).EncoderBuffer,n.Node=r(287)},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0});const i=r(17);t.DocumentBase=i,t.AzureDocuments=i;var o=r(17);t.ConnectionMode=o.ConnectionMode,t.ConsistencyLevel=o.ConsistencyLevel,t.ConnectionPolicy=o.ConnectionPolicy,t.DatabaseAccount=o.DatabaseAccount,t.DataType=o.DataType,t.IndexingMode=o.IndexingMode,t.IndexKind=o.IndexKind,t.MediaReadMode=o.MediaReadMode,t.PartitionKind=o.PartitionKind,t.PermissionMode=o.PermissionMode,t.QueryCompatibilityMode=o.QueryCompatibilityMode,t.TriggerOperation=o.TriggerOperation,t.TriggerType=o.TriggerType,t.UserDefinedFunctionType=o.UserDefinedFunctionType;var s=r(1);t.Constants=s.Constants,t.UriFactory=s.UriFactory;var a=r(33);t.RetryOptions=a.RetryOptions;var c=r(9);t.QueryIterator=c.QueryIterator,n(r(42));var u=r(190);t.CosmosClient=u.CosmosClient,n(r(304))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(135)),n(r(136)),n(r(137)),n(r(138)),n(r(153))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={RetrievedDocumentCount:"retrievedDocumentCount",RetrievedDocumentSize:"retrievedDocumentSize",OutputDocumentCount:"outputDocumentCount",OutputDocumentSize:"outputDocumentSize",IndexHitRatio:"indexUtilizationRatio",IndexHitDocumentCount:"indexHitDocumentCount",TotalQueryExecutionTimeInMs:"totalExecutionTimeInMs",QueryCompileTimeInMs:"queryCompileTimeInMs",LogicalPlanBuildTimeInMs:"queryLogicalPlanBuildTimeInMs",PhysicalPlanBuildTimeInMs:"queryPhysicalPlanBuildTimeInMs",QueryOptimizationTimeInMs:"queryOptimizationTimeInMs",IndexLookupTimeInMs:"indexLookupTimeInMs",DocumentLoadTimeInMs:"documentLoadTimeInMs",VMExecutionTimeInMs:"VMExecutionTimeInMs",DocumentWriteTimeInMs:"writeOutputTimeInMs",QueryEngineTimes:"queryEngineTimes",SystemFunctionExecuteTimeInMs:"systemFunctionExecuteTimeInMs",UserDefinedFunctionExecutionTimeInMs:"userFunctionExecuteTimeInMs",RetrievedDocumentCountText:"Retrieved Document Count",RetrievedDocumentSizeText:"Retrieved Document Size",OutputDocumentCountText:"Output Document Count",OutputDocumentSizeText:"Output Document Size",IndexUtilizationText:"Index Utilization",TotalQueryExecutionTimeText:"Total Query Execution Time",QueryPreparationTimesText:"Query Preparation Times",QueryCompileTimeText:"Query Compilation Time",LogicalPlanBuildTimeText:"Logical Plan Build Time",PhysicalPlanBuildTimeText:"Physical Plan Build Time",QueryOptimizationTimeText:"Query Optimization Time",QueryEngineTimesText:"Query Engine Times",IndexLookupTimeText:"Index Lookup Time",DocumentLoadTimeText:"Document Load Time",WriteOutputTimeText:"Document Write Time",RuntimeExecutionTimesText:"Runtime Execution Times",TotalExecutionTimeText:"Query Engine Execution Time",SystemFunctionExecuteTimeText:"System Function Execution Time",UserDefinedFunctionExecutionTimeText:"User-defined Function Execution Time",ClientSideQueryMetricsText:"Client Side Metrics",RetriesText:"Retry Count",RequestChargeText:"Request Charge",FetchExecutionRangesText:"Partition Execution Timeline",SchedulingMetricsText:"Scheduling Metrics"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(23);t.QueryMetricsUtils=class{static parseDelimitedString(e){if(null==e)throw new Error("delimitedString is null or undefined");const t={},r=e.split(";");for(const e of r){const r=e.split("=");if(2!==r.length)throw new Error("recieved a malformed delimited string");const n=r[0],i=parseFloat(r[1]);t[n]=i}return t}static timeSpanFromMetrics(e,t){return t in e?n.TimeSpan.fromMilliseconds(e[t]):n.TimeSpan.zero}static isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}}},function(e,t,r){var n=r(3).Buffer;function i(e){n.isBuffer(e)||(e=n.from(e));for(var t=e.length/4|0,r=new Array(t),i=0;i<t;i++)r[i]=e.readUInt32BE(4*i);return r}function o(e){for(;0<e.length;e++)e[0]=0}function s(e,t,r,n,i){for(var o,s,a,c,u=r[0],f=r[1],h=r[2],d=r[3],l=e[0]^t[0],p=e[1]^t[1],b=e[2]^t[2],y=e[3]^t[3],m=4,g=1;g<i;g++)o=u[l>>>24]^f[p>>>16&255]^h[b>>>8&255]^d[255&y]^t[m++],s=u[p>>>24]^f[b>>>16&255]^h[y>>>8&255]^d[255&l]^t[m++],a=u[b>>>24]^f[y>>>16&255]^h[l>>>8&255]^d[255&p]^t[m++],c=u[y>>>24]^f[l>>>16&255]^h[p>>>8&255]^d[255&b]^t[m++],l=o,p=s,b=a,y=c;return o=(n[l>>>24]<<24|n[p>>>16&255]<<16|n[b>>>8&255]<<8|n[255&y])^t[m++],s=(n[p>>>24]<<24|n[b>>>16&255]<<16|n[y>>>8&255]<<8|n[255&l])^t[m++],a=(n[b>>>24]<<24|n[y>>>16&255]<<16|n[l>>>8&255]<<8|n[255&p])^t[m++],c=(n[y>>>24]<<24|n[l>>>16&255]<<16|n[p>>>8&255]<<8|n[255&b])^t[m++],[o>>>=0,s>>>=0,a>>>=0,c>>>=0]}var a=[0,1,2,4,8,16,32,64,128,27,54],c=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var r=[],n=[],i=[[],[],[],[]],o=[[],[],[],[]],s=0,a=0,c=0;c<256;++c){var u=a^a<<1^a<<2^a<<3^a<<4;u=u>>>8^255&u^99,r[s]=u,n[u]=s;var f=e[s],h=e[f],d=e[h],l=257*e[u]^16843008*u;i[0][s]=l<<24|l>>>8,i[1][s]=l<<16|l>>>16,i[2][s]=l<<8|l>>>24,i[3][s]=l,l=16843009*d^65537*h^257*f^16843008*s,o[0][u]=l<<24|l>>>8,o[1][u]=l<<16|l>>>16,o[2][u]=l<<8|l>>>24,o[3][u]=l,0===s?s=a=1:(s=f^e[e[e[d^f]]],a^=e[e[a]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:o}}();function u(e){this._key=i(e),this._reset()}u.blockSize=16,u.keySize=32,u.prototype.blockSize=u.blockSize,u.prototype.keySize=u.keySize,u.prototype._reset=function(){for(var e=this._key,t=e.length,r=t+6,n=4*(r+1),i=[],o=0;o<t;o++)i[o]=e[o];for(o=t;o<n;o++){var s=i[o-1];o%t==0?(s=s<<8|s>>>24,s=c.SBOX[s>>>24]<<24|c.SBOX[s>>>16&255]<<16|c.SBOX[s>>>8&255]<<8|c.SBOX[255&s],s^=a[o/t|0]<<24):t>6&&o%t==4&&(s=c.SBOX[s>>>24]<<24|c.SBOX[s>>>16&255]<<16|c.SBOX[s>>>8&255]<<8|c.SBOX[255&s]),i[o]=i[o-t]^s}for(var u=[],f=0;f<n;f++){var h=n-f,d=i[h-(f%4?0:4)];u[f]=f<4||h<=4?d:c.INV_SUB_MIX[0][c.SBOX[d>>>24]]^c.INV_SUB_MIX[1][c.SBOX[d>>>16&255]]^c.INV_SUB_MIX[2][c.SBOX[d>>>8&255]]^c.INV_SUB_MIX[3][c.SBOX[255&d]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=u},u.prototype.encryptBlockRaw=function(e){return s(e=i(e),this._keySchedule,c.SUB_MIX,c.SBOX,this._nRounds)},u.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),r=n.allocUnsafe(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r},u.prototype.decryptBlock=function(e){var t=(e=i(e))[1];e[1]=e[3],e[3]=t;var r=s(e,this._invKeySchedule,c.INV_SUB_MIX,c.INV_SBOX,this._nRounds),o=n.allocUnsafe(16);return o.writeUInt32BE(r[0],0),o.writeUInt32BE(r[3],4),o.writeUInt32BE(r[2],8),o.writeUInt32BE(r[1],12),o},u.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},e.exports.AES=u},function(e,t,r){var n=r(3).Buffer,i=r(46);e.exports=function(e,t,r,o){if(n.isBuffer(e)||(e=n.from(e,"binary")),t&&(n.isBuffer(t)||(t=n.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var s=r/8,a=n.alloc(s),c=n.alloc(o||0),u=n.alloc(0);s>0||o>0;){var f=new i;f.update(u),f.update(e),t&&f.update(t),u=f.digest();var h=0;if(s>0){var d=a.length-s;h=Math.min(s,u.length),u.copy(a,d,0,h),s-=h}if(h<u.length&&o>0){var l=c.length-o,p=Math.min(o,u.length-h);u.copy(c,l,h,h+p),o-=p}}return u.fill(0),{key:a,iv:c}}},function(e,t,r){"use strict";var n=t;n.base=r(263),n.short=r(264),n.mont=r(265),n.edwards=r(266)},function(e,t,r){(function(t){var n=r(282),i=r(294),o=r(295),s=r(53),a=r(109);function c(e){var r;"object"!=typeof e||t.isBuffer(e)||(r=e.passphrase,e=e.key),"string"==typeof e&&(e=new t(e));var c,u,f=o(e,r),h=f.tag,d=f.data;switch(h){case"CERTIFICATE":u=n.certificate.decode(d,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(u||(u=n.PublicKey.decode(d,"der")),c=u.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPublicKey.decode(u.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return u.subjectPrivateKey=u.subjectPublicKey,{type:"ec",data:u};case"1.2.840.10040.4.1":return u.algorithm.params.pub_key=n.DSAparam.decode(u.subjectPublicKey.data,"der"),{type:"dsa",data:u.algorithm.params};default:throw new Error("unknown key id "+c)}throw new Error("unknown key type "+h);case"ENCRYPTED PRIVATE KEY":d=function(e,r){var n=e.algorithm.decrypt.kde.kdeparams.salt,o=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),c=i[e.algorithm.decrypt.cipher.algo.join(".")],u=e.algorithm.decrypt.cipher.iv,f=e.subjectPrivateKey,h=parseInt(c.split("-")[1],10)/8,d=a.pbkdf2Sync(r,n,o,h),l=s.createDecipheriv(c,d,u),p=[];return p.push(l.update(f)),p.push(l.final()),t.concat(p)}(d=n.EncryptedPrivateKey.decode(d,"der"),r);case"PRIVATE KEY":switch(c=(u=n.PrivateKey.decode(d,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPrivateKey.decode(u.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:u.algorithm.curve,privateKey:n.ECPrivateKey.decode(u.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return u.algorithm.params.priv_key=n.DSAparam.decode(u.subjectPrivateKey,"der"),{type:"dsa",params:u.algorithm.params};default:throw new Error("unknown key id "+c)}throw new Error("unknown key type "+h);case"RSA PUBLIC KEY":return n.RSAPublicKey.decode(d,"der");case"RSA PRIVATE KEY":return n.RSAPrivateKey.decode(d,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:n.DSAPrivateKey.decode(d,"der")};case"EC PRIVATE KEY":return{curve:(d=n.ECPrivateKey.decode(d,"der")).parameters.value,privateKey:d.privateKey};default:throw new Error("unknown key type "+h)}}e.exports=c,c.signature=n.signature}).call(this,r(2).Buffer)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(60);t.ClientSideMetrics=n.ClientSideMetrics;var i=r(167);t.QueryMetrics=i.QueryMetrics;var o=r(34);t.QueryMetricsConstants=o.default;var s=r(35);t.QueryMetricsUtils=s.QueryMetricsUtils;var a=r(61);t.QueryPreparationTimes=a.QueryPreparationTimes;var c=r(62);t.RuntimeExecutionTimes=c.RuntimeExecutionTimes;var u=r(23);t.TimeSpan=u.TimeSpan},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(13),i=r(24),o=Object.freeze({NoValue:{ord:0},undefined:{ord:1},boolean:{ord:2,compFunc:(e,t)=>e===t?0:e>t?1:-1},number:{ord:4,compFunc:(e,t)=>e===t?0:e>t?1:-1},string:{ord:5,compFunc:(e,t)=>e===t?0:e>t?1:-1}});t.OrderByDocumentProducerComparator=class{constructor(e){this.sortOrder=e}targetPartitionKeyRangeDocProdComparator(e,t){const r=e.getTargetParitionKeyRange().minInclusive,n=t.getTargetParitionKeyRange().minInclusive;return r===n?0:r>n?1:-1}compare(e,t){if(e.gotSplit())return-1;if(t.gotSplit())return 1;const r=this.getOrderByItems(e.peekBufferedItems()[0]),n=this.getOrderByItems(t.peekBufferedItems()[0]);this.validateOrderByItems(r,n);for(let e=0;e<r.length;e++){const t=this.compareOrderByItem(r[e],n[e]);if(0!==t){if("Ascending"===this.sortOrder[e])return t;if("Descending"===this.sortOrder[e])return-t}}return this.targetPartitionKeyRangeDocProdComparator(e,t)}compareValue(e,t,r,i){const s=o[t].ord,a=s-o[i].ord;if(0!==a)return a;if(s===o[void 0].ord||s===o.NoValue.ord)return 0;const c=o[t].compFunc;return n.notEqual(c,void 0,"cannot find the comparison function"),c(e,r)}compareOrderByItem(e,t){const r=this.getType(e),n=this.getType(t);return this.compareValue(e.item,r,t.item,n)}validateOrderByItems(e,t){this._throwIf(e.length!==t.length,i.format("Expected %s, but got %s.",e.length,t.length)),this._throwIf(e.length!==this.sortOrder.length,"orderByItems cannot have a different size than sort orders.");for(let r=0;r<this.sortOrder.length;r++){const n=this.getType(e[r]),o=this.getType(t[r]);this._throwIf(n!==o,i.format("Expected %s, but got %s.",n,o))}}getType(e){if(void 0===e||void 0===e.item)return"NoValue";const t=typeof e.item;return this._throwIf(void 0===o[t],i.format("unrecognizable type %s",t)),t}getOrderByItems(e){return e.orderByItems}_throwIf(e,t){if(e)throw Error(t)}}},function(e,t,r){var n=r(45),i=r(18),o=e.exports;for(var s in n)n.hasOwnProperty(s)&&(o[s]=n[s]);function a(e){if("string"==typeof e&&(e=i.parse(e)),e.protocol||(e.protocol="https:"),"https:"!==e.protocol)throw new Error('Protocol "'+e.protocol+'" not supported. Expected "https:"');return e}o.request=function(e,t){return e=a(e),n.request.call(this,e,t)},o.get=function(e,t){return e=a(e),n.get.call(this,e,t)}},function(e,t,r){(function(e){var n=r(191),i=r(71),o=r(198),s=r(199),a=r(18),c=t;c.request=function(t,r){t="string"==typeof t?a.parse(t):o(t);var i=-1===e.location.protocol.search(/^https?:$/)?"http:":"",s=t.protocol||i,c=t.hostname||t.host,u=t.port,f=t.path||"/";c&&-1!==c.indexOf(":")&&(c="["+c+"]"),t.url=(c?s+"//"+c:"")+(u?":"+u:"")+f,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var h=new n(t);return r&&h.on("response",r),h},c.get=function(e,t){var r=c.request(e,t);return r.end(),r},c.ClientRequest=n,c.IncomingMessage=i.IncomingMessage,c.Agent=function(){},c.Agent.defaultMaxSockets=4,c.globalAgent=new c.Agent,c.STATUS_CODES=s,c.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,r(5))},function(e,t,r){"use strict";(function(t){var n=r(0),i=r(99),o=new Array(16);function s(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(e,t){return e<<t|e>>>32-t}function c(e,t,r,n,i,o,s){return a(e+(t&r|~t&n)+i+o|0,s)+t|0}function u(e,t,r,n,i,o,s){return a(e+(t&n|r&~n)+i+o|0,s)+t|0}function f(e,t,r,n,i,o,s){return a(e+(t^r^n)+i+o|0,s)+t|0}function h(e,t,r,n,i,o,s){return a(e+(r^(t|~n))+i+o|0,s)+t|0}n(s,i),s.prototype._update=function(){for(var e=o,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var r=this._a,n=this._b,i=this._c,s=this._d;n=h(n=h(n=h(n=h(n=f(n=f(n=f(n=f(n=u(n=u(n=u(n=u(n=c(n=c(n=c(n=c(n,i=c(i,s=c(s,r=c(r,n,i,s,e[0],3614090360,7),n,i,e[1],3905402710,12),r,n,e[2],606105819,17),s,r,e[3],3250441966,22),i=c(i,s=c(s,r=c(r,n,i,s,e[4],4118548399,7),n,i,e[5],1200080426,12),r,n,e[6],2821735955,17),s,r,e[7],4249261313,22),i=c(i,s=c(s,r=c(r,n,i,s,e[8],1770035416,7),n,i,e[9],2336552879,12),r,n,e[10],4294925233,17),s,r,e[11],2304563134,22),i=c(i,s=c(s,r=c(r,n,i,s,e[12],1804603682,7),n,i,e[13],4254626195,12),r,n,e[14],2792965006,17),s,r,e[15],1236535329,22),i=u(i,s=u(s,r=u(r,n,i,s,e[1],4129170786,5),n,i,e[6],3225465664,9),r,n,e[11],643717713,14),s,r,e[0],3921069994,20),i=u(i,s=u(s,r=u(r,n,i,s,e[5],3593408605,5),n,i,e[10],38016083,9),r,n,e[15],3634488961,14),s,r,e[4],3889429448,20),i=u(i,s=u(s,r=u(r,n,i,s,e[9],568446438,5),n,i,e[14],3275163606,9),r,n,e[3],4107603335,14),s,r,e[8],1163531501,20),i=u(i,s=u(s,r=u(r,n,i,s,e[13],2850285829,5),n,i,e[2],4243563512,9),r,n,e[7],1735328473,14),s,r,e[12],2368359562,20),i=f(i,s=f(s,r=f(r,n,i,s,e[5],4294588738,4),n,i,e[8],2272392833,11),r,n,e[11],1839030562,16),s,r,e[14],4259657740,23),i=f(i,s=f(s,r=f(r,n,i,s,e[1],2763975236,4),n,i,e[4],1272893353,11),r,n,e[7],4139469664,16),s,r,e[10],3200236656,23),i=f(i,s=f(s,r=f(r,n,i,s,e[13],681279174,4),n,i,e[0],3936430074,11),r,n,e[3],3572445317,16),s,r,e[6],76029189,23),i=f(i,s=f(s,r=f(r,n,i,s,e[9],3654602809,4),n,i,e[12],3873151461,11),r,n,e[15],530742520,16),s,r,e[2],3299628645,23),i=h(i,s=h(s,r=h(r,n,i,s,e[0],4096336452,6),n,i,e[7],1126891415,10),r,n,e[14],2878612391,15),s,r,e[5],4237533241,21),i=h(i,s=h(s,r=h(r,n,i,s,e[12],1700485571,6),n,i,e[3],2399980690,10),r,n,e[10],4293915773,15),s,r,e[1],2240044497,21),i=h(i,s=h(s,r=h(r,n,i,s,e[8],1873313359,6),n,i,e[15],4264355552,10),r,n,e[6],2734768916,15),s,r,e[13],1309151649,21),i=h(i,s=h(s,r=h(r,n,i,s,e[4],4149444226,6),n,i,e[11],3174756917,10),r,n,e[2],718787259,15),s,r,e[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+s|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=new t(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=s}).call(this,r(2).Buffer)},function(e,t,r){e.exports=i;var n=r(19).EventEmitter;function i(){n.call(this)}r(0)(i,n),i.Readable=r(48),i.Writable=r(225),i.Duplex=r(226),i.Transform=r(227),i.PassThrough=r(228),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",c));var s=!1;function a(){s||(s=!0,e.end())}function c(){s||(s=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){if(f(),0===n.listenerCount(this,"error"))throw e}function f(){r.removeListener("data",i),e.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",c),r.removeListener("error",u),e.removeListener("error",u),r.removeListener("end",f),r.removeListener("close",f),e.removeListener("close",f)}return r.on("error",u),e.on("error",u),r.on("end",f),r.on("close",f),e.on("close",f),e.emit("pipe",r),e}},function(e,t,r){(t=e.exports=r(100)).Stream=t,t.Readable=t,t.Writable=r(49),t.Duplex=r(16),t.Transform=r(103),t.PassThrough=r(224)},function(e,t,r){"use strict";(function(t,n,i){var o=r(14);function s(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var a,c=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;g.WritableState=m;var u=r(10);u.inherits=r(0);var f={deprecate:r(78)},h=r(101),d=r(3).Buffer,l=i.Uint8Array||function(){};var p,b=r(102);function y(){}function m(e,t){a=a||r(16),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,u=e.writableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(u||0===u)?u:f,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(o.nextTick(i,n),o.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),M(e,t))}(e,r,n,t,i);else{var s=S(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||_(e,r),n?c(w,e,r,s,i):w(e,r,s,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function g(e){if(a=a||r(16),!(p.call(g,this)||this instanceof a))return new g(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function v(e,t,r,n,i,o,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function w(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),M(e,t)}function _(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var a=0,c=!0;r;)i[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;i.allBuffers=c,v(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new s(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,f=r.encoding,h=r.callback;if(v(e,t,!1,t.objectMode?1:u.length,u,f,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),M(e,t)})}function M(e,t){var r=S(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}u.inherits(g,h),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:f.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===g&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,r){var n=this._writableState,i=!1,s=!n.objectMode&&function(e){return d.isBuffer(e)||e instanceof l}(e);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=y),n.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var i=!0,s=!1;return null===r?s=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(e.emit("error",s),o.nextTick(n,s),i=!1),i}(this,n,e,r))&&(n.pendingcb++,i=function(e,t,r,n,i,o){if(!r){var s=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var c=t.length<t.highWaterMark;c||(t.needDrain=!0);if(t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,a,n,i,o);return c}(this,n,s,e,t,r)),i},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||_(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},g.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,M(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=b.destroy,g.prototype._undestroy=b.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(6),r(77).setImmediate,r(5))},function(e,t,r){"use strict";var n=r(2).Buffer,i=r(0),o=r(99),s=new Array(16),a=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],c=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],u=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],f=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],d=[1352829926,1548603684,1836072691,2053994217,0];function l(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(e,t){return e<<t|e>>>32-t}function b(e,t,r,n,i,o,s,a){return p(e+(t^r^n)+o+s|0,a)+i|0}function y(e,t,r,n,i,o,s,a){return p(e+(t&r|~t&n)+o+s|0,a)+i|0}function m(e,t,r,n,i,o,s,a){return p(e+((t|~r)^n)+o+s|0,a)+i|0}function g(e,t,r,n,i,o,s,a){return p(e+(t&n|r&~n)+o+s|0,a)+i|0}function v(e,t,r,n,i,o,s,a){return p(e+(t^(r|~n))+o+s|0,a)+i|0}i(l,o),l.prototype._update=function(){for(var e=s,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,l=0|this._e,w=0|this._a,_=0|this._b,S=0|this._c,x=0|this._d,M=0|this._e,E=0;E<80;E+=1){var C,P;E<16?(C=b(r,n,i,o,l,e[a[E]],h[0],u[E]),P=v(w,_,S,x,M,e[c[E]],d[0],f[E])):E<32?(C=y(r,n,i,o,l,e[a[E]],h[1],u[E]),P=g(w,_,S,x,M,e[c[E]],d[1],f[E])):E<48?(C=m(r,n,i,o,l,e[a[E]],h[2],u[E]),P=m(w,_,S,x,M,e[c[E]],d[2],f[E])):E<64?(C=g(r,n,i,o,l,e[a[E]],h[3],u[E]),P=y(w,_,S,x,M,e[c[E]],d[3],f[E])):(C=v(r,n,i,o,l,e[a[E]],h[4],u[E]),P=b(w,_,S,x,M,e[c[E]],d[4],f[E])),r=l,l=o,o=p(i,10),i=n,n=C,w=M,M=x,x=p(S,10),S=_,_=P}var k=this._b+i+x|0;this._b=this._c+o+M|0,this._c=this._d+l+w|0,this._d=this._e+r+_|0,this._e=this._a+n+S|0,this._a=k},l.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=n.alloc?n.alloc(20):new n(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=l},function(e,t,r){(t=e.exports=function(e){e=e.toLowerCase();var r=t[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r}).sha=r(229),t.sha1=r(230),t.sha224=r(231),t.sha256=r(104),t.sha384=r(232),t.sha512=r(105)},function(e,t,r){"use strict";t.utils=r(238),t.Cipher=r(239),t.DES=r(240),t.CBC=r(241),t.EDE=r(242)},function(e,t,r){var n=r(244),i=r(252),o=r(115);t.createCipher=t.Cipher=n.createCipher,t.createCipheriv=t.Cipheriv=n.createCipheriv,t.createDecipher=t.Decipher=i.createDecipher,t.createDecipheriv=t.Decipheriv=i.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(o)}},function(e,t,r){var n={ECB:r(245),CBC:r(246),CFB:r(247),CFB8:r(248),CFB1:r(249),OFB:r(250),CTR:r(113),GCM:r(113)},i=r(115);for(var o in i)i[o].module=n[i[o].mode];e.exports=i},function(e,t,r){(function(t){var n=r(4),i=r(21);function o(e,r){var i=function(e){var t=s(e);return{blinder:t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(r),o=r.modulus.byteLength(),a=(n.mont(r.modulus),new n(e).mul(i.blinder).umod(r.modulus)),c=a.toRed(n.mont(r.prime1)),u=a.toRed(n.mont(r.prime2)),f=r.coefficient,h=r.prime1,d=r.prime2,l=c.redPow(r.exponent1),p=u.redPow(r.exponent2);l=l.fromRed(),p=p.fromRed();var b=l.isub(p).imul(f).umod(h);return b.imul(d),p.iadd(b),new t(p.imul(i.unblinder).umod(r.modulus).toArray(!1,o))}function s(e){for(var t=e.modulus.byteLength(),r=new n(i(t));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new n(i(t));return r}e.exports=o,o.getr=s}).call(this,r(2).Buffer)},function(e,t,r){var n=t;n.utils=r(11),n.common=r(29),n.sha=r(268),n.ripemd=r(272),n.hmac=r(273),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},function(e,t,r){"use strict";t.decode=t.parse=r(141),t.encode=t.stringify=r(142)},function(e,t,r){(function(e){var r,n=function(e){"use strict";var t=1e7,r=7,i=9007199254740992,o=h(i),s=Math.log(i);function a(e,t){return void 0===e?a[0]:void 0!==t?10==+t?V(e):F(e,t):V(e)}function c(e,t){this.value=e,this.sign=t,this.isSmall=!1}function u(e){this.value=e,this.sign=e<0,this.isSmall=!0}function f(e){return-i<e&&e<i}function h(e){return e<1e7?[e]:e<1e14?[e%1e7,Math.floor(e/1e7)]:[e%1e7,Math.floor(e/1e7)%1e7,Math.floor(e/1e14)]}function d(e){l(e);var r=e.length;if(r<4&&k(e,o)<0)switch(r){case 0:return 0;case 1:return e[0];case 2:return e[0]+e[1]*t;default:return e[0]+(e[1]+e[2]*t)*t}return e}function l(e){for(var t=e.length;0===e[--t];);e.length=t+1}function p(e){for(var t=new Array(e),r=-1;++r<e;)t[r]=0;return t}function b(e){return e>0?Math.floor(e):Math.ceil(e)}function y(e,r){var n,i,o=e.length,s=r.length,a=new Array(o),c=0,u=t;for(i=0;i<s;i++)c=(n=e[i]+r[i]+c)>=u?1:0,a[i]=n-c*u;for(;i<o;)c=(n=e[i]+c)===u?1:0,a[i++]=n-c*u;return c>0&&a.push(c),a}function m(e,t){return e.length>=t.length?y(e,t):y(t,e)}function g(e,r){var n,i,o=e.length,s=new Array(o),a=t;for(i=0;i<o;i++)n=e[i]-a+r,r=Math.floor(n/a),s[i]=n-r*a,r+=1;for(;r>0;)s[i++]=r%a,r=Math.floor(r/a);return s}function v(e,r){var n,i,o=e.length,s=r.length,a=new Array(o),c=0,u=t;for(n=0;n<s;n++)(i=e[n]-c-r[n])<0?(i+=u,c=1):c=0,a[n]=i;for(n=s;n<o;n++){if(!((i=e[n]-c)<0)){a[n++]=i;break}i+=u,a[n]=i}for(;n<o;n++)a[n]=e[n];return l(a),a}function w(e,r,n){var i,o,s=e.length,a=new Array(s),f=-r,h=t;for(i=0;i<s;i++)o=e[i]+f,f=Math.floor(o/h),o%=h,a[i]=o<0?o+h:o;return"number"==typeof(a=d(a))?(n&&(a=-a),new u(a)):new c(a,n)}function _(e,r){var n,i,o,s,a=e.length,c=r.length,u=p(a+c),f=t;for(o=0;o<a;++o){s=e[o];for(var h=0;h<c;++h)n=s*r[h]+u[o+h],i=Math.floor(n/f),u[o+h]=n-i*f,u[o+h+1]+=i}return l(u),u}function S(e,r){var n,i,o=e.length,s=new Array(o),a=t,c=0;for(i=0;i<o;i++)n=e[i]*r+c,c=Math.floor(n/a),s[i]=n-c*a;for(;c>0;)s[i++]=c%a,c=Math.floor(c/a);return s}function x(e,t){for(var r=[];t-- >0;)r.push(0);return r.concat(e)}function M(e,r,n){return new c(e<t?S(r,e):_(r,h(e)),n)}function E(e){var r,n,i,o,s=e.length,a=p(s+s),c=t;for(i=0;i<s;i++){n=0-(o=e[i])*o;for(var u=i;u<s;u++)r=o*e[u]*2+a[i+u]+n,n=Math.floor(r/c),a[i+u]=r-n*c;a[i+s]=n}return l(a),a}function C(e,r){var n,i,o,s,a=e.length,c=p(a),u=t;for(o=0,n=a-1;n>=0;--n)o=(s=o*u+e[n])-(i=b(s/r))*r,c[n]=0|i;return[c,0|o]}function P(e,r){var n,i,o=V(r),s=e.value,f=o.value;if(0===f)throw new Error("Cannot divide by zero");if(e.isSmall)return o.isSmall?[new u(b(s/f)),new u(s%f)]:[a[0],e];if(o.isSmall){if(1===f)return[e,a[0]];if(-1==f)return[e.negate(),a[0]];var y=Math.abs(f);if(y<t){i=d((n=C(s,y))[0]);var m=n[1];return e.sign&&(m=-m),"number"==typeof i?(e.sign!==o.sign&&(i=-i),[new u(i),new u(m)]):[new c(i,e.sign!==o.sign),new u(m)]}f=h(y)}var g=k(s,f);if(-1===g)return[a[0],e];if(0===g)return[a[e.sign===o.sign?1:-1],a[0]];i=(n=s.length+f.length<=200?function(e,r){var n,i,o,s,a,c,u,f=e.length,h=r.length,l=t,b=p(r.length),y=r[h-1],m=Math.ceil(l/(2*y)),g=S(e,m),v=S(r,m);for(g.length<=f&&g.push(0),v.push(0),y=v[h-1],i=f-h;i>=0;i--){for(n=l-1,g[i+h]!==y&&(n=Math.floor((g[i+h]*l+g[i+h-1])/y)),o=0,s=0,c=v.length,a=0;a<c;a++)o+=n*v[a],u=Math.floor(o/l),s+=g[i+a]-(o-u*l),o=u,s<0?(g[i+a]=s+l,s=-1):(g[i+a]=s,s=0);for(;0!==s;){for(n-=1,o=0,a=0;a<c;a++)(o+=g[i+a]-l+v[a])<0?(g[i+a]=o+l,o=0):(g[i+a]=o,o=1);s+=o}b[i]=n}return g=C(g,m)[0],[d(b),d(g)]}(s,f):function(e,r){for(var n,i,o,s,a,c=e.length,u=r.length,f=[],h=[],p=t;c;)if(h.unshift(e[--c]),l(h),k(h,r)<0)f.push(0);else{o=h[(i=h.length)-1]*p+h[i-2],s=r[u-1]*p+r[u-2],i>u&&(o=(o+1)*p),n=Math.ceil(o/s);do{if(k(a=S(r,n),h)<=0)break;n--}while(n);f.push(n),h=v(h,a)}return f.reverse(),[d(f),d(h)]}(s,f))[0];var w=e.sign!==o.sign,_=n[1],x=e.sign;return"number"==typeof i?(w&&(i=-i),i=new u(i)):i=new c(i,w),"number"==typeof _?(x&&(_=-_),_=new u(_)):_=new c(_,x),[i,_]}function k(e,t){if(e.length!==t.length)return e.length>t.length?1:-1;for(var r=e.length-1;r>=0;r--)if(e[r]!==t[r])return e[r]>t[r]?1:-1;return 0}function A(e){var t=e.abs();return!t.isUnit()&&(!!(t.equals(2)||t.equals(3)||t.equals(5))||!(t.isEven()||t.isDivisibleBy(3)||t.isDivisibleBy(5))&&(!!t.lesser(25)||void 0))}c.prototype=Object.create(a.prototype),u.prototype=Object.create(a.prototype),c.prototype.add=function(e){var t=V(e);if(this.sign!==t.sign)return this.subtract(t.negate());var r=this.value,n=t.value;return t.isSmall?new c(g(r,Math.abs(n)),this.sign):new c(m(r,n),this.sign)},c.prototype.plus=c.prototype.add,u.prototype.add=function(e){var t=V(e),r=this.value;if(r<0!==t.sign)return this.subtract(t.negate());var n=t.value;if(t.isSmall){if(f(r+n))return new u(r+n);n=h(Math.abs(n))}return new c(g(n,Math.abs(r)),r<0)},u.prototype.plus=u.prototype.add,c.prototype.subtract=function(e){var t=V(e);if(this.sign!==t.sign)return this.add(t.negate());var r=this.value,n=t.value;return t.isSmall?w(r,Math.abs(n),this.sign):function(e,t,r){var n;return k(e,t)>=0?n=v(e,t):(n=v(t,e),r=!r),"number"==typeof(n=d(n))?(r&&(n=-n),new u(n)):new c(n,r)}(r,n,this.sign)},c.prototype.minus=c.prototype.subtract,u.prototype.subtract=function(e){var t=V(e),r=this.value;if(r<0!==t.sign)return this.add(t.negate());var n=t.value;return t.isSmall?new u(r-n):w(n,Math.abs(r),r>=0)},u.prototype.minus=u.prototype.subtract,c.prototype.negate=function(){return new c(this.value,!this.sign)},u.prototype.negate=function(){var e=this.sign,t=new u(-this.value);return t.sign=!e,t},c.prototype.abs=function(){return new c(this.value,!1)},u.prototype.abs=function(){return new u(Math.abs(this.value))},c.prototype.multiply=function(e){var r,n=V(e),i=this.value,o=n.value,s=this.sign!==n.sign;if(n.isSmall){if(0===o)return a[0];if(1===o)return this;if(-1===o)return this.negate();if((r=Math.abs(o))<t)return new c(S(i,r),s);o=h(r)}return function(e,t){return-.012*e-.012*t+15e-6*e*t>0}(i.length,o.length)?new c(function e(t,r){var n=Math.max(t.length,r.length);if(n<=30)return _(t,r);n=Math.ceil(n/2);var i=t.slice(n),o=t.slice(0,n),s=r.slice(n),a=r.slice(0,n),c=e(o,a),u=e(i,s),f=m(m(c,x(v(v(e(m(o,i),m(a,s)),c),u),n)),x(u,2*n));return l(f),f}(i,o),s):new c(_(i,o),s)},c.prototype.times=c.prototype.multiply,u.prototype._multiplyBySmall=function(e){return f(e.value*this.value)?new u(e.value*this.value):M(Math.abs(e.value),h(Math.abs(this.value)),this.sign!==e.sign)},c.prototype._multiplyBySmall=function(e){return 0===e.value?a[0]:1===e.value?this:-1===e.value?this.negate():M(Math.abs(e.value),this.value,this.sign!==e.sign)},u.prototype.multiply=function(e){return V(e)._multiplyBySmall(this)},u.prototype.times=u.prototype.multiply,c.prototype.square=function(){return new c(E(this.value),!1)},u.prototype.square=function(){var e=this.value*this.value;return f(e)?new u(e):new c(E(h(Math.abs(this.value))),!1)},c.prototype.divmod=function(e){var t=P(this,e);return{quotient:t[0],remainder:t[1]}},u.prototype.divmod=c.prototype.divmod,c.prototype.divide=function(e){return P(this,e)[0]},u.prototype.over=u.prototype.divide=c.prototype.over=c.prototype.divide,c.prototype.mod=function(e){return P(this,e)[1]},u.prototype.remainder=u.prototype.mod=c.prototype.remainder=c.prototype.mod,c.prototype.pow=function(e){var t,r,n,i=V(e),o=this.value,s=i.value;if(0===s)return a[1];if(0===o)return a[0];if(1===o)return a[1];if(-1===o)return i.isEven()?a[1]:a[-1];if(i.sign)return a[0];if(!i.isSmall)throw new Error("The exponent "+i.toString()+" is too large.");if(this.isSmall&&f(t=Math.pow(o,s)))return new u(b(t));for(r=this,n=a[1];!0&s&&(n=n.times(r),--s),0!==s;)s/=2,r=r.square();return n},u.prototype.pow=c.prototype.pow,c.prototype.modPow=function(e,t){if(e=V(e),(t=V(t)).isZero())throw new Error("Cannot take modPow with modulus 0");for(var r=a[1],n=this.mod(t);e.isPositive();){if(n.isZero())return a[0];e.isOdd()&&(r=r.multiply(n).mod(t)),e=e.divide(2),n=n.square().mod(t)}return r},u.prototype.modPow=c.prototype.modPow,c.prototype.compareAbs=function(e){var t=V(e),r=this.value,n=t.value;return t.isSmall?1:k(r,n)},u.prototype.compareAbs=function(e){var t=V(e),r=Math.abs(this.value),n=t.value;return t.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},c.prototype.compare=function(e){if(e===1/0)return-1;if(e===-1/0)return 1;var t=V(e),r=this.value,n=t.value;return this.sign!==t.sign?t.sign?1:-1:t.isSmall?this.sign?-1:1:k(r,n)*(this.sign?-1:1)},c.prototype.compareTo=c.prototype.compare,u.prototype.compare=function(e){if(e===1/0)return-1;if(e===-1/0)return 1;var t=V(e),r=this.value,n=t.value;return t.isSmall?r==n?0:r>n?1:-1:r<0!==t.sign?r<0?-1:1:r<0?1:-1},u.prototype.compareTo=u.prototype.compare,c.prototype.equals=function(e){return 0===this.compare(e)},u.prototype.eq=u.prototype.equals=c.prototype.eq=c.prototype.equals,c.prototype.notEquals=function(e){return 0!==this.compare(e)},u.prototype.neq=u.prototype.notEquals=c.prototype.neq=c.prototype.notEquals,c.prototype.greater=function(e){return this.compare(e)>0},u.prototype.gt=u.prototype.greater=c.prototype.gt=c.prototype.greater,c.prototype.lesser=function(e){return this.compare(e)<0},u.prototype.lt=u.prototype.lesser=c.prototype.lt=c.prototype.lesser,c.prototype.greaterOrEquals=function(e){return this.compare(e)>=0},u.prototype.geq=u.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals,c.prototype.lesserOrEquals=function(e){return this.compare(e)<=0},u.prototype.leq=u.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals,c.prototype.isEven=function(){return 0==(1&this.value[0])},u.prototype.isEven=function(){return 0==(1&this.value)},c.prototype.isOdd=function(){return 1==(1&this.value[0])},u.prototype.isOdd=function(){return 1==(1&this.value)},c.prototype.isPositive=function(){return!this.sign},u.prototype.isPositive=function(){return this.value>0},c.prototype.isNegative=function(){return this.sign},u.prototype.isNegative=function(){return this.value<0},c.prototype.isUnit=function(){return!1},u.prototype.isUnit=function(){return 1===Math.abs(this.value)},c.prototype.isZero=function(){return!1},u.prototype.isZero=function(){return 0===this.value},c.prototype.isDivisibleBy=function(e){var t=V(e),r=t.value;return 0!==r&&(1===r||(2===r?this.isEven():this.mod(t).equals(a[0])))},u.prototype.isDivisibleBy=c.prototype.isDivisibleBy,c.prototype.isPrime=function(){var e=A(this);if(void 0!==e)return e;for(var t,r,i,o,s=this.abs(),c=s.prev(),u=[2,3,5,7,11,13,17,19],f=c;f.isEven();)f=f.divide(2);for(i=0;i<u.length;i++)if(!(o=n(u[i]).modPow(f,s)).equals(a[1])&&!o.equals(c)){for(r=!0,t=f;r&&t.lesser(c);t=t.multiply(2))(o=o.square().mod(s)).equals(c)&&(r=!1);if(r)return!1}return!0},u.prototype.isPrime=c.prototype.isPrime,c.prototype.isProbablePrime=function(e){var t=A(this);if(void 0!==t)return t;for(var r=this.abs(),i=void 0===e?5:e,o=0;o<i;o++){if(!n.randBetween(2,r.minus(2)).modPow(r.prev(),r).isUnit())return!1}return!0},u.prototype.isProbablePrime=c.prototype.isProbablePrime,c.prototype.modInv=function(e){for(var t,r,i,o=n.zero,s=n.one,a=V(e),c=this.abs();!c.equals(n.zero);)t=a.divide(c),r=o,i=a,o=s,a=c,s=r.subtract(t.multiply(s)),c=i.subtract(t.multiply(c));if(!a.equals(1))throw new Error(this.toString()+" and "+e.toString()+" are not co-prime");return-1===o.compare(0)&&(o=o.add(e)),this.isNegative()?o.negate():o},u.prototype.modInv=c.prototype.modInv,c.prototype.next=function(){var e=this.value;return this.sign?w(e,1,this.sign):new c(g(e,1),this.sign)},u.prototype.next=function(){var e=this.value;return e+1<i?new u(e+1):new c(o,!1)},c.prototype.prev=function(){var e=this.value;return this.sign?new c(g(e,1),!0):w(e,1,this.sign)},u.prototype.prev=function(){var e=this.value;return e-1>-i?new u(e-1):new c(o,!0)};for(var I=[1];2*I[I.length-1]<=t;)I.push(2*I[I.length-1]);var R=I.length,T=I[R-1];function O(e){return("number"==typeof e||"string"==typeof e)&&+Math.abs(e)<=t||e instanceof c&&e.value.length<=1}function B(e,t,r){t=V(t);for(var i=e.isNegative(),o=t.isNegative(),s=i?e.not():e,a=o?t.not():t,c=0,u=0,f=null,h=null,d=[];!s.isZero()||!a.isZero();)c=(f=P(s,T))[1].toJSNumber(),i&&(c=T-1-c),u=(h=P(a,T))[1].toJSNumber(),o&&(u=T-1-u),s=f[0],a=h[0],d.push(r(c,u));for(var l=0!==r(i?1:0,o?1:0)?n(-1):n(0),p=d.length-1;p>=0;p-=1)l=l.multiply(T).add(n(d[p]));return l}c.prototype.shiftLeft=function(e){if(!O(e))throw new Error(String(e)+" is too large for shifting.");if((e=+e)<0)return this.shiftRight(-e);var t=this;if(t.isZero())return t;for(;e>=R;)t=t.multiply(T),e-=R-1;return t.multiply(I[e])},u.prototype.shiftLeft=c.prototype.shiftLeft,c.prototype.shiftRight=function(e){var t;if(!O(e))throw new Error(String(e)+" is too large for shifting.");if((e=+e)<0)return this.shiftLeft(-e);for(var r=this;e>=R;){if(r.isZero()||r.isNegative()&&r.isUnit())return r;r=(t=P(r,T))[1].isNegative()?t[0].prev():t[0],e-=R-1}return(t=P(r,I[e]))[1].isNegative()?t[0].prev():t[0]},u.prototype.shiftRight=c.prototype.shiftRight,c.prototype.not=function(){return this.negate().prev()},u.prototype.not=c.prototype.not,c.prototype.and=function(e){return B(this,e,function(e,t){return e&t})},u.prototype.and=c.prototype.and,c.prototype.or=function(e){return B(this,e,function(e,t){return e|t})},u.prototype.or=c.prototype.or,c.prototype.xor=function(e){return B(this,e,function(e,t){return e^t})},u.prototype.xor=c.prototype.xor;var D=1<<30,q=(t&-t)*(t&-t)|D;function H(e){var r=e.value,n="number"==typeof r?r|D:r[0]+r[1]*t|q;return n&-n}function j(e,t){return e=V(e),t=V(t),e.greater(t)?e:t}function L(e,t){return e=V(e),t=V(t),e.lesser(t)?e:t}function U(e,t){if(e=V(e).abs(),t=V(t).abs(),e.equals(t))return e;if(e.isZero())return t;if(t.isZero())return e;for(var r,n,i=a[1];e.isEven()&&t.isEven();)r=Math.min(H(e),H(t)),e=e.divide(r),t=t.divide(r),i=i.multiply(r);for(;e.isEven();)e=e.divide(H(e));do{for(;t.isEven();)t=t.divide(H(t));e.greater(t)&&(n=t,t=e,e=n),t=t.subtract(e)}while(!t.isZero());return i.isUnit()?e:e.multiply(i)}c.prototype.bitLength=function(){var e=this;return e.compareTo(n(0))<0&&(e=e.negate().subtract(n(1))),0===e.compareTo(n(0))?n(0):n(function e(t,r){if(r.compareTo(t)<=0){var i=e(t,r.square(r)),o=i.p,s=i.e,a=o.multiply(r);return a.compareTo(t)<=0?{p:a,e:2*s+1}:{p:o,e:2*s}}return{p:n(1),e:0}}(e,n(2)).e).add(n(1))},u.prototype.bitLength=c.prototype.bitLength;var F=function(e,t){for(var r=e.length,n=Math.abs(t),i=0;i<r;i++){if("-"!==(f=e[i].toLowerCase())&&/[a-z0-9]/.test(f)){if(/[0-9]/.test(f)&&+f>=n){if("1"===f&&1===n)continue;throw new Error(f+" is not a valid digit in base "+t+".")}if(f.charCodeAt(0)-87>=n)throw new Error(f+" is not a valid digit in base "+t+".")}}if(2<=t&&t<=36&&r<=s/Math.log(t)){var o=parseInt(e,t);if(isNaN(o))throw new Error(f+" is not a valid digit in base "+t+".");return new u(parseInt(e,t))}t=V(t);var a=[],c="-"===e[0];for(i=c?1:0;i<e.length;i++){var f,h=(f=e[i].toLowerCase()).charCodeAt(0);if(48<=h&&h<=57)a.push(V(f));else if(97<=h&&h<=122)a.push(V(f.charCodeAt(0)-87));else{if("<"!==f)throw new Error(f+" is not a valid character");var d=i;do{i++}while(">"!==e[i]);a.push(V(e.slice(d+1,i)))}}return N(a,t,c)};function N(e,t,r){var n,i=a[0],o=a[1];for(n=e.length-1;n>=0;n--)i=i.add(e[n].times(o)),o=o.times(t);return r?i.negate():i}function z(e){return e<=35?"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e):"<"+e+">"}function K(e,t){if((t=n(t)).isZero()){if(e.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(t.equals(-1)){if(e.isZero())return{value:[0],isNegative:!1};if(e.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-e)).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(+e-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var i=!1;if(e.isNegative()&&t.isPositive()&&(i=!0,e=e.abs()),t.equals(1))return e.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(+e)).map(Number.prototype.valueOf,1),isNegative:i};for(var o,s=[],a=e;a.isNegative()||a.compareAbs(t)>=0;){a=(o=a.divmod(t)).quotient;var c=o.remainder;c.isNegative()&&(c=t.minus(c).abs(),a=a.next()),s.push(c.toJSNumber())}return s.push(a.toJSNumber()),{value:s.reverse(),isNegative:i}}function Q(e,t){var r=K(e,t);return(r.isNegative?"-":"")+r.value.map(z).join("")}function W(e){if(f(+e)){var t=+e;if(t===b(t))return new u(t);throw new Error("Invalid integer: "+e)}var n="-"===e[0];n&&(e=e.slice(1));var i=e.split(/e/i);if(i.length>2)throw new Error("Invalid integer: "+i.join("e"));if(2===i.length){var o=i[1];if("+"===o[0]&&(o=o.slice(1)),(o=+o)!==b(o)||!f(o))throw new Error("Invalid integer: "+o+" is not a valid exponent.");var s=i[0],a=s.indexOf(".");if(a>=0&&(o-=s.length-a-1,s=s.slice(0,a)+s.slice(a+1)),o<0)throw new Error("Cannot include negative exponent part for integers");e=s+=new Array(o+1).join("0")}if(!/^([0-9][0-9]*)$/.test(e))throw new Error("Invalid integer: "+e);for(var h=[],d=e.length,p=r,y=d-p;d>0;)h.push(+e.slice(y,d)),(y-=p)<0&&(y=0),d-=p;return l(h),new c(h,n)}function V(e){return"number"==typeof e?function(e){if(f(e)){if(e!==b(e))throw new Error(e+" is not an integer.");return new u(e)}return W(e.toString())}(e):"string"==typeof e?W(e):e}c.prototype.toArray=function(e){return K(this,e)},u.prototype.toArray=function(e){return K(this,e)},c.prototype.toString=function(e){if(void 0===e&&(e=10),10!==e)return Q(this,e);for(var t,r=this.value,n=r.length,i=String(r[--n]);--n>=0;)t=String(r[n]),i+="0000000".slice(t.length)+t;return(this.sign?"-":"")+i},u.prototype.toString=function(e){return void 0===e&&(e=10),10!=e?Q(this,e):String(this.value)},c.prototype.toJSON=u.prototype.toJSON=function(){return this.toString()},c.prototype.valueOf=function(){return parseInt(this.toString(),10)},c.prototype.toJSNumber=c.prototype.valueOf,u.prototype.valueOf=function(){return this.value},u.prototype.toJSNumber=u.prototype.valueOf;for(var Y=0;Y<1e3;Y++)a[Y]=new u(Y),Y>0&&(a[-Y]=new u(-Y));return a.one=a[1],a.zero=a[0],a.minusOne=a[-1],a.max=j,a.min=L,a.gcd=U,a.lcm=function(e,t){return e=V(e).abs(),t=V(t).abs(),e.divide(U(e,t)).multiply(t)},a.isInstance=function(e){return e instanceof c||e instanceof u},a.randBetween=function(e,r){var n=L(e=V(e),r=V(r)),i=j(e,r).subtract(n).add(1);if(i.isSmall)return n.add(Math.floor(Math.random()*i));for(var o=[],s=!0,a=i.value.length-1;a>=0;a--){var f=s?i.value[a]:t,h=b(Math.random()*f);o.unshift(h),h<f&&(s=!1)}return o=d(o),n.add("number"==typeof o?new u(o):new c(o,!1))},a.fromArray=function(e,t,r){return N(e.map(V),V(t||10),r)},a}();void 0!==e&&e.hasOwnProperty("exports")&&(e.exports=n),void 0===(r=function(){return n}.apply(t,[]))||(e.exports=r)}).call(this,r(40)(e))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),i=r(42);class o{static getRequestChargeIfAny(e){if("number"==typeof e)return e;if("string"==typeof e)return parseFloat(e);if(e){const t=e[n.Constants.HttpHeaders.RequestCharge];return t?parseFloat(t):0}return 0}static getInitialHeader(){const e={};return e[n.Constants.HttpHeaders.RequestCharge]=0,e[n.Constants.HttpHeaders.QueryMetrics]={},e}static mergeHeaders(e,t){if(void 0===e[n.Constants.HttpHeaders.RequestCharge]&&(e[n.Constants.HttpHeaders.RequestCharge]=0),void 0===e[n.Constants.HttpHeaders.QueryMetrics]&&(e[n.Constants.HttpHeaders.QueryMetrics]=i.QueryMetrics.zero),t&&(e[n.Constants.HttpHeaders.RequestCharge]+=o.getRequestChargeIfAny(t),t[n.Constants.HttpHeaders.IsRUPerMinuteUsed]&&(e[n.Constants.HttpHeaders.IsRUPerMinuteUsed]=t[n.Constants.HttpHeaders.IsRUPerMinuteUsed]),n.Constants.HttpHeaders.QueryMetrics in t)){const r=e[n.Constants.HttpHeaders.QueryMetrics],i=t[n.Constants.HttpHeaders.QueryMetrics];for(const e in i)if(e in r){const t=r[e].add(i[e]);r[e]=t}else r[e]=i[e]}}}t.HeaderUtils=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e){this.requestCharge=e}add(...e){if(null==arguments||0===arguments.length)throw new Error("arguments was null or empty");let t=this.requestCharge;for(const r of e){if(null==r)throw new Error("clientSideMetrics has null or undefined item(s)");t+=r.requestCharge}return new n(t)}static createFromArray(...e){if(null==e)throw new Error("clientSideMetricsArray is null or undefined item(s)");return this.zero.add(...e)}}n.zero=new n(0),t.ClientSideMetrics=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(34),i=r(35),o=r(23);class s{constructor(e,t,r,n){this.queryCompilationTime=e,this.logicalPlanBuildTime=t,this.physicalPlanBuildTime=r,this.queryOptimizationTime=n}add(...e){if(null==arguments||0===arguments.length)throw new Error("arguments was null or empty");let t=this.queryCompilationTime,r=this.logicalPlanBuildTime,n=this.physicalPlanBuildTime,i=this.queryOptimizationTime;for(const o of e){if(null==o)throw new Error("queryPreparationTimesArray has null or undefined item(s)");t=t.add(o.queryCompilationTime),r=r.add(o.logicalPlanBuildTime),n=n.add(o.physicalPlanBuildTime),i=i.add(o.queryOptimizationTime)}return new s(t,r,n,i)}toDelimitedString(){return`${n.default.QueryCompileTimeInMs}=${this.queryCompilationTime.totalMilliseconds()};`+`${n.default.LogicalPlanBuildTimeInMs}=${this.logicalPlanBuildTime.totalMilliseconds()};`+`${n.default.PhysicalPlanBuildTimeInMs}=${this.physicalPlanBuildTime.totalMilliseconds()};`+`${n.default.QueryOptimizationTimeInMs}=${this.queryOptimizationTime.totalMilliseconds()}`}static createFromArray(e){if(null==e)throw new Error("queryPreparationTimesArray is null or undefined item(s)");return s.zero.add(...e)}static createFromDelimitedString(e){const t=i.QueryMetricsUtils.parseDelimitedString(e);return new s(i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.QueryCompileTimeInMs),i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.LogicalPlanBuildTimeInMs),i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.PhysicalPlanBuildTimeInMs),i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.QueryOptimizationTimeInMs))}}s.zero=new s(o.TimeSpan.zero,o.TimeSpan.zero,o.TimeSpan.zero,o.TimeSpan.zero),t.QueryPreparationTimes=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(34),i=r(35),o=r(23);class s{constructor(e,t,r){this.queryEngineExecutionTime=e,this.systemFunctionExecutionTime=t,this.userDefinedFunctionExecutionTime=r}add(...e){if(null==arguments||0===arguments.length)throw new Error("arguments was null or empty");let t=this.queryEngineExecutionTime,r=this.systemFunctionExecutionTime,n=this.userDefinedFunctionExecutionTime;for(const i of e){if(null==i)throw new Error("runtimeExecutionTimes has null or undefined item(s)");t=t.add(i.queryEngineExecutionTime),r=r.add(i.systemFunctionExecutionTime),n=n.add(i.userDefinedFunctionExecutionTime)}return new s(t,r,n)}toDelimitedString(){return`${n.default.SystemFunctionExecuteTimeInMs}=${this.systemFunctionExecutionTime.totalMilliseconds()};`+`${n.default.UserDefinedFunctionExecutionTimeInMs}=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`}static createFromArray(e){if(null==e)throw new Error("runtimeExecutionTimesArray is null or undefined item(s)");return s.zero.add(...e)}static createFromDelimitedString(e){const t=i.QueryMetricsUtils.parseDelimitedString(e),r=i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.VMExecutionTimeInMs),a=i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.IndexLookupTimeInMs),c=i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.DocumentLoadTimeInMs),u=i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.DocumentWriteTimeInMs);let f=o.TimeSpan.zero;return f=(f=(f=(f=f.add(r)).subtract(a)).subtract(c)).subtract(u),new s(f,i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.SystemFunctionExecuteTimeInMs),i.QueryMetricsUtils.timeSpanFromMetrics(t,n.default.UserDefinedFunctionExecutionTimeInMs))}}s.zero=new s(o.TimeSpan.zero,o.TimeSpan.zero,o.TimeSpan.zero),t.RuntimeExecutionTimes=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(42);var s;!function(e){e.start="start",e.inProgress="inProgress",e.ended="ended"}(s||(s={}));class a{constructor(e,t,r,n){this.clientContext=e,this.query=t,this.resources=[],this.currentIndex=0,this.currentPartitionIndex=0,this.fetchFunctions=Array.isArray(n)?n:[n],this.options=r||{},this.continuation=this.options.continuation||null,this.state=a.STATES.start}nextItem(){return n(this,void 0,void 0,function*(){const e=yield this.current();return++this.currentIndex,e})}current(){return n(this,void 0,void 0,function*(){if(this.currentIndex<this.resources.length)return{result:this.resources[this.currentIndex],headers:void 0};if(this._canFetchMore()){const{result:e,headers:t}=yield this.fetchMore();return this.resources=e,0===this.resources.length?!this.continuation&&this.currentPartitionIndex>=this.fetchFunctions.length?(this.state=a.STATES.ended,{result:void 0,headers:t}):this.current():{result:this.resources[this.currentIndex],headers:t}}return this.state=a.STATES.ended,{result:void 0,headers:void 0}})}hasMoreResults(){return this.state===a.STATES.start||void 0!==this.continuation||this.currentIndex<this.resources.length||this.currentPartitionIndex<this.fetchFunctions.length}fetchMore(){return n(this,void 0,void 0,function*(){if(this.currentPartitionIndex>=this.fetchFunctions.length)return{headers:void 0,result:void 0};const e=this.options.continuation;if(this.options.continuation=this.continuation,this.currentPartitionIndex>=this.fetchFunctions.length)return{headers:void 0,result:void 0};const t=this.fetchFunctions[this.currentPartitionIndex];let r,n;try{const e=yield t(this.options);r=e.result,n=e.headers}catch(e){throw this.state=a.STATES.ended,e}if(this.continuation=n[i.Constants.HttpHeaders.Continuation],this.continuation||++this.currentPartitionIndex,this.state=a.STATES.inProgress,this.currentIndex=0,this.options.continuation=e,i.Constants.HttpHeaders.QueryMetrics in n){const e=n[i.Constants.HttpHeaders.QueryMetrics];let t=o.QueryMetrics.createFromDelimitedString(e);i.Constants.HttpHeaders.RequestCharge in n&&(t=new o.QueryMetrics(t.retrievedDocumentCount,t.retrievedDocumentSize,t.outputDocumentCount,t.outputDocumentSize,t.indexHitDocumentCount,t.totalQueryExecutionTime,t.queryPreparationTimes,t.indexLookupTime,t.documentLoadTime,t.vmExecutionTime,t.runtimeExecutionTimes,t.documentWriteTime,new o.ClientSideMetrics(n[i.Constants.HttpHeaders.RequestCharge]))),n[i.Constants.HttpHeaders.QueryMetrics]={},n[i.Constants.HttpHeaders.QueryMetrics][0]=t}return{result:r,headers:n}})}_canFetchMore(){return this.state===a.STATES.start||this.continuation&&this.state===a.STATES.inProgress||this.currentPartitionIndex<this.fetchFunctions.length&&this.state===a.STATES.inProgress}}a.STATES=s,t.DefaultQueryExecutionContext=a},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(168)),n(r(169)),n(r(170)),n(r(172)),n(r(173))},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(174)),n(r(175)),n(r(176))},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Done=0]="Done",e[e.Exception=1]="Exception",e[e.Result=2]="Result"}(n=t.FetchResultType||(t.FetchResultType={}));t.FetchResult=class{constructor(e,t){e?(this.feedResponse=e,this.fetchResultType=n.Result):(this.error=t,this.fetchResultType=n.Exception)}}},function(e,t,r){"use strict";function n(e,t,r,n,i){var o=["function ",e,"(a,l,h,",n.join(","),"){",i?"":"var i=",r?"l-1":"h+1",";while(l<=h){var m=(l+h)>>>1,x=a[m]"];return i?t.indexOf("c")<0?o.push(";if(x===y){return m}else if(x<=y){"):o.push(";var p=c(x,y);if(p===0){return m}else if(p<=0){"):o.push(";if(",t,"){i=m;"),r?o.push("l=m+1}else{h=m-1}"):o.push("h=m-1}else{l=m+1}"),o.push("}"),i?o.push("return -1};"):o.push("return i};"),o.join("")}function i(e,t,r,i){return new Function([n("A","x"+e+"y",t,["y"],i),n("P","c(x,y)"+e+"0",t,["y","c"],i),"function dispatchBsearch",r,"(a,y,c,l,h){if(typeof(c)==='function'){return P(a,(l===void 0)?0:l|0,(h===void 0)?a.length-1:h|0,y,c)}else{return A(a,(c===void 0)?0:c|0,(l===void 0)?a.length-1:l|0,y)}}return dispatchBsearch",r].join(""))()}e.exports={ge:i(">=",!1,"GE"),gt:i(">",!1,"GT"),lt:i("<",!0,"LT"),le:i("<=",!0,"LE"),eq:i("-",!0,"EQ",!0)}},function(e,t,r){(function(t){!function(r){"use strict";e.exports=function(e){var r={capacity:e||1,current:0,queue:[],firstHere:!1,take:function(){if(!1===r.firstHere){r.current++,r.firstHere=!0;var e=1}else e=0;var t={n:1};"function"==typeof arguments[0]?t.task=arguments[0]:t.n=arguments[0],arguments.length>=2&&("function"==typeof arguments[1]?t.task=arguments[1]:t.n=arguments[1]);var n=t.task;if(t.task=function(){n(r.leave)},r.current+t.n-e>r.capacity)return 1===e&&(r.current--,r.firstHere=!1),r.queue.push(t);r.current+=t.n-e,t.task(r.leave),1===e&&(r.firstHere=!1)},leave:function(e){if(e=e||1,r.current-=e,r.queue.length){var n=r.queue[0];n.n+r.current>r.capacity||(r.queue.shift(),r.current+=n.n,void 0!==t&&t&&"function"==typeof t.nextTick?t.nextTick(n.task):setTimeout(n.task,0))}else if(r.current<0)throw new Error("leave called too many times.")}};return r}}()}).call(this,r(6))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class i{constructor(e,t,r,n){this.min=e,this.max=t,this.isMinInclusive=r,this.isMaxInclusive=n}overlaps(e){const t=this,r=e;return void 0!==t&&void 0!==r&&(!t.isEmpty()&&!r.isEmpty()&&((t.min<=r.max||r.min<=t.max)&&!(!(t.min!==r.max||t.isMinInclusive&&r.isMaxInclusive)||!(r.min!==t.max||r.isMinInclusive&&t.isMaxInclusive))))}isEmpty(){return!(this.isMinInclusive&&this.isMaxInclusive)&&this.min===this.max}static parsePartitionKeyRange(e){return new i(e[n.Constants.PartitionKeyRange.MinInclusive],e[n.Constants.PartitionKeyRange.MaxExclusive],!0,!1)}static parseFromDict(e){return new i(e.min,e.max,e.isMinInclusive,e.isMaxInclusive)}}t.QueryRange=i},function(e,t,r){(function(e){t.fetch=a(e.fetch)&&a(e.ReadableStream),t.writableStream=a(e.WritableStream),t.abortController=a(e.AbortController),t.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),t.blobConstructor=!0}catch(e){}var r;function n(){if(void 0!==r)return r;if(e.XMLHttpRequest){r=new e.XMLHttpRequest;try{r.open("GET",e.XDomainRequest?"/":"https://example.com")}catch(e){r=null}}else r=null;return r}function i(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}var o=void 0!==e.ArrayBuffer,s=o&&a(e.ArrayBuffer.prototype.slice);function a(e){return"function"==typeof e}t.arraybuffer=t.fetch||o&&i("arraybuffer"),t.msstream=!t.fetch&&s&&i("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&o&&i("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!n()&&a(n().overrideMimeType),t.vbArray=a(e.VBArray),r=null}).call(this,r(5))},function(e,t,r){(function(e,n,i){var o=r(70),s=r(0),a=r(72),c=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},u=t.IncomingMessage=function(t,r,s,c){var u=this;if(a.Readable.call(u),u._mode=s,u.headers={},u.rawHeaders=[],u.trailers={},u.rawTrailers=[],u.on("end",function(){e.nextTick(function(){u.emit("close")})}),"fetch"===s){if(u._fetchResponse=r,u.url=r.url,u.statusCode=r.status,u.statusMessage=r.statusText,r.headers.forEach(function(e,t){u.headers[t.toLowerCase()]=e,u.rawHeaders.push(t,e)}),o.writableStream){var f=new WritableStream({write:function(e){return new Promise(function(t,r){u._destroyed?r():u.push(new n(e))?t():u._resumeFetch=t})},close:function(){i.clearTimeout(c),u._destroyed||u.push(null)},abort:function(e){u._destroyed||u.emit("error",e)}});try{return void r.body.pipeTo(f).catch(function(e){i.clearTimeout(c),u._destroyed||u.emit("error",e)})}catch(e){}}var h=r.body.getReader();!function e(){h.read().then(function(t){if(!u._destroyed){if(t.done)return i.clearTimeout(c),void u.push(null);u.push(new n(t.value)),e()}}).catch(function(e){i.clearTimeout(c),u._destroyed||u.emit("error",e)})}()}else{if(u._xhr=t,u._pos=0,u.url=t.responseURL,u.statusCode=t.status,u.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach(function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===u.headers[r]&&(u.headers[r]=[]),u.headers[r].push(t[2])):void 0!==u.headers[r]?u.headers[r]+=", "+t[2]:u.headers[r]=t[2],u.rawHeaders.push(t[1],t[2])}}),u._charset="x-user-defined",!o.overrideMimeType){var d=u.rawHeaders["mime-type"];if(d){var l=d.match(/;\s*charset=([^;])(;|$)/);l&&(u._charset=l[1].toLowerCase())}u._charset||(u._charset="utf-8")}}};s(u,a.Readable),u.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},u.prototype._onXHRProgress=function(){var e=this,t=e._xhr,r=null;switch(e._mode){case"text:vbarray":if(t.readyState!==c.DONE)break;try{r=new i.VBArray(t.responseBody).toArray()}catch(e){}if(null!==r){e.push(new n(r));break}case"text":try{r=t.responseText}catch(t){e._mode="text:vbarray";break}if(r.length>e._pos){var o=r.substr(e._pos);if("x-user-defined"===e._charset){for(var s=new n(o.length),a=0;a<o.length;a++)s[a]=255&o.charCodeAt(a);e.push(s)}else e.push(o,e._charset);e._pos=r.length}break;case"arraybuffer":if(t.readyState!==c.DONE||!t.response)break;r=t.response,e.push(new n(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=t.response,t.readyState!==c.LOADING||!r)break;e.push(new n(new Uint8Array(r)));break;case"ms-stream":if(r=t.response,t.readyState!==c.LOADING)break;var u=new i.MSStreamReader;u.onprogress=function(){u.result.byteLength>e._pos&&(e.push(new n(new Uint8Array(u.result.slice(e._pos)))),e._pos=u.result.byteLength)},u.onload=function(){e.push(null)},u.readAsArrayBuffer(r)}e._xhr.readyState===c.DONE&&"ms-stream"!==e._mode&&e.push(null)}}).call(this,r(6),r(2).Buffer,r(5))},function(e,t,r){(t=e.exports=r(73)).Stream=t,t.Readable=t,t.Writable=r(76),t.Duplex=r(20),t.Transform=r(79),t.PassThrough=r(196)},function(e,t,r){"use strict";(function(t,n){var i=r(14);e.exports=v;var o,s=r(41);v.ReadableState=g;r(19).EventEmitter;var a=function(e,t){return e.listeners(t).length},c=r(74),u=r(3).Buffer,f=t.Uint8Array||function(){};var h=r(10);h.inherits=r(0);var d=r(192),l=void 0;l=d&&d.debuglog?d.debuglog("stream"):function(){};var p,b=r(193),y=r(75);h.inherits(v,c);var m=["error","close","destroy","pause","resume"];function g(e,t){o=o||r(20),e=e||{};var n=t instanceof o;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,s=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(26).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(o=o||r(20),!(this instanceof v))return new v(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),c.call(this)}function w(e,t,r,n,i){var o,s=e._readableState;null===t?(s.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,M(e)}(e,s)):(i||(o=function(e,t){var r;(function(e){return u.isBuffer(e)||e instanceof f})(t)||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));return r}(s,t)),o?e.emit("error",o):s.objectMode||t&&t.length>0?("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),n?s.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):_(e,s,t,!0):s.ended?e.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?_(e,s,t,!1):C(e,s)):_(e,s,t,!1))):n||(s.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(s)}function _(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&M(e)),C(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=u.from(e,t),t=""),r=!0),w(this,e,t,!1,r)},v.prototype.unshift=function(e){return w(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=r(26).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var S=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=S?e=S:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(E,e):E(e))}function E(e){l("emit readable"),e.emit("readable"),I(e)}function C(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(P,e,t))}function P(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function k(e){l("readable nexttick read 0"),e.read(0)}function A(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),I(e),t.flowing&&!t.reading&&e.read(0)}function I(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function R(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var o=r.data,s=e>o.length?o.length:e;if(s===o.length?i+=o:i+=o.slice(0,e),0===(e-=s)){s===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(s));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=u.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var o=n.data,s=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,s),0===(e-=s)){s===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(s));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function T(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(O,t,e))}function O(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function B(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}v.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?T(this):M(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&T(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(r,t))),null===(n=e>0?R(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&T(this)),null!==n&&this.emit("data",n),n},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,l("pipe count=%d opts=%j",o.pipesCount,t);var c=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?f:v;function u(t,n){l("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",m),e.removeListener("finish",g),e.removeListener("drain",h),e.removeListener("error",y),e.removeListener("unpipe",u),r.removeListener("end",f),r.removeListener("end",v),r.removeListener("data",b),d=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function f(){l("onend"),e.end()}o.endEmitted?i.nextTick(c):r.once("end",c),e.on("unpipe",u);var h=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,I(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==B(o.pipes,e))&&!d&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),v(),e.removeListener("error",y),0===a(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",g),v()}function g(){l("onfinish"),e.removeListener("close",m),v()}function v(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?s(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",m),e.once("finish",g),e.emit("pipe",r),o.flowing||(l("pipe resume"),r.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var s=B(t.pipes,e);return-1===s?this:(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},v.prototype.on=function(e,t){var r=c.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&M(this):i.nextTick(k,this))}return r},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(A,e,t))}(this,e)),this},v.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),!r.objectMode||null!==i&&void 0!==i)&&((r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause())))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=R}).call(this,r(5),r(6))},function(e,t,r){e.exports=r(19).EventEmitter},function(e,t,r){"use strict";var n=r(14);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";(function(t,n,i){var o=r(14);function s(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var a,c=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;g.WritableState=m;var u=r(10);u.inherits=r(0);var f={deprecate:r(78)},h=r(74),d=r(3).Buffer,l=i.Uint8Array||function(){};var p,b=r(75);function y(){}function m(e,t){a=a||r(20),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,u=e.writableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(u||0===u)?u:f,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(o.nextTick(i,n),o.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),M(e,t))}(e,r,n,t,i);else{var s=S(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||_(e,r),n?c(w,e,r,s,i):w(e,r,s,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function g(e){if(a=a||r(20),!(p.call(g,this)||this instanceof a))return new g(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function v(e,t,r,n,i,o,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function w(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),M(e,t)}function _(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var a=0,c=!0;r;)i[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;i.allBuffers=c,v(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new s(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,f=r.encoding,h=r.callback;if(v(e,t,!1,t.objectMode?1:u.length,u,f,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),M(e,t)})}function M(e,t){var r=S(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}u.inherits(g,h),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:f.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===g&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,r){var n=this._writableState,i=!1,s=!n.objectMode&&function(e){return d.isBuffer(e)||e instanceof l}(e);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=y),n.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var i=!0,s=!1;return null===r?s=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(e.emit("error",s),o.nextTick(n,s),i=!1),i}(this,n,e,r))&&(n.pendingcb++,i=function(e,t,r,n,i,o){if(!r){var s=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var c=t.length<t.highWaterMark;c||(t.needDrain=!0);if(t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,a,n,i,o);return c}(this,n,s,e,t,r)),i},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||_(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,M(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=b.destroy,g.prototype._undestroy=b.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(6),r(77).setImmediate,r(5))},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},r(195),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(5))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(5))},function(e,t,r){"use strict";e.exports=o;var n=r(20),i=r(10);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:function(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){a(e,t,r)}):a(this,null,null)}function a(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(0),i.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(81);t.Database=n.Database;var i=r(213);t.Databases=i.Databases},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(82),s=r(93);t.Database=class{constructor(e,t,r){this.client=e,this.id=t,this.clientContext=r,this.containers=new o.Containers(this,this.clientContext),this.users=new s.Users(this,this.clientContext)}get url(){return i.UriFactory.createDatabaseUri(this.id)}container(e){return new o.Container(this,e,this.clientContext)}user(e){return new s.User(this,e,this.clientContext)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"dbs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,database:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"dbs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,database:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(83);t.Container=n.Container;var i=r(210);t.Containers=i.Containers},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(84),s=r(85),a=r(87),c=r(89),u=r(91);t.Container=class{constructor(e,t,r){this.database=e,this.id=t,this.clientContext=r,this.items=new s.Items(this,this.clientContext),this.storedProcedures=new a.StoredProcedures(this,this.clientContext),this.triggers=new c.Triggers(this,this.clientContext),this.userDefinedFunctions=new u.UserDefinedFunctions(this,this.clientContext)}get url(){return i.UriFactory.createDocumentCollectionUri(this.database.id,this.id)}item(e,t){return new s.Item(this,e,t,this.clientContext)}userDefinedFunction(e){return new u.UserDefinedFunction(this,e,this.clientContext)}conflict(e){return new o.Conflict(this,e,this.clientContext)}storedProcedure(e){return new a.StoredProcedure(this,e,this.clientContext)}trigger(e){return new c.Trigger(this,e,this.clientContext)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"colls",r,void 0,e);return this.clientContext.partitionKeyDefinitionCache[this.url]=n.result.partitionKey,{body:n.result,headers:n.headers,ref:this,container:this}})}replace(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"colls",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,container:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"colls",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,container:this}})}getPartitionKeyDefinition(){return n(this,void 0,void 0,function*(){if(this.url in this.clientContext.partitionKeyDefinitionCache)return{body:this.clientContext.partitionKeyDefinitionCache[this.url],ref:this};const{headers:e}=yield this.read();return{body:this.clientContext.partitionKeyDefinitionCache[this.url],headers:e,ref:this}})}extractPartitionKey(e,t){if(t&&t.paths&&t.paths.length>0){const r=[];return t.paths.forEach(t=>{const n=i.Helper.parsePath(t);let o=e;for(const e of n){if(!("object"==typeof o&&e in o)){o={};break}o=o[e]}r.push(o)}),r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(204);t.Conflict=n.Conflict;var i=r(205);t.Conflicts=i.Conflicts},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(86);t.Item=n.Item;var i=r(206);t.Items=i.Items},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.Item=class{constructor(e,t,r,n){this.container=e,this.id=t,this.primaryKey=r,this.clientContext=n}get url(){return i.UriFactory.createDocumentUri(this.container.database.id,this.container.id,this.id)}read(e){return n(this,void 0,void 0,function*(){(e=e||{})&&e.partitionKey||!this.primaryKey||(e.partitionKey=this.primaryKey);const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"docs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,item:this}})}replace(e,t){return n(this,void 0,void 0,function*(){if((t=t||{})&&t.partitionKey||!this.primaryKey||(t.partitionKey=this.primaryKey),void 0===t.partitionKey&&!0!==t.skipGetPartitionKeyDefinition){const{body:r}=yield this.container.getPartitionKeyDefinition();t.partitionKey=this.container.extractPartitionKey(e,r)}const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"docs",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,item:this}})}delete(e){return n(this,void 0,void 0,function*(){(e=e||{})&&e.partitionKey||!this.primaryKey||(e.partitionKey=this.primaryKey);const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"docs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,item:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(88);t.StoredProcedure=n.StoredProcedure;var i=r(207);t.StoredProcedures=i.StoredProcedures},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.StoredProcedure=class{constructor(e,t,r){this.container=e,this.id=t,this.clientContext=r}get url(){return i.UriFactory.createStoredProcedureUri(this.container.database.id,this.container.id,this.id)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"sprocs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,storedProcedure:this,sproc:this}})}replace(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"sprocs",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,storedProcedure:this,sproc:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"sprocs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,storedProcedure:this,sproc:this}})}execute(e,t){return n(this,void 0,void 0,function*(){const r=yield this.clientContext.execute(this.url,e,t);return{body:r.result,headers:r.headers,ref:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(90);t.Trigger=n.Trigger;var i=r(208);t.Triggers=i.Triggers},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.Trigger=class{constructor(e,t,r){this.container=e,this.id=t,this.clientContext=r,this.client=this.container.database.client}get url(){return i.UriFactory.createTriggerUri(this.container.database.id,this.container.id,this.id)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"triggers",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,trigger:this}})}replace(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"triggers",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,trigger:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"triggers",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,trigger:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(92);t.UserDefinedFunction=n.UserDefinedFunction;var i=r(209);t.UserDefinedFunctions=i.UserDefinedFunctions},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.UserDefinedFunction=class{constructor(e,t,r){this.container=e,this.id=t,this.clientContext=r,this.client=this.container.database.client}get url(){return i.UriFactory.createUserDefinedFunctionUri(this.container.database.id,this.container.id,this.id)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"udfs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,userDefinedFunction:this,udf:this}})}replace(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"udfs",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,userDefinedFunction:this,udf:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"udfs",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,userDefinedFunction:this,udf:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(94);t.User=n.User;var i=r(212);t.Users=i.Users},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(95);t.User=class{constructor(e,t,r){this.database=e,this.id=t,this.clientContext=r,this.client=this.database.client,this.permissions=new o.Permissions(this,this.clientContext)}get url(){return i.UriFactory.createUserUri(this.database.id,this.id)}permission(e){return new o.Permission(this,e,this.clientContext)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"users",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,user:this}})}replace(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"users",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,user:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"users",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,user:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(96);t.Permission=n.Permission;var i=r(211);t.Permissions=i.Permissions},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.Permission=class{constructor(e,t,r){this.user=e,this.id=t,this.clientContext=r}get url(){return i.UriFactory.createPermissionUri(this.user.database.id,this.user.id,this.id)}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"permissions",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,permission:this}})}replace(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.url),o=i.Helper.getIdFromLink(this.url),s=yield this.clientContext.replace(e,n,"permissions",o,void 0,t);return{body:s.result,headers:s.headers,ref:this,permission:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"permissions",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,permission:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(214);t.Offer=n.Offer;var i=r(215);t.Offers=i.Offers},function(e,t,r){"use strict";(function(e){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(18),o=r(1),s=r(17),a=r(219),c=(new Function("try {return this===window;}catch(e){ return false;}"),r(44));t.bodyFromData=function(t){return t.pipe?t:e.isBuffer(t)?t:"string"==typeof t?t:"object"==typeof t?function(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}(t):void 0},t.parse=function(e){return i.parse(e)},t.createRequestObject=function(e,t,r){return new Promise((n,i)=>{function a(){f.abort()}const u=0===t.path.indexOf("//media"),f=c.request(t,t=>{if(u&&e.MediaReadMode===s.MediaReadMode.Streamed)return n({result:t,headers:t.headers});let r="";u||t.setEncoding("utf8"),t.on("data",e=>{r+=e}),t.on("end",()=>{if(t.statusCode>=400)return i(function(e,t,r){const n={code:e.statusCode,body:t,headers:r};return o.Constants.HttpHeaders.ActivityId in e.headers&&(n.activityId=e.headers[o.Constants.HttpHeaders.ActivityId]),o.Constants.HttpHeaders.SubStatus in e.headers&&(n.substatus=parseInt(e.headers[o.Constants.HttpHeaders.SubStatus],10)),o.Constants.HttpHeaders.RetryAfterInMilliseconds in e.headers&&(n.retryAfterInMilliseconds=parseInt(e.headers[o.Constants.HttpHeaders.RetryAfterInMilliseconds],10)),n}(t,r,t.headers));let e;try{e=u?r:r.length>0?JSON.parse(r):void 0}catch(e){return i(e)}n({result:e,headers:t.headers})})});f.once("socket",t=>{u?t.setTimeout(e.MediaRequestTimeout):t.setTimeout(e.RequestTimeout),t.once("timeout",a),f.once("response",()=>{t.removeListener("timeout",a)})}),f.once("error",i),null!==r.stream?r.stream.pipe(f):null!==r.buffer?(f.write(r.buffer),f.end()):f.end()})},t.getHeaders=function(e,t,r,i,s,c,u,f){return n(this,void 0,void 0,function*(){const n=Object.assign({},t),h=u||{};if(h.continuation&&(n[o.Constants.HttpHeaders.Continuation]=h.continuation),h.preTriggerInclude&&(n[o.Constants.HttpHeaders.PreTriggerInclude]=h.preTriggerInclude.constructor===Array?h.preTriggerInclude.join(","):h.preTriggerInclude),h.postTriggerInclude&&(n[o.Constants.HttpHeaders.PostTriggerInclude]=h.postTriggerInclude.constructor===Array?h.postTriggerInclude.join(","):h.postTriggerInclude),h.offerType&&(n[o.Constants.HttpHeaders.OfferType]=h.offerType),h.offerThroughput&&(n[o.Constants.HttpHeaders.OfferThroughput]=h.offerThroughput),h.maxItemCount&&(n[o.Constants.HttpHeaders.PageSize]=h.maxItemCount),h.accessCondition&&("IfMatch"===h.accessCondition.type?n[o.Constants.HttpHeaders.IfMatch]=h.accessCondition.condition:n[o.Constants.HttpHeaders.IfNoneMatch]=h.accessCondition.condition),h.a_im&&(n[o.Constants.HttpHeaders.A_IM]=h.a_im),h.indexingDirective&&(n[o.Constants.HttpHeaders.IndexingDirective]=h.indexingDirective),h.consistencyLevel&&(n[o.Constants.HttpHeaders.ConsistencyLevel]=h.consistencyLevel),h.resourceTokenExpirySeconds&&(n[o.Constants.HttpHeaders.ResourceTokenExpiry]=h.resourceTokenExpirySeconds),h.sessionToken&&(n[o.Constants.HttpHeaders.SessionToken]=h.sessionToken),h.enableScanInQuery&&(n[o.Constants.HttpHeaders.EnableScanInQuery]=h.enableScanInQuery),h.enableCrossPartitionQuery&&(n[o.Constants.HttpHeaders.EnableCrossPartitionQuery]=h.enableCrossPartitionQuery),h.populateQuotaInfo&&(n[o.Constants.HttpHeaders.PopulateQuotaInfo]=h.populateQuotaInfo),h.populateQueryMetrics&&(n[o.Constants.HttpHeaders.PopulateQueryMetrics]=h.populateQueryMetrics),void 0!==h.maxDegreeOfParallelism&&(n[o.Constants.HttpHeaders.ParallelizeCrossPartitionQuery]=!0),h.populateQuotaInfo&&(n[o.Constants.HttpHeaders.PopulateQuotaInfo]=!0),e&&(void 0===e.partitionResolver||null===e.partitionResolver)&&void 0!==h.partitionKey){let e=h.partitionKey;null!==e&&Array.isArray(e)||(e=[e]),n[o.Constants.HttpHeaders.PartitionKey]=o.Helper.jsonStringifyAndEscapeNonASCII(e)}if((e.masterKey||e.tokenProvider)&&(n[o.Constants.HttpHeaders.XDate]=(new Date).toUTCString()),"post"!==r&&"put"!==r||n[o.Constants.HttpHeaders.ContentType]||(n[o.Constants.HttpHeaders.ContentType]=o.Constants.MediaTypes.Json),n[o.Constants.HttpHeaders.Accept]||(n[o.Constants.HttpHeaders.Accept]=o.Constants.MediaTypes.Json),void 0!==f&&(n[o.Constants.HttpHeaders.PartitionKeyRangeID]=f),h.enableScriptLogging&&(n[o.Constants.HttpHeaders.EnableScriptLogging]=h.enableScriptLogging),h.offerEnableRUPerMinuteThroughput&&(n[o.Constants.HttpHeaders.OfferIsRUPerMinuteThroughputEnabled]=!0),h.disableRUPerMinuteUsage&&(n[o.Constants.HttpHeaders.DisableRUPerMinuteUsage]=!0),e.masterKey||e.resourceTokens||e.tokenProvider||e.permissionFeed){const t=yield a.AuthHandler.getAuthorizationHeader(e,r,i,s,c,n);n[o.Constants.HttpHeaders.Authorization]=t}return n})}}).call(this,r(2).Buffer)},function(e,t,r){"use strict";var n=r(3).Buffer,i=r(47).Transform;function o(e){i.call(this),this._block=n.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(0)(o,i),o.prototype._transform=function(e,t,r){var n=null;try{this.update(e,t)}catch(e){n=e}r(n)},o.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},o.prototype.update=function(e,t){if(function(e,t){if(!n.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(e)||(e=n.from(e,t));for(var r=this._block,i=0;this._blockOffset+e.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)r[o++]=e[i++];this._update(),this._blockOffset=0}for(;i<e.length;)r[this._blockOffset++]=e[i++];for(var s=0,a=8*e.length;a>0;++s)this._length[s]+=a,(a=this._length[s]/4294967296|0)>0&&(this._length[s]-=4294967296*a);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return t},o.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=o},function(e,t,r){"use strict";(function(t,n){var i=r(14);e.exports=v;var o,s=r(41);v.ReadableState=g;r(19).EventEmitter;var a=function(e,t){return e.listeners(t).length},c=r(101),u=r(3).Buffer,f=t.Uint8Array||function(){};var h=r(10);h.inherits=r(0);var d=r(221),l=void 0;l=d&&d.debuglog?d.debuglog("stream"):function(){};var p,b=r(222),y=r(102);h.inherits(v,c);var m=["error","close","destroy","pause","resume"];function g(e,t){o=o||r(16),e=e||{};var n=t instanceof o;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,s=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(26).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(o=o||r(16),!(this instanceof v))return new v(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),c.call(this)}function w(e,t,r,n,i){var o,s=e._readableState;null===t?(s.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,M(e)}(e,s)):(i||(o=function(e,t){var r;(function(e){return u.isBuffer(e)||e instanceof f})(t)||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));return r}(s,t)),o?e.emit("error",o):s.objectMode||t&&t.length>0?("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),n?s.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):_(e,s,t,!0):s.ended?e.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?_(e,s,t,!1):C(e,s)):_(e,s,t,!1))):n||(s.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(s)}function _(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&M(e)),C(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=u.from(e,t),t=""),r=!0),w(this,e,t,!1,r)},v.prototype.unshift=function(e){return w(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=r(26).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var S=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=S?e=S:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(E,e):E(e))}function E(e){l("emit readable"),e.emit("readable"),I(e)}function C(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(P,e,t))}function P(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function k(e){l("readable nexttick read 0"),e.read(0)}function A(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),I(e),t.flowing&&!t.reading&&e.read(0)}function I(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function R(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var o=r.data,s=e>o.length?o.length:e;if(s===o.length?i+=o:i+=o.slice(0,e),0===(e-=s)){s===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(s));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=u.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var o=n.data,s=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,s),0===(e-=s)){s===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(s));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function T(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(O,t,e))}function O(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function B(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}v.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?T(this):M(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&T(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(r,t))),null===(n=e>0?R(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&T(this)),null!==n&&this.emit("data",n),n},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,l("pipe count=%d opts=%j",o.pipesCount,t);var c=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?f:v;function u(t,n){l("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",m),e.removeListener("finish",g),e.removeListener("drain",h),e.removeListener("error",y),e.removeListener("unpipe",u),r.removeListener("end",f),r.removeListener("end",v),r.removeListener("data",b),d=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function f(){l("onend"),e.end()}o.endEmitted?i.nextTick(c):r.once("end",c),e.on("unpipe",u);var h=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,I(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==B(o.pipes,e))&&!d&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),v(),e.removeListener("error",y),0===a(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",g),v()}function g(){l("onfinish"),e.removeListener("close",m),v()}function v(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?s(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",m),e.once("finish",g),e.emit("pipe",r),o.flowing||(l("pipe resume"),r.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var s=B(t.pipes,e);return-1===s?this:(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},v.prototype.on=function(e,t){var r=c.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&M(this):i.nextTick(k,this))}return r},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(A,e,t))}(this,e)),this},v.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),!r.objectMode||null!==i&&void 0!==i)&&((r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause())))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<m.length;o++)e.on(m[o],this.emit.bind(this,m[o]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},v._fromList=R}).call(this,r(5),r(6))},function(e,t,r){e.exports=r(19).EventEmitter},function(e,t,r){"use strict";var n=r(14);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";e.exports=o;var n=r(16),i=r(10);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:function(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){a(e,t,r)}):a(this,null,null)}function a(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(0),i.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})}},function(e,t,r){var n=r(0),i=r(22),o=r(3).Buffer,s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],a=new Array(64);function c(){this.init(),this._w=a,i.call(this,64,56)}function u(e,t,r){return r^e&(t^r)}function f(e,t,r){return e&t|r&(e|t)}function h(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function d(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function l(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}function p(e){return(e>>>17|e<<15)^(e>>>19|e<<13)^e>>>10}n(c,i),c.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},c.prototype._update=function(e){for(var t=this._w,r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,c=0|this._f,b=0|this._g,y=0|this._h,m=0;m<16;++m)t[m]=e.readInt32BE(4*m);for(;m<64;++m)t[m]=p(t[m-2])+t[m-7]+l(t[m-15])+t[m-16]|0;for(var g=0;g<64;++g){var v=y+d(a)+u(a,c,b)+s[g]+t[g]|0,w=h(r)+f(r,n,i)|0;y=b,b=c,c=a,a=o+v|0,o=i,i=n,n=r,r=v+w|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0,this._f=c+this._f|0,this._g=b+this._g|0,this._h=y+this._h|0},c.prototype._hash=function(){var e=o.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=c},function(e,t,r){var n=r(0),i=r(22),o=r(3).Buffer,s=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],a=new Array(160);function c(){this.init(),this._w=a,i.call(this,128,112)}function u(e,t,r){return r^e&(t^r)}function f(e,t,r){return e&t|r&(e|t)}function h(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function d(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function l(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function p(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function m(e,t){return e>>>0<t>>>0?1:0}n(c,i),c.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},c.prototype._update=function(e){for(var t=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,o=0|this._dh,a=0|this._eh,c=0|this._fh,g=0|this._gh,v=0|this._hh,w=0|this._al,_=0|this._bl,S=0|this._cl,x=0|this._dl,M=0|this._el,E=0|this._fl,C=0|this._gl,P=0|this._hl,k=0;k<32;k+=2)t[k]=e.readInt32BE(4*k),t[k+1]=e.readInt32BE(4*k+4);for(;k<160;k+=2){var A=t[k-30],I=t[k-30+1],R=l(A,I),T=p(I,A),O=b(A=t[k-4],I=t[k-4+1]),B=y(I,A),D=t[k-14],q=t[k-14+1],H=t[k-32],j=t[k-32+1],L=T+q|0,U=R+D+m(L,T)|0;U=(U=U+O+m(L=L+B|0,B)|0)+H+m(L=L+j|0,j)|0,t[k]=U,t[k+1]=L}for(var F=0;F<160;F+=2){U=t[F],L=t[F+1];var N=f(r,n,i),z=f(w,_,S),K=h(r,w),Q=h(w,r),W=d(a,M),V=d(M,a),Y=s[F],G=s[F+1],J=u(a,c,g),X=u(M,E,C),$=P+V|0,Z=v+W+m($,P)|0;Z=(Z=(Z=Z+J+m($=$+X|0,X)|0)+Y+m($=$+G|0,G)|0)+U+m($=$+L|0,L)|0;var ee=Q+z|0,te=K+N+m(ee,Q)|0;v=g,P=C,g=c,C=E,c=a,E=M,a=o+Z+m(M=x+$|0,x)|0,o=i,x=S,i=n,S=_,n=r,_=w,r=Z+te+m(w=$+ee|0,$)|0}this._al=this._al+w|0,this._bl=this._bl+_|0,this._cl=this._cl+S|0,this._dl=this._dl+x|0,this._el=this._el+M|0,this._fl=this._fl+E|0,this._gl=this._gl+C|0,this._hl=this._hl+P|0,this._ah=this._ah+r+m(this._al,w)|0,this._bh=this._bh+n+m(this._bl,_)|0,this._ch=this._ch+i+m(this._cl,S)|0,this._dh=this._dh+o+m(this._dl,x)|0,this._eh=this._eh+a+m(this._el,M)|0,this._fh=this._fh+c+m(this._fl,E)|0,this._gh=this._gh+g+m(this._gl,C)|0,this._hh=this._hh+v+m(this._hl,P)|0},c.prototype._hash=function(){var e=o.allocUnsafe(64);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=c},function(e,t,r){"use strict";var n=r(0),i=r(233),o=r(15),s=r(3).Buffer,a=r(107),c=r(50),u=r(51),f=s.alloc(128);function h(e,t){o.call(this,"digest"),"string"==typeof t&&(t=s.from(t));var r="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>r)?t=("rmd160"===e?new c:u(e)).update(t).digest():t.length<r&&(t=s.concat([t,f],r));for(var n=this._ipad=s.allocUnsafe(r),i=this._opad=s.allocUnsafe(r),a=0;a<r;a++)n[a]=54^t[a],i[a]=92^t[a];this._hash="rmd160"===e?new c:u(e),this._hash.update(n)}n(h,o),h.prototype._update=function(e){this._hash.update(e)},h.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new c:u(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new h("rmd160",t):"md5"===e?new i(a,t):new h(e,t)}},function(e,t,r){var n=r(46);e.exports=function(e){return(new n).update(e).digest()}},function(e){e.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},function(e,t,r){t.pbkdf2=r(235),t.pbkdf2Sync=r(112)},function(e,t,r){(function(t){var r=Math.pow(2,30)-1;function n(e,r){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(r+" must be a buffer or string")}e.exports=function(e,t,i,o){if(n(e,"Password"),n(t,"Salt"),"number"!=typeof i)throw new TypeError("Iterations not a number");if(i<0)throw new TypeError("Bad iterations");if("number"!=typeof o)throw new TypeError("Key length not a number");if(o<0||o>r||o!=o)throw new TypeError("Bad key length")}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var r;t.browser?r="utf-8":r=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=r}).call(this,r(6))},function(e,t,r){var n=r(107),i=r(50),o=r(51),s=r(110),a=r(111),c=r(3).Buffer,u=c.alloc(128),f={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function h(e,t,r){var s=function(e){return"rmd160"===e||"ripemd160"===e?i:"md5"===e?n:function(t){return o(e).update(t).digest()}}(e),a="sha512"===e||"sha384"===e?128:64;t.length>a?t=s(t):t.length<a&&(t=c.concat([t,u],a));for(var h=c.allocUnsafe(a+f[e]),d=c.allocUnsafe(a+f[e]),l=0;l<a;l++)h[l]=54^t[l],d[l]=92^t[l];var p=c.allocUnsafe(a+r+4);h.copy(p,0,0,a),this.ipad1=p,this.ipad2=h,this.opad=d,this.alg=e,this.blocksize=a,this.hash=s,this.size=f[e]}h.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,r,n,i){s(e,t,r,n),c.isBuffer(e)||(e=c.from(e,a)),c.isBuffer(t)||(t=c.from(t,a));var o=new h(i=i||"sha1",e,t.length),u=c.allocUnsafe(n),d=c.allocUnsafe(t.length+4);t.copy(d,0,0,t.length);for(var l=0,p=f[i],b=Math.ceil(n/p),y=1;y<=b;y++){d.writeUInt32BE(y,t.length);for(var m=o.run(d,o.ipad1),g=m,v=1;v<r;v++){g=o.run(g,o.ipad2);for(var w=0;w<p;w++)m[w]^=g[w]}m.copy(u,l),l+=p}return u}},function(e,t,r){var n=r(28),i=r(3).Buffer,o=r(114);function s(e){var t=e._cipher.encryptBlockRaw(e._prev);return o(e._prev),t}t.encrypt=function(e,t){var r=Math.ceil(t.length/16),o=e._cache.length;e._cache=i.concat([e._cache,i.allocUnsafe(16*r)]);for(var a=0;a<r;a++){var c=s(e),u=o+16*a;e._cache.writeUInt32BE(c[0],u+0),e._cache.writeUInt32BE(c[1],u+4),e._cache.writeUInt32BE(c[2],u+8),e._cache.writeUInt32BE(c[3],u+12)}var f=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),n(t,f)}},function(e,t){e.exports=function(e){for(var t,r=e.length;r--;){if(255!==(t=e.readUInt8(r))){t++,e.writeUInt8(t,r);break}e.writeUInt8(0,r)}}},function(e){e.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(e,t,r){var n=r(36),i=r(3).Buffer,o=r(15),s=r(0),a=r(251),c=r(28),u=r(114);function f(e,t,r,s){o.call(this);var c=i.alloc(4,0);this._cipher=new n.AES(t);var f=this._cipher.encryptBlock(c);this._ghash=new a(f),r=function(e,t,r){if(12===t.length)return e._finID=i.concat([t,i.from([0,0,0,1])]),i.concat([t,i.from([0,0,0,2])]);var n=new a(r),o=t.length,s=o%16;n.update(t),s&&(s=16-s,n.update(i.alloc(s,0))),n.update(i.alloc(8,0));var c=8*o,f=i.alloc(8);f.writeUIntBE(c,0,8),n.update(f),e._finID=n.state;var h=i.from(e._finID);return u(h),h}(this,r,f),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=s,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}s(f,o),f.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=i.alloc(t,0),this._ghash.update(t))}this._called=!0;var r=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(r),this._len+=e.length,r},f.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=c(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var r=0;e.length!==t.length&&r++;for(var n=Math.min(e.length,t.length),i=0;i<n;++i)r+=e[i]^t[i];return r}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},f.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},f.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},f.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=f},function(e,t,r){var n=r(36),i=r(3).Buffer,o=r(15);function s(e,t,r,s){o.call(this),this._cipher=new n.AES(t),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=s,this._mode=e}r(0)(s,o),s.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},s.prototype._final=function(){this._cipher.scrub()},e.exports=s},function(e,t,r){var n=r(21);e.exports=g,g.simpleSieve=y,g.fermatTest=m;var i=r(4),o=new i(24),s=new(r(119)),a=new i(1),c=new i(2),u=new i(5),f=(new i(16),new i(8),new i(10)),h=new i(3),d=(new i(7),new i(11)),l=new i(4),p=(new i(12),null);function b(){if(null!==p)return p;var e=[];e[0]=2;for(var t=1,r=3;r<1048576;r+=2){for(var n=Math.ceil(Math.sqrt(r)),i=0;i<t&&e[i]<=n&&r%e[i]!=0;i++);t!==i&&e[i]<=n||(e[t++]=r)}return p=e,e}function y(e){for(var t=b(),r=0;r<t.length;r++)if(0===e.modn(t[r]))return 0===e.cmpn(t[r]);return!0}function m(e){var t=i.mont(e);return 0===c.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function g(e,t){if(e<16)return new i(2===t||5===t?[140,123]:[140,39]);var r,p;for(t=new i(t);;){for(r=new i(n(Math.ceil(e/8)));r.bitLength()>e;)r.ishrn(1);if(r.isEven()&&r.iadd(a),r.testn(1)||r.iadd(c),t.cmp(c)){if(!t.cmp(u))for(;r.mod(f).cmp(h);)r.iadd(l)}else for(;r.mod(o).cmp(d);)r.iadd(l);if(y(p=r.shrn(1))&&y(r)&&m(p)&&m(r)&&s.test(p)&&s.test(r))return r}}},function(e,t,r){var n=r(4),i=r(120);function o(e){this.rand=e||new i.Rand}e.exports=o,o.create=function(e){return new o(e)},o.prototype._randbelow=function(e){var t=e.bitLength(),r=Math.ceil(t/8);do{var i=new n(this.rand.generate(r))}while(i.cmp(e)>=0);return i},o.prototype._randrange=function(e,t){var r=t.sub(e);return e.add(this._randbelow(r))},o.prototype.test=function(e,t,r){var i=e.bitLength(),o=n.mont(e),s=new n(1).toRed(o);t||(t=Math.max(1,i/48|0));for(var a=e.subn(1),c=0;!a.testn(c);c++);for(var u=e.shrn(c),f=a.toRed(o);t>0;t--){var h=this._randrange(new n(2),a);r&&r(h);var d=h.toRed(o).redPow(u);if(0!==d.cmp(s)&&0!==d.cmp(f)){for(var l=1;l<c;l++){if(0===(d=d.redSqr()).cmp(s))return!1;if(0===d.cmp(f))break}if(l===c)return!1}}return!0},o.prototype.getDivisor=function(e,t){var r=e.bitLength(),i=n.mont(e),o=new n(1).toRed(i);t||(t=Math.max(1,r/48|0));for(var s=e.subn(1),a=0;!s.testn(a);a++);for(var c=e.shrn(a),u=s.toRed(i);t>0;t--){var f=this._randrange(new n(2),s),h=e.gcd(f);if(0!==h.cmpn(1))return h;var d=f.toRed(i).redPow(c);if(0!==d.cmp(o)&&0!==d.cmp(u)){for(var l=1;l<a;l++){if(0===(d=d.redSqr()).cmp(o))return d.fromRed().subn(1).gcd(e);if(0===d.cmp(u))break}if(l===a)return(d=d.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,r){var n;function i(e){this.rand=e}if(e.exports=function(e){return n||(n=new i(null)),n.generate(e)},e.exports.Rand=i,i.prototype.generate=function(e){return this._rand(e)},i.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=r(256);if("function"!=typeof o.randomBytes)throw new Error("Not supported");i.prototype._rand=function(e){return o.randomBytes(e)}}catch(e){}},function(e,t,r){"use strict";var n=t;function i(e){return 1===e.length?"0"+e:e}function o(e){for(var t="",r=0;r<e.length;r++)t+=i(e[r].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16));else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},n.zero2=i,n.toHex=o,n.encode=function(e,t){return"hex"===t?o(e):e}},function(e,t,r){"use strict";var n=r(11).rotr32;function i(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function s(e,t,r){return e^t^r}t.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?s(t,r,n):2===e?o(t,r,n):void 0},t.ch32=i,t.maj32=o,t.p32=s,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},function(e,t,r){"use strict";var n=r(11),i=r(29),o=r(122),s=r(8),a=n.sum32,c=n.sum32_4,u=n.sum32_5,f=o.ch32,h=o.maj32,d=o.s0_256,l=o.s1_256,p=o.g0_256,b=o.g1_256,y=i.BlockHash,m=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=m,this.W=new Array(64)}n.inherits(g,y),e.exports=g,g.blockSize=512,g.outSize=256,g.hmacStrength=192,g.padLength=64,g.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=c(b(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],y=this.h[2],m=this.h[3],g=this.h[4],v=this.h[5],w=this.h[6],_=this.h[7];for(s(this.k.length===r.length),n=0;n<r.length;n++){var S=u(_,l(g),f(g,v,w),this.k[n],r[n]),x=a(d(i),h(i,o,y));_=w,w=v,v=g,g=a(m,S),m=y,y=o,o=i,i=a(S,x)}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],y),this.h[3]=a(this.h[3],m),this.h[4]=a(this.h[4],g),this.h[5]=a(this.h[5],v),this.h[6]=a(this.h[6],w),this.h[7]=a(this.h[7],_)},g.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(11),i=r(29),o=r(8),s=n.rotr64_hi,a=n.rotr64_lo,c=n.shr64_hi,u=n.shr64_lo,f=n.sum64,h=n.sum64_hi,d=n.sum64_lo,l=n.sum64_4_hi,p=n.sum64_4_lo,b=n.sum64_5_hi,y=n.sum64_5_lo,m=i.BlockHash,g=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function v(){if(!(this instanceof v))return new v;m.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=g,this.W=new Array(160)}function w(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function _(e,t,r,n,i,o){var s=t&n^~t&o;return s<0&&(s+=4294967296),s}function S(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function x(e,t,r,n,i,o){var s=t&n^t&o^n&o;return s<0&&(s+=4294967296),s}function M(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function E(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function C(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function P(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function k(e,t){var r=s(e,t,1)^s(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function A(e,t){var r=a(e,t,1)^a(e,t,8)^u(e,t,7);return r<0&&(r+=4294967296),r}function I(e,t){var r=s(e,t,19)^s(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}function R(e,t){var r=a(e,t,19)^a(t,e,29)^u(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(v,m),e.exports=v,v.blockSize=1024,v.outSize=512,v.hmacStrength=192,v.padLength=128,v.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=I(r[n-4],r[n-3]),o=R(r[n-4],r[n-3]),s=r[n-14],a=r[n-13],c=k(r[n-30],r[n-29]),u=A(r[n-30],r[n-29]),f=r[n-32],h=r[n-31];r[n]=l(i,o,s,a,c,u,f,h),r[n+1]=p(i,o,s,a,c,u,f,h)}},v.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],i=this.h[1],s=this.h[2],a=this.h[3],c=this.h[4],u=this.h[5],l=this.h[6],p=this.h[7],m=this.h[8],g=this.h[9],v=this.h[10],k=this.h[11],A=this.h[12],I=this.h[13],R=this.h[14],T=this.h[15];o(this.k.length===r.length);for(var O=0;O<r.length;O+=2){var B=R,D=T,q=C(m,g),H=P(m,g),j=w(m,g,v,k,A),L=_(m,g,v,k,A,I),U=this.k[O],F=this.k[O+1],N=r[O],z=r[O+1],K=b(B,D,q,H,j,L,U,F,N,z),Q=y(B,D,q,H,j,L,U,F,N,z);B=M(n,i),D=E(n,i),q=S(n,i,s,a,c),H=x(n,i,s,a,c,u);var W=h(B,D,q,H),V=d(B,D,q,H);R=A,T=I,A=v,I=k,v=m,k=g,m=h(l,p,K,Q),g=d(p,p,K,Q),l=c,p=u,c=s,u=a,s=n,a=i,n=h(K,Q,W,V),i=d(K,Q,W,V)}f(this.h,0,n,i),f(this.h,2,s,a),f(this.h,4,c,u),f(this.h,6,l,p),f(this.h,8,m,g),f(this.h,10,v,k),f(this.h,12,A,I),f(this.h,14,R,T)},v.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){var n=r(0),i=r(31).Reporter,o=r(2).Buffer;function s(e,t){i.call(this,t),o.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function a(e,t){if(Array.isArray(e))this.length=0,this.value=e.map(function(e){return e instanceof a||(e=new a(e,t)),this.length+=e.length,e},this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=o.byteLength(e);else{if(!o.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}n(s,i),t.DecoderBuffer=s,s.prototype.save=function(){return{offset:this.offset,reporter:i.prototype.save.call(this)}},s.prototype.restore=function(e){var t=new s(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,i.prototype.restore.call(this,e.reporter),t},s.prototype.isEmpty=function(){return this.offset===this.length},s.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},s.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new s(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},s.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=a,a.prototype.join=function(e,t){return e||(e=new o(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach(function(r){r.join(e,t),t+=r.length}):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):o.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)}},function(e,t,r){var n=t;n._reverse=function(e){var t={};return Object.keys(e).forEach(function(r){(0|r)==r&&(r|=0);var n=e[r];t[n]=r}),t},n.der=r(288)},function(e,t,r){var n=r(0),i=r(30),o=i.base,s=i.bignum,a=i.constants.der;function c(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new u,this.tree._init(e.body)}function u(e){o.Node.call(this,"der",e)}function f(e,t){var r=e.readUInt8(t);if(e.isError(r))return r;var n=a.tagClass[r>>6],i=0==(32&r);if(31==(31&r)){var o=r;for(r=0;128==(128&o);){if(o=e.readUInt8(t),e.isError(o))return o;r<<=7,r|=127&o}}else r&=31;return{cls:n,primitive:i,tag:r,tagStr:a.tag[r]}}function h(e,t,r){var n=e.readUInt8(r);if(e.isError(n))return n;if(!t&&128===n)return null;if(0==(128&n))return n;var i=127&n;if(i>4)return e.error("length octect is too long");n=0;for(var o=0;o<i;o++){n<<=8;var s=e.readUInt8(r);if(e.isError(s))return s;n|=s}return n}e.exports=c,c.prototype.decode=function(e,t){return e instanceof o.DecoderBuffer||(e=new o.DecoderBuffer(e,t)),this.tree._decode(e,t)},n(u,o.Node),u.prototype._peekTag=function(e,t,r){if(e.isEmpty())return!1;var n=e.save(),i=f(e,'Failed to peek tag: "'+t+'"');return e.isError(i)?i:(e.restore(n),i.tag===t||i.tagStr===t||i.tagStr+"of"===t||r)},u.prototype._decodeTag=function(e,t,r){var n=f(e,'Failed to decode tag of "'+t+'"');if(e.isError(n))return n;var i=h(e,n.primitive,'Failed to get length of "'+t+'"');if(e.isError(i))return i;if(!r&&n.tag!==t&&n.tagStr!==t&&n.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(n.primitive||null!==i)return e.skip(i,'Failed to match body of: "'+t+'"');var o=e.save(),s=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(s)?s:(i=e.offset-o.offset,e.restore(o),e.skip(i,'Failed to match body of: "'+t+'"'))},u.prototype._skipUntilEnd=function(e,t){for(;;){var r=f(e,t);if(e.isError(r))return r;var n,i=h(e,r.primitive,t);if(e.isError(i))return i;if(n=r.primitive||null!==i?e.skip(i):this._skipUntilEnd(e,t),e.isError(n))return n;if("end"===r.tagStr)break}},u.prototype._decodeList=function(e,t,r,n){for(var i=[];!e.isEmpty();){var o=this._peekTag(e,"end");if(e.isError(o))return o;var s=r.decode(e,"der",n);if(e.isError(s)&&o)break;i.push(s)}return i},u.prototype._decodeStr=function(e,t){if("bitstr"===t){var r=e.readUInt8();return e.isError(r)?r:{unused:r,data:e.raw()}}if("bmpstr"===t){var n=e.raw();if(n.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var i="",o=0;o<n.length/2;o++)i+=String.fromCharCode(n.readUInt16BE(2*o));return i}if("numstr"===t){var s=e.raw().toString("ascii");return this._isNumstr(s)?s:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var a=e.raw().toString("ascii");return this._isPrintstr(a)?a:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},u.prototype._decodeObjid=function(e,t,r){for(var n,i=[],o=0;!e.isEmpty();){var s=e.readUInt8();o<<=7,o|=127&s,0==(128&s)&&(i.push(o),o=0)}128&s&&i.push(o);var a=i[0]/40|0,c=i[0]%40;if(n=r?i:[a,c].concat(i.slice(1)),t){var u=t[n.join(" ")];void 0===u&&(u=t[n.join(".")]),void 0!==u&&(n=u)}return n},u.prototype._decodeTime=function(e,t){var r=e.raw().toString();if("gentime"===t)var n=0|r.slice(0,4),i=0|r.slice(4,6),o=0|r.slice(6,8),s=0|r.slice(8,10),a=0|r.slice(10,12),c=0|r.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");n=0|r.slice(0,2),i=0|r.slice(2,4),o=0|r.slice(4,6),s=0|r.slice(6,8),a=0|r.slice(8,10),c=0|r.slice(10,12);n=n<70?2e3+n:1900+n}return Date.UTC(n,i-1,o,s,a,c,0)},u.prototype._decodeNull=function(e){return null},u.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},u.prototype._decodeInt=function(e,t){var r=e.raw(),n=new s(r);return t&&(n=t[n.toString(10)]||n),n},u.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,r){var n=r(0),i=r(2).Buffer,o=r(30),s=o.base,a=o.constants.der;function c(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new u,this.tree._init(e.body)}function u(e){s.Node.call(this,"der",e)}function f(e){return e<10?"0"+e:e}e.exports=c,c.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},n(u,s.Node),u.prototype._encodeComposite=function(e,t,r,n){var o,s=function(e,t,r,n){var i;"seqof"===e?e="seq":"setof"===e&&(e="set");if(a.tagByName.hasOwnProperty(e))i=a.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);i=e}if(i>=31)return n.error("Multi-octet tag encoding unsupported");t||(i|=32);return i|=a.tagClassByName[r||"universal"]<<6}(e,t,r,this.reporter);if(n.length<128)return(o=new i(2))[0]=s,o[1]=n.length,this._createEncoderBuffer([o,n]);for(var c=1,u=n.length;u>=256;u>>=8)c++;(o=new i(2+c))[0]=s,o[1]=128|c;u=1+c;for(var f=n.length;f>0;u--,f>>=8)o[u]=255&f;return this._createEncoderBuffer([o,n])},u.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var r=new i(2*e.length),n=0;n<e.length;n++)r.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(r)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)?this._createEncoderBuffer(e):"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},u.prototype._encodeObjid=function(e,t,r){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!r){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var o=0;for(n=0;n<e.length;n++){var s=e[n];for(o++;s>=128;s>>=7)o++}var a=new i(o),c=a.length-1;for(n=e.length-1;n>=0;n--){s=e[n];for(a[c--]=127&s;(s>>=7)>0;)a[c--]=128|127&s}return this._createEncoderBuffer(a)},u.prototype._encodeTime=function(e,t){var r,n=new Date(e);return"gentime"===t?r=[f(n.getFullYear()),f(n.getUTCMonth()+1),f(n.getUTCDate()),f(n.getUTCHours()),f(n.getUTCMinutes()),f(n.getUTCSeconds()),"Z"].join(""):"utctime"===t?r=[f(n.getFullYear()%100),f(n.getUTCMonth()+1),f(n.getUTCDate()),f(n.getUTCHours()),f(n.getUTCMinutes()),f(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(r,"octstr")},u.prototype._encodeNull=function(){return this._createEncoderBuffer("")},u.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!i.isBuffer(e)){var r=e.toArray();!e.sign&&128&r[0]&&r.unshift(0),e=new i(r)}if(i.isBuffer(e)){var n=e.length;0===e.length&&n++;var o=new i(n);return e.copy(o),0===e.length&&(o[0]=0),this._createEncoderBuffer(o)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);n=1;for(var s=e;s>=256;s>>=8)n++;for(s=(o=new Array(n)).length-1;s>=0;s--)o[s]=255&e,e>>=8;return 128&o[0]&&o.unshift(0),this._createEncoderBuffer(new i(o))},u.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},u.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},u.prototype._skipDefault=function(e,t,r){var n,i=this._baseState;if(null===i.default)return!1;var o=e.join();if(void 0===i.defaultBuffer&&(i.defaultBuffer=this._encodeValue(i.default,t,r).join()),o.length!==i.defaultBuffer.length)return!1;for(n=0;n<o.length;n++)if(o[n]!==i.defaultBuffer[n])return!1;return!0}},function(e){e.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},function(e,t,r){(function(t){var n=r(27);function i(e){var r=new t(4);return r.writeUInt32BE(e,0),r}e.exports=function(e,r){for(var o,s=new t(""),a=0;s.length<r;)o=i(a++),s=t.concat([s,n("sha1").update(e).update(o).digest()]);return s.slice(0,r)}}).call(this,r(2).Buffer)},function(e,t){e.exports=function(e,t){for(var r=e.length,n=-1;++n<r;)e[n]^=t[n];return e}},function(e,t,r){(function(t){var n=r(4);e.exports=function(e,r){return new t(e.toRed(n.mont(r.modulus)).redPow(new n(r.publicExponent)).fromRed().toArray())}}).call(this,r(2).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Gateway=0]="Gateway"}(t.ConnectionMode||(t.ConnectionMode={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(17),i=r(33);class o{constructor(){this.ConnectionMode=n.ConnectionMode.Gateway,this.MediaReadMode=n.MediaReadMode.Buffered,this.MediaRequestTimeout=o.defaultMediaRequestTimeout,this.RequestTimeout=o.defaultRequestTimeout,this.EnableEndpointDiscovery=!0,this.PreferredLocations=[],this.RetryOptions=new i.RetryOptions,this.DisableSSLVerification=!1,this.ProxyUrl=""}}o.defaultRequestTimeout=6e4,o.defaultMediaRequestTimeout=3e5,t.ConnectionPolicy=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.RetryOptions=class{constructor(e=9,t=0,r=30){this.MaxRetryAttemptCount=e,this.FixedRetryIntervalInMilliseconds=t,this.MaxWaitTimeInSeconds=r}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){this.globalEndpointManager=e,this.maxRetryAttemptCount=i.maxRetryAttemptCount,this.currentRetryAttemptCount=0,this.retryAfterInMilliseconds=i.retryAfterInMilliseconds}shouldRetry(e){return n(this,void 0,void 0,function*(){return!!(e&&this.currentRetryAttemptCount<this.maxRetryAttemptCount&&this.globalEndpointManager.enableEndpointDiscovery)&&(this.currentRetryAttemptCount++,yield this.globalEndpointManager.refreshEndpointList(),!0)})}}i.maxRetryAttemptCount=120,i.retryAfterInMilliseconds=1e3,t.EndpointDiscoveryRetryPolicy=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.ResourceThrottleRetryPolicy=class{constructor(e,t,r){this.maxRetryAttemptCount=e,this.fixedRetryIntervalInMilliseconds=t,this.currentRetryAttemptCount=0,this.cummulativeWaitTimeinMilliseconds=0,this.retryAfterInMilliseconds=0,this.maxWaitTimeInMilliseconds=1e3*r,this.currentRetryAttemptCount=0,this.cummulativeWaitTimeinMilliseconds=0}shouldRetry(e){return n(this,void 0,void 0,function*(){return!!(e&&this.currentRetryAttemptCount<this.maxRetryAttemptCount&&(this.currentRetryAttemptCount++,this.retryAfterInMilliseconds=0,this.fixedRetryIntervalInMilliseconds?this.retryAfterInMilliseconds=this.fixedRetryIntervalInMilliseconds:e.retryAfterInMilliseconds&&(this.retryAfterInMilliseconds=e.retryAfterInMilliseconds),this.cummulativeWaitTimeinMilliseconds<this.maxWaitTimeInMilliseconds))&&(this.cummulativeWaitTimeinMilliseconds+=this.retryAfterInMilliseconds,!0)})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(18),o=r(1);class s{constructor(e,t){this.globalEndpointManager=e,this.request=t,this.currentRetryAttemptCount=0,this.retryAfterInMilliseconds=s.retryAfterInMilliseconds,this.maxRetryAttemptCount=s.maxRetryAttemptCount}shouldRetry(e){return n(this,void 0,void 0,function*(){if(e&&this.currentRetryAttemptCount<=this.maxRetryAttemptCount&&(this.request.operationType===o.Constants.OperationTypes.Read||this.request.operationType===o.Constants.OperationTypes.Query)){const e=yield this.globalEndpointManager.getReadEndpoint(),t=yield this.globalEndpointManager.getWriteEndpoint();if(e!==t&&null==this.request.endpointOverride){return this.currentRetryAttemptCount++,this.request.endpointOverride=t,[!0,i.parse(t)]}return this.request.client.clearSessionToken(this.request.path),!1}return!1})}}s.maxRetryAttemptCount=1,s.retryAfterInMilliseconds=0,t.SessionReadRetryPolicy=s},function(e,t,r){(function(e,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){"object"==typeof t&&t&&t.nodeType,"object"==typeof e&&e&&e.nodeType;var s="object"==typeof n&&n;s.global!==s&&s.window!==s&&s.self;var a,c=2147483647,u=36,f=1,h=26,d=38,l=700,p=72,b=128,y="-",m=/^xn--/,g=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,w={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},_=u-f,S=Math.floor,x=String.fromCharCode;function M(e){throw new RangeError(w[e])}function E(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function C(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+E((e=e.replace(v,".")).split("."),t).join(".")}function P(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function k(e){return E(e,function(e){var t="";return e>65535&&(t+=x((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=x(e)}).join("")}function A(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:u}function I(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function R(e,t,r){var n=0;for(e=r?S(e/l):e>>1,e+=S(e/t);e>_*h>>1;n+=u)e=S(e/_);return S(n+(_+1)*e/(e+d))}function T(e){var t,r,n,i,o,s,a,d,l,m,g=[],v=e.length,w=0,_=b,x=p;for((r=e.lastIndexOf(y))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&M("not-basic"),g.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<v;){for(o=w,s=1,a=u;i>=v&&M("invalid-input"),((d=A(e.charCodeAt(i++)))>=u||d>S((c-w)/s))&&M("overflow"),w+=d*s,!(d<(l=a<=x?f:a>=x+h?h:a-x));a+=u)s>S(c/(m=u-l))&&M("overflow"),s*=m;x=R(w-o,t=g.length+1,0==o),S(w/t)>c-_&&M("overflow"),_+=S(w/t),w%=t,g.splice(w++,0,_)}return k(g)}function O(e){var t,r,n,i,o,s,a,d,l,m,g,v,w,_,E,C=[];for(v=(e=P(e)).length,t=b,r=0,o=p,s=0;s<v;++s)(g=e[s])<128&&C.push(x(g));for(n=i=C.length,i&&C.push(y);n<v;){for(a=c,s=0;s<v;++s)(g=e[s])>=t&&g<a&&(a=g);for(a-t>S((c-r)/(w=n+1))&&M("overflow"),r+=(a-t)*w,t=a,s=0;s<v;++s)if((g=e[s])<t&&++r>c&&M("overflow"),g==t){for(d=r,l=u;!(d<(m=l<=o?f:l>=o+h?h:l-o));l+=u)E=d-m,_=u-m,C.push(x(I(m+E%_,0))),d=S(E/_);C.push(x(I(d,0))),o=R(r,w,n==i),r=0,++n}++r,++t}return C.join("")}a={version:"1.4.1",ucs2:{decode:P,encode:k},decode:T,encode:O,toASCII:function(e){return C(e,function(e){return g.test(e)?"xn--"+O(e):e})},toUnicode:function(e){return C(e,function(e){return m.test(e)?T(e.slice(4).toLowerCase()):e})}},void 0===(i=function(){return a}.call(t,r,t,e))||(e.exports=i)}()}).call(this,r(40)(e),r(5))},function(e,t,r){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,o){t=t||"&",r=r||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;o&&"number"==typeof o.maxKeys&&(c=o.maxKeys);var u=e.length;c>0&&u>c&&(u=c);for(var f=0;f<u;++f){var h,d,l,p,b=e[f].replace(a,"%20"),y=b.indexOf(r);y>=0?(h=b.substr(0,y),d=b.substr(y+1)):(h=b,d=""),l=decodeURIComponent(h),p=decodeURIComponent(d),n(s,l)?i(s[l])?s[l].push(p):s[l]=[s[l],p]:s[l]=p}return s};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,r){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,r,a){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?o(s(e),function(s){var a=encodeURIComponent(n(s))+r;return i(e[s])?o(e[s],function(e){return a+encodeURIComponent(n(e))}).join(t):a+encodeURIComponent(n(e[s]))}).join(t):a?encodeURIComponent(n(a))+r+encodeURIComponent(n(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function o(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var s=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Constants={MediaTypes:{Any:"*/*",ImageJpeg:"image/jpeg",ImagePng:"image/png",Javascript:"application/x-javascript",Json:"application/json",OctetStream:"application/octet-stream",QueryJson:"application/query+json",SQL:"application/sql",TextHtml:"text/html",TextPlain:"text/plain",Xml:"application/xml"},HttpMethods:{Get:"GET",Post:"POST",Put:"PUT",Delete:"DELETE",Head:"HEAD",Options:"OPTIONS"},HttpHeaders:{Authorization:"authorization",ETag:"etag",MethodOverride:"X-HTTP-Method",Slug:"Slug",ContentType:"Content-Type",LastModified:"Last-Modified",ContentEncoding:"Content-Encoding",CharacterSet:"CharacterSet",UserAgent:"User-Agent",IfModifiedSince:"If-Modified-Since",IfMatch:"If-Match",IfNoneMatch:"If-None-Match",ContentLength:"Content-Length",AcceptEncoding:"Accept-Encoding",KeepAlive:"Keep-Alive",CacheControl:"Cache-Control",TransferEncoding:"Transfer-Encoding",ContentLanguage:"Content-Language",ContentLocation:"Content-Location",ContentMd5:"Content-Md5",ContentRange:"Content-Range",Accept:"Accept",AcceptCharset:"Accept-Charset",AcceptLanguage:"Accept-Language",IfRange:"If-Range",IfUnmodifiedSince:"If-Unmodified-Since",MaxForwards:"Max-Forwards",ProxyAuthorization:"Proxy-Authorization",AcceptRanges:"Accept-Ranges",ProxyAuthenticate:"Proxy-Authenticate",RetryAfter:"Retry-After",SetCookie:"Set-Cookie",WwwAuthenticate:"Www-Authenticate",Origin:"Origin",Host:"Host",AccessControlAllowOrigin:"Access-Control-Allow-Origin",AccessControlAllowHeaders:"Access-Control-Allow-Headers",KeyValueEncodingFormat:"application/x-www-form-urlencoded",WrapAssertionFormat:"wrap_assertion_format",WrapAssertion:"wrap_assertion",WrapScope:"wrap_scope",SimpleToken:"SWT",HttpDate:"date",Prefer:"Prefer",Location:"Location",Referer:"referer",A_IM:"A-IM",Query:"x-ms-documentdb-query",IsQuery:"x-ms-documentdb-isquery",Continuation:"x-ms-continuation",PageSize:"x-ms-max-item-count",ActivityId:"x-ms-activity-id",PreTriggerInclude:"x-ms-documentdb-pre-trigger-include",PreTriggerExclude:"x-ms-documentdb-pre-trigger-exclude",PostTriggerInclude:"x-ms-documentdb-post-trigger-include",PostTriggerExclude:"x-ms-documentdb-post-trigger-exclude",IndexingDirective:"x-ms-indexing-directive",SessionToken:"x-ms-session-token",ConsistencyLevel:"x-ms-consistency-level",XDate:"x-ms-date",CollectionPartitionInfo:"x-ms-collection-partition-info",CollectionServiceInfo:"x-ms-collection-service-info",RetryAfterInMilliseconds:"x-ms-retry-after-ms",IsFeedUnfiltered:"x-ms-is-feed-unfiltered",ResourceTokenExpiry:"x-ms-documentdb-expiry-seconds",EnableScanInQuery:"x-ms-documentdb-query-enable-scan",EmitVerboseTracesInQuery:"x-ms-documentdb-query-emit-traces",EnableCrossPartitionQuery:"x-ms-documentdb-query-enablecrosspartition",ParallelizeCrossPartitionQuery:"x-ms-documentdb-query-parallelizecrosspartitionquery",PopulateQueryMetrics:"x-ms-documentdb-populatequerymetrics",QueryMetrics:"x-ms-documentdb-query-metrics",Version:"x-ms-version",OwnerFullName:"x-ms-alt-content-path",OwnerId:"x-ms-content-path",PartitionKey:"x-ms-documentdb-partitionkey",PartitionKeyRangeID:"x-ms-documentdb-partitionkeyrangeid",MaxEntityCount:"x-ms-root-entity-max-count",CurrentEntityCount:"x-ms-root-entity-current-count",CollectionQuotaInMb:"x-ms-collection-quota-mb",CollectionCurrentUsageInMb:"x-ms-collection-usage-mb",MaxMediaStorageUsageInMB:"x-ms-max-media-storage-usage-mb",CurrentMediaStorageUsageInMB:"x-ms-media-storage-usage-mb",RequestCharge:"x-ms-request-charge",PopulateQuotaInfo:"x-ms-documentdb-populatequotainfo",MaxResourceQuota:"x-ms-resource-quota",OfferType:"x-ms-offer-type",OfferThroughput:"x-ms-offer-throughput",DisableRUPerMinuteUsage:"x-ms-documentdb-disable-ru-per-minute-usage",IsRUPerMinuteUsed:"x-ms-documentdb-is-ru-per-minute-used",OfferIsRUPerMinuteThroughputEnabled:"x-ms-offer-is-ru-per-minute-throughput-enabled",IndexTransformationProgress:"x-ms-documentdb-collection-index-transformation-progress",LazyIndexingProgress:"x-ms-documentdb-collection-lazy-indexing-progress",IsUpsert:"x-ms-documentdb-is-upsert",SubStatus:"x-ms-substatus",EnableScriptLogging:"x-ms-documentdb-script-enable-logging",ScriptLogResults:"x-ms-documentdb-script-log-results"},WritableLocations:"writableLocations",ReadableLocations:"readableLocations",Name:"name",DatabaseAccountEndpoint:"databaseAccountEndpoint",ThrottleRetryCount:"x-ms-throttle-retry-count",ThrottleRetryWaitTimeInMs:"x-ms-throttle-retry-wait-time-ms",CurrentVersion:"2017-11-15",SDKName:"azure-cosmos-js",SDKVersion:"2.0.0-4",DefaultPrecisions:{DefaultNumberHashPrecision:3,DefaultNumberRangePrecision:-1,DefaultStringHashPrecision:3,DefaultStringRangePrecision:-1},ConsistentHashRing:{DefaultVirtualNodesPerCollection:128},RegularExpressions:{TrimLeftSlashes:new RegExp("^[/]+"),TrimRightSlashes:new RegExp("[/]+$"),IllegalResourceIdCharacters:new RegExp("[/\\\\?#]")},Quota:{CollectionSize:"collectionSize"},Path:{DatabasesPathSegment:"dbs",CollectionsPathSegment:"colls",UsersPathSegment:"users",DocumentsPathSegment:"docs",PermissionsPathSegment:"permissions",StoredProceduresPathSegment:"sprocs",TriggersPathSegment:"triggers",UserDefinedFunctionsPathSegment:"udfs",ConflictsPathSegment:"conflicts",AttachmentsPathSegment:"attachments",PartitionKeyRangesPathSegment:"pkranges",SchemasPathSegment:"schemas",OffersPathSegment:"offers",TopologyPathSegment:"topology",DatabaseAccountPathSegment:"databaseaccount"},OperationTypes:{Create:"create",Replace:"replace",Upsert:"upsert",Delete:"delete",Read:"read",Query:"query"},PartitionKeyRange:{MinInclusive:"minInclusive",MaxExclusive:"maxExclusive",Id:"id"},QueryRangeConstants:{MinInclusive:"minInclusive",MaxExclusive:"maxExclusive",min:"min"},EffectiveParitionKeyConstants:{MinimumInclusiveEffectivePartitionKey:"",MaximumExclusiveEffectivePartitionKey:"FF"}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),i=n.Constants.RegularExpressions;class o{static jsonStringifyAndEscapeNonASCII(e){return JSON.stringify(e).replace(/[\u0080-\uFFFF]/g,e=>"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4))}static parseLink(e){if(0===e.length)return{type:void 0,objectBody:void 0};"/"!==e[e.length-1]&&(e+="/"),"/"!==e[0]&&(e="/"+e);const t=e.split("/");let r,n;return t.length%2==0?(r=t[t.length-2],n=t[t.length-3]):(r=t[t.length-3],n=t[t.length-2]),{type:n,objectBody:{id:r,self:e}}}static getContainerLink(e){return e.split("/").slice(0,4).join("/")}static trimSlashes(e){return e.replace(n.Constants.RegularExpressions.TrimLeftSlashes,"").replace(n.Constants.RegularExpressions.TrimRightSlashes,"")}static getHexaDigit(){return Math.floor(16*Math.random()).toString(16)}static setIsUpsertHeader(e){if(void 0===e||null===e)throw new Error('The "headers" parameter must not be null or undefined');if(!(e instanceof Object))throw new Error(`The "headers" parameter must be an instance of "Object". Actual type is: "${typeof e}".`);e[n.Constants.HttpHeaders.IsUpsert]=!0}static generateGuidId(){let e="";for(let t=0;t<8;t++)e+=o.getHexaDigit();e+="-";for(let t=0;t<4;t++)e+=o.getHexaDigit();e+="-";for(let t=0;t<4;t++)e+=o.getHexaDigit();e+="-";for(let t=0;t<4;t++)e+=o.getHexaDigit();e+="-";for(let t=0;t<12;t++)e+=o.getHexaDigit();return e}static parsePath(e){const t=[];let r=0;const n=()=>{throw new Error("Path "+e+" is invalid at index "+r)},i=()=>{const t=e[r];let i=++r;for(;-1===(i=e.indexOf(t,i))&&n(),"\\"===e[i-1];)++i;const o=e.substr(r,i-r);return r=i+1,o},o=()=>{const t=e.indexOf("/",r);let n=null;return-1===t?(n=e.substr(r),r=e.length):(n=e.substr(r,t-r),r=t),n=n.trim()};for(;r<e.length&&("/"!==e[r]&&n(),++r!==e.length);)'"'===e[r]||"'"===e[r]?t.push(i()):t.push(o());return t}static isResourceValid(e,t){if(e.id){if("string"!=typeof e.id)return t.message="Id must be a string.",!1;if(-1!==e.id.indexOf("/")||-1!==e.id.indexOf("\\")||-1!==e.id.indexOf("?")||-1!==e.id.indexOf("#"))return t.message="Id contains illegal chars.",!1;if(" "===e.id[e.id.length-1])return t.message="Id ends with a space.",!1}return!0}static getIdFromLink(e,t=!0){return t?e=o.trimSlashes(e):o.parseLink(e).objectBody.id.toLowerCase()}static getPathFromLink(e,t,r=!0){return r?(e=o.trimSlashes(e),t?"/"+encodeURI(e)+"/"+t:"/"+encodeURI(e)):t?"/"+e+t+"/":"/"+e}static isStringNullOrEmpty(e){return!e||/^\s*$/.test(e)}static trimSlashFromLeftAndRight(e){if("string"!=typeof e)throw new Error("invalid input: input is not string");return e.replace(i.TrimLeftSlashes,"").replace(i.TrimRightSlashes,"")}static validateResourceId(e){if("string"!=typeof e||this.isStringNullOrEmpty(e))throw new Error("Resource Id must be a string and cannot be undefined, null or empty");if(" "===e[e.length-1])throw new Error("Resource Id cannot end with space");if(i.IllegalResourceIdCharacters.test(e))throw new Error("Illegal characters ['/', '\\', '?', '#'] cannot be used in resourceId");return!0}static getResourceIdFromPath(e){if(!e||"string"!=typeof e)return null;const t=this.trimSlashFromLeftAndRight(e).split("/");return t.length%2!=0?null:t[t.length-1]}}t.Helper=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusCodes={Ok:200,Created:201,Accepted:202,NoContent:204,NotModified:304,BadRequest:400,Unauthorized:401,Forbidden:403,NotFound:404,MethodNotAllowed:405,RequestTimeout:408,Conflict:409,Gone:410,PreconditionFailed:412,RequestEntityTooLarge:413,TooManyRequests:429,RetryWith:449,InternalServerError:500,ServiceUnavailable:503,OperationPaused:1200,OperationCancelled:1201},t.SubStatusCodes={Unknown:0,CrossPartitionQueryNotServable:1004,PartitionKeyRangeGone:1002,ReadSessionNotAvailable:1002,WriteForbidden:3}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class i{static createDatabaseUri(e){return e=n.Helper.trimSlashFromLeftAndRight(e),n.Helper.validateResourceId(e),n.Constants.Path.DatabasesPathSegment+"/"+e}static createDocumentCollectionUri(e,t){return t=n.Helper.trimSlashFromLeftAndRight(t),n.Helper.validateResourceId(t),this.createDatabaseUri(e)+"/"+n.Constants.Path.CollectionsPathSegment+"/"+t}static createUserUri(e,t){return t=n.Helper.trimSlashFromLeftAndRight(t),n.Helper.validateResourceId(t),this.createDatabaseUri(e)+"/"+n.Constants.Path.UsersPathSegment+"/"+t}static createDocumentUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),this.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.DocumentsPathSegment+"/"+r}static createPermissionUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),this.createUserUri(e,t)+"/"+n.Constants.Path.PermissionsPathSegment+"/"+r}static createStoredProcedureUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),i.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.StoredProceduresPathSegment+"/"+r}static createTriggerUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),this.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.TriggersPathSegment+"/"+r}static createUserDefinedFunctionUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),this.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.UserDefinedFunctionsPathSegment+"/"+r}static createConflictUri(e,t,r){return r=n.Helper.trimSlashFromLeftAndRight(r),n.Helper.validateResourceId(r),this.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.ConflictsPathSegment+"/"+r}static createAttachmentUri(e,t,r,i){return i=n.Helper.trimSlashFromLeftAndRight(i),n.Helper.validateResourceId(i),this.createDocumentUri(e,t,r)+"/"+n.Constants.Path.AttachmentsPathSegment+"/"+i}static createPartitionKeyRangesUri(e,t){return this.createDocumentCollectionUri(e,t)+"/"+n.Constants.Path.PartitionKeyRangesPathSegment}}t.UriFactory=i},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});const n=r(58),i=r(150);t.EMPTY="0";class o{constructor(){this.offer=t.EMPTY,this.database=t.EMPTY,this.documentCollection=t.EMPTY,this.storedProcedure=t.EMPTY,this.trigger=t.EMPTY,this.userDefinedFunction=t.EMPTY,this.document=t.EMPTY,this.partitionKeyRange=t.EMPTY,this.user=t.EMPTY,this.conflict=t.EMPTY,this.permission=t.EMPTY,this.attachment=t.EMPTY,this.length=20,this.offerIdLength=3,this.DocumentByte=0,this.StoredProcedureByte=8,this.TriggerByte=7,this.UserDefinedFunctionByte=6,this.ConflictByte=4,this.PartitionKeyRangeByte=5}parse(e){const t=this.tryParse(e);if(!t[0])throw new Error("invalid resource id "+e);return t[1]}newDatabaseId(e){return(new o).database=e,o}newDocumentCollectionId(e,t){const r=this.parse(e),n=new o;return n.database=r.database,n.documentCollection=t,n}newUserId(e,t){const r=this.parse(e),n=new o;return n.database=r.database,n.user=t,n}newPermissionId(e,t){const r=this.parse(e),n=new o;return n.database=r.database,n.user=r.user,n.permission=t,n}newAttachmentId(e,t){const r=this.parse(e),n=new o;return n.database=r.database,n.documentCollection=r.documentCollection,n.document=r.document,n.attachment=t,n}tryParse(e){let t;if(!e)return[!1,void 0];const r=this.verify(e);if(!r[0])return[!1,void 0];const n=r[1],i=new Int8Array(n);if(n.length%4!=0&&n.length!==this.offerIdLength)return[!1,void 0];if(t=new o,n.length===this.offerIdLength){let e=0;for(let t=0;t<this.offerIdLength;t++)e|=i[t]<<8*t;return t.offer=e.toString(),[!0,t]}if(n.length>=4&&(t.database=n.readIntBE(0,4).toString()),n.length>=8){if((128&i[4])>0){if(t.documentCollection=n.readIntBE(4,4).toString(),n.length>=16){const e=o.bigNumberReadIntBE(n,8,8).toString();if(i[15]>>4===this.DocumentByte)t.document=e,20===n.length&&(t.attachment=n.readIntBE(16,4).toString());else if(Math.abs(i[15]>>4)===this.StoredProcedureByte)t.storedProcedure=e;else if(i[15]>>4===this.TriggerByte)t.trigger=e;else if(i[15]>>4===this.UserDefinedFunctionByte)t.userDefinedFunction=e;else if(i[15]>>4===this.ConflictByte)t.conflict=e;else{if(i[15]>>4!==this.PartitionKeyRangeByte)return[!1,t];t.partitionKeyRange=e}}else if(8!==n.length)return[!1,t]}else if(t.user=n.readIntBE(4,4).toString(),16===n.length)t.permission=o.bigNumberReadIntBE(n,8,8).toString();else if(8!==n.length)return[!1,t]}return[!0,t]}verify(e){if(!e)throw new Error("invalid resource id "+e);let t=o.fromBase64String(e);return!t||t.length>this.length?[!1,t=void 0]:[!0,t]}verifyBool(e){return this.verify(e)[0]}static fromBase64String(t){return new e(t.replace("-","/"),"base64")}static toBase64String(e){return e.toString("base64")}isDatabaseId(){return this.database!==t.EMPTY&&this.documentCollection===t.EMPTY&&this.user===t.EMPTY}getDatabaseId(){const e=new o;return e.database=this.database,e}getDocumentCollectionId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e}getUniqueDocumentCollectionId(){const e=n(this.database),t=n(this.documentCollection);return e.shiftLeft(32).or(t).toString()}getStoredProcedureId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.storedProcedure=this.storedProcedure,e}getTriggerId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.trigger=this.trigger,e}getUserDefinedFunctionId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.userDefinedFunction=this.userDefinedFunction,e}getConflictId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.conflict=this.conflict,e}getDocumentId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.document=this.document,e}getPartitonKeyRangeId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.partitionKeyRange=this.partitionKeyRange,e}getUserId(){const e=new o;return e.database=this.database,e.user=this.user,e}getPermissionId(){const e=new o;return e.database=this.database,e.user=this.user,e.permission=this.permission,e}getAttachmentId(){const e=new o;return e.database=this.database,e.documentCollection=this.documentCollection,e.document=this.document,e.attachment=this.attachment,e}getOfferId(){const e=new o;return e.offer=this.offer,e}getValue(){let r=0;this.offer!==t.EMPTY?r+=this.offerIdLength:this.database!==t.EMPTY&&(r+=4),this.documentCollection===t.EMPTY&&this.user===t.EMPTY||(r+=4),this.document===t.EMPTY&&this.permission===t.EMPTY&&this.storedProcedure===t.EMPTY&&this.trigger===t.EMPTY&&this.userDefinedFunction===t.EMPTY&&this.conflict===t.EMPTY&&this.partitionKeyRange===t.EMPTY||(r+=8),this.attachment!==t.EMPTY&&(r+=4);const n=new e(r);let o;return n.fill(0),this.offer!==t.EMPTY?n.writeIntLE(Number(this.offer),0,this.offerIdLength):this.database!==t.EMPTY&&n.writeIntBE(Number(this.database),0,4),this.documentCollection!==t.EMPTY?n.writeIntBE(Number(this.documentCollection),4,4):this.user!==t.EMPTY&&n.writeIntBE(Number(this.user),4,4),this.storedProcedure!==t.EMPTY?(o=new i.Int64BE(this.storedProcedure)).toBuffer().copy(n,8,0,8):this.trigger!==t.EMPTY?(o=new i.Int64BE(this.trigger)).toBuffer().copy(n,8,0,8):this.userDefinedFunction!==t.EMPTY?(o=new i.Int64BE(this.userDefinedFunction)).toBuffer().copy(n,8,0,8):this.conflict!==t.EMPTY?(o=new i.Int64BE(this.conflict)).toBuffer().copy(n,8,0,8):this.document!==t.EMPTY?(o=new i.Int64BE(this.document)).toBuffer().copy(n,8,0,8):this.permission!==t.EMPTY?(o=new i.Int64BE(this.permission)).toBuffer().copy(n,8,0,8):this.partitionKeyRange!==t.EMPTY&&(o=new i.Int64BE(this.partitionKeyRange)).toBuffer().copy(n,8,0,8),this.attachment!==t.EMPTY&&n.writeIntBE(Number(this.attachment),16,4),n}toString(){return o.toBase64String(this.getValue())}static bigNumberReadIntBE(e,t,r){t>>>=0;let i=r>>>=0,o=n("1"),s=n(e[t+--i]);for(;i>0&&o;){const r=n(e[t+--i]);o=o.times(256),s=s.plus(r.times(o))}if(o=o.times(128),s.greater(o)){const e=n(2);s=s.minus(e.pow(8*r))}return s}}t.ResourceId=o}).call(this,r(2).Buffer)},function(e,t,r){"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){for(var t,r=u(e),n=r[0],s=r[1],a=new o(function(e,t,r){return 3*(t+r)/4-r}(0,n,s)),c=0,f=s>0?n-4:n,h=0;h<f;h+=4)t=i[e.charCodeAt(h)]<<18|i[e.charCodeAt(h+1)]<<12|i[e.charCodeAt(h+2)]<<6|i[e.charCodeAt(h+3)],a[c++]=t>>16&255,a[c++]=t>>8&255,a[c++]=255&t;2===s&&(t=i[e.charCodeAt(h)]<<2|i[e.charCodeAt(h+1)]>>4,a[c++]=255&t);1===s&&(t=i[e.charCodeAt(h)]<<10|i[e.charCodeAt(h+1)]<<4|i[e.charCodeAt(h+2)]>>2,a[c++]=t>>8&255,a[c++]=255&t);return a},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],s=0,a=r-i;s<a;s+=16383)o.push(h(e,s,s+16383>a?a:s+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)n[a]=s[a],i[s.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e){return n[e>>18&63]+n[e>>12&63]+n[e>>6&63]+n[63&e]}function h(e,t,r){for(var n,i=[],o=t;o<r;o+=3)n=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),i.push(f(n));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,s,a=8*i-n-1,c=(1<<a)-1,u=c>>1,f=-7,h=r?i-1:0,d=r?-1:1,l=e[t+h];for(h+=d,o=l&(1<<-f)-1,l>>=-f,f+=a;f>0;o=256*o+e[t+h],h+=d,f-=8);for(s=o&(1<<-f)-1,o>>=-f,f+=n;f>0;s=256*s+e[t+h],h+=d,f-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(l?-1:1);s+=Math.pow(2,n),o-=u}return(l?-1:1)*s*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var s,a,c,u=8*o-i-1,f=(1<<u)-1,h=f>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:o-1,p=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=f):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[r+l]=255&a,l+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[r+l]=255&s,l+=p,s/=256,u-=8);e[r+l-p]|=128*b}},function(e,t,r){(function(e){!function(t){var r,n="undefined",i=n!==typeof e&&e,o=n!==typeof Uint8Array&&Uint8Array,s=n!==typeof ArrayBuffer&&ArrayBuffer,a=[0,0,0,0,0,0,0,0],c=Array.isArray||function(e){return!!e&&"[object Array]"==Object.prototype.toString.call(e)},u=4294967296,f=16777216;function h(e,c,h){var S=c?0:4,x=c?4:0,M=c?0:3,E=c?1:2,C=c?2:1,P=c?3:0,k=c?g:w,A=c?v:_,I=O.prototype,R="is"+e,T="_"+R;return I.buffer=void 0,I.offset=0,I[T]=!0,I.toNumber=B,I.toString=function(e){var t=this.buffer,r=this.offset,n=q(t,r+S),i=q(t,r+x),o="",s=!h&&2147483648&n;s&&(n=~n,i=u-i);e=e||10;for(;;){var a=n%e*u+i;if(n=Math.floor(n/e),i=Math.floor(a/e),o=(a%e).toString(e)+o,!n&&!i)break}s&&(o="-"+o);return o},I.toJSON=B,I.toArray=d,i&&(I.toBuffer=l),o&&(I.toArrayBuffer=p),O[R]=function(e){return!(!e||!e[T])},t[e]=O,O;function O(e,t,i,c){return this instanceof O?function(e,t,i,c,f){o&&s&&(t instanceof s&&(t=new o(t)),c instanceof s&&(c=new o(c)));if(!(t||i||c||r))return void(e.buffer=m(a,0));if(!b(t,i)){var h=r||Array;f=i,c=t,i=0,t=new h(8)}if(e.buffer=t,e.offset=i|=0,n===typeof c)return;"string"==typeof c?function(e,t,r,n){var i=0,o=r.length,s=0,a=0;"-"===r[0]&&i++;var c=i;for(;i<o;){var f=parseInt(r[i++],n);if(!(f>=0))break;a=a*n+f,s=s*n+Math.floor(a/u),a%=u}c&&(s=~s,a?a=u-a:s++);D(e,t+S,s),D(e,t+x,a)}(t,i,c,f||10):b(c,f)?y(t,i,c,f):"number"==typeof f?(D(t,i+S,c),D(t,i+x,f)):c>0?k(t,i,c):c<0?A(t,i,c):y(t,i,a,0)}(this,e,t,i,c):new O(e,t,i,c)}function B(){var e=this.buffer,t=this.offset,r=q(e,t+S),n=q(e,t+x);return h||(r|=0),r?r*u+n:n}function D(e,t,r){e[t+P]=255&r,r>>=8,e[t+C]=255&r,r>>=8,e[t+E]=255&r,r>>=8,e[t+M]=255&r}function q(e,t){return e[t+M]*f+(e[t+E]<<16)+(e[t+C]<<8)+e[t+P]}}function d(e){var t=this.buffer,n=this.offset;return r=null,!1!==e&&0===n&&8===t.length&&c(t)?t:m(t,n)}function l(t){var n=this.buffer,o=this.offset;if(r=i,!1!==t&&0===o&&8===n.length&&e.isBuffer(n))return n;var s=new i(8);return y(s,0,n,o),s}function p(e){var t=this.buffer,n=this.offset,i=t.buffer;if(r=o,!1!==e&&0===n&&i instanceof s&&8===i.byteLength)return i;var a=new o(8);return y(a,0,t,n),a.buffer}function b(e,t){var r=e&&e.length;return t|=0,r&&t+8<=r&&"string"!=typeof e[t]}function y(e,t,r,n){t|=0,n|=0;for(var i=0;i<8;i++)e[t++]=255&r[n++]}function m(e,t){return Array.prototype.slice.call(e,t,t+8)}function g(e,t,r){for(var n=t+8;n>t;)e[--n]=255&r,r/=256}function v(e,t,r){var n=t+8;for(r++;n>t;)e[--n]=255&-r^255,r/=256}function w(e,t,r){for(var n=t+8;t<n;)e[t++]=255&r,r/=256}function _(e,t,r){var n=t+8;for(r++;t<n;)e[t++]=255&-r^255,r/=256}h("Uint64BE",!0,!0),h("Int64BE",!0,!1),h("Uint64LE",!1,!0),h("Int64LE",!1,!1)}("object"==typeof t&&"string"!=typeof t.nodeName?t:this||{})}).call(this,r(2).Buffer)},function(e,t,r){"use strict";(function(e,n){Object.defineProperty(t,"__esModule",{value:!0});const i=r(152),o=r(1);class s{static getPlatformDefaultHeaders(){const e={};return e[o.Constants.HttpHeaders.UserAgent]=s.getUserAgent(),e}static getDecodedDataLength(t){return new e(t,"base64").length}static getUserAgent(){return`${s._getSafeUserAgentSegmentInfo(i.platform())}/${s._getSafeUserAgentSegmentInfo(i.release())} Nodejs/${s._getSafeUserAgentSegmentInfo(n.version)} ${o.Constants.SDKName}/${o.Constants.SDKVersion}`}static _getSafeUserAgentSegmentInfo(e){return"string"!=typeof e&&(e="unknown"),(e=e.replace(/\s+/g,""))||(e="unknown"),e}}t.Platform=s}).call(this,r(2).Buffer,r(6))},function(e,t){t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(33),o=r(1),s=r(154);t.RetryUtility=class{static execute(e,t,r,o,a,c){return n(this,void 0,void 0,function*(){const n="string"!=typeof c?c:{path:"",operationType:"nonReadOps",client:null},u=new i.EndpointDiscoveryRetryPolicy(e),f=new i.ResourceThrottleRetryPolicy(o.RetryOptions.MaxRetryAttemptCount,o.RetryOptions.FixedRetryIntervalInMilliseconds,o.RetryOptions.MaxWaitTimeInSeconds),h=new i.SessionReadRetryPolicy(e,n),d=new s.DefaultRetryPolicy(c.operationType);return this.apply(t,r,o,a,u,f,h,d)})}static apply(e,t,r,i,s,a,c,u){return n(this,void 0,void 0,function*(){const f=t(r,i,e);try{const{result:h,headers:d}=yield f;return d[o.Constants.ThrottleRetryCount]=a.currentRetryAttemptCount,d[o.Constants.ThrottleRetryWaitTimeInMs]=a.cummulativeWaitTimeinMilliseconds,{result:h,headers:d}}catch(f){let h=null;const d=f.headers||{},l=yield(h=f.code===o.StatusCodes.Forbidden&&f.substatus===o.SubStatusCodes.WriteForbidden?s:f.code===o.StatusCodes.TooManyRequests?a:f.code===o.StatusCodes.NotFound&&f.substatus===o.SubStatusCodes.ReadSessionNotAvailable?c:u).shouldRetry(f);if(l){const o=l[1];return new Promise((f,d)=>{setTimeout(()=>n(this,void 0,void 0,function*(){void 0!==o&&(i=this.modifyRequestOptions(i,o)),f(yield this.apply(e,t,r,i,s,a,c,u))}),h.retryAfterInMilliseconds)})}throw d[o.Constants.ThrottleRetryCount]=a.currentRetryAttemptCount,d[o.Constants.ThrottleRetryWaitTimeInMs]=a.cummulativeWaitTimeinMilliseconds,f.headers=Object.assign({},f.headers,d),f}})}static modifyRequestOptions(e,t){const r=Object.keys(t);for(const n in r)"path"!==r[n]&&(e[r[n]]=t[r[n]]);return e}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.DefaultRetryPolicy=class{constructor(e){this.operationType=e,this.maxRetryAttemptCount=10,this.currentRetryAttemptCount=0,this.retryAfterInMilliseconds=1e3,this.WindowsInterruptedFunctionCall=10004,this.WindowsFileHandleNotValid=10009,this.WindowsPermissionDenied=10013,this.WindowsBadAddress=10014,this.WindowsInvalidArgumnet=10022,this.WindowsResourceTemporarilyUnavailable=10035,this.WindowsOperationNowInProgress=10036,this.WindowsAddressAlreadyInUse=10048,this.WindowsConnectionResetByPeer=10054,this.WindowsCannotSendAfterSocketShutdown=10058,this.WindowsConnectionTimedOut=10060,this.WindowsConnectionRefused=10061,this.WindowsNameTooLong=10063,this.WindowsHostIsDown=10064,this.WindowsNoRouteTohost=10065,this.LinuxConnectionReset="ECONNRESET",this.CONNECTION_ERROR_CODES=[this.WindowsInterruptedFunctionCall,this.WindowsFileHandleNotValid,this.WindowsPermissionDenied,this.WindowsBadAddress,this.WindowsInvalidArgumnet,this.WindowsResourceTemporarilyUnavailable,this.WindowsOperationNowInProgress,this.WindowsAddressAlreadyInUse,this.WindowsConnectionResetByPeer,this.WindowsCannotSendAfterSocketShutdown,this.WindowsConnectionTimedOut,this.WindowsConnectionRefused,this.WindowsNameTooLong,this.WindowsHostIsDown,this.WindowsNoRouteTohost,this.LinuxConnectionReset]}shouldRetry(e){return n(this,void 0,void 0,function*(){return!!(e&&this.currentRetryAttemptCount<this.maxRetryAttemptCount&&this.needs_retry(e.code))&&(this.currentRetryAttemptCount++,!0)})}needs_retry(e){return("read"===this.operationType||"query"===this.operationType)&&-1!==this.CONNECTION_ERROR_CODES.indexOf(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Strong="Strong",e.BoundedStaleness="BoundedStaleness",e.Session="Session",e.Eventual="Eventual",e.ConsistentPrefix="ConsistentPrefix"}(t.ConsistencyLevel||(t.ConsistencyLevel={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.DatabaseAccount=class{constructor(){this._writableLocations=[],this._readableLocations=[]}get WritableLocations(){return this._writableLocations}get ReadableLocations(){return this._readableLocations}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Number="Number",e.String="String",e.Point="Point",e.LineString="LineString",e.Polygon="Polygon"}(t.DataType||(t.DataType={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.consistent="consistent",e.lazy="lazy",e.none="none"}(t.IndexingMode||(t.IndexingMode={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Hash="Hash",e.Range="Range",e.Spatial="Spatial"}(t.IndexKind||(t.IndexKind={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Buffered="Buffered",e.Streamed="Streamed"}(t.MediaReadMode||(t.MediaReadMode={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Hash="Hash"}(t.PartitionKind||(t.PartitionKind={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.None="none",e.Read="read",e.All="all"}(t.PermissionMode||(t.PermissionMode={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Default=0]="Default",e[e.Query=1]="Query",e[e.SqlQuery=2]="SqlQuery"}(t.QueryCompatibilityMode||(t.QueryCompatibilityMode={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.All="all",e.Create="create",e.Update="update",e.Delete="delete",e.Replace="replace"}(t.TriggerOperation||(t.TriggerOperation={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Pre="pre",e.Post="post"}(t.TriggerType||(t.TriggerType={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.Javascript="Javascript"}(t.UserDefinedFunctionType||(t.UserDefinedFunctionType={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(60),i=r(34),o=r(35),s=r(61),a=r(62),c=r(23);class u{constructor(e,t,r,n,i,o,s,a,c,u,f,h,d){this.retrievedDocumentCount=e,this.retrievedDocumentSize=t,this.outputDocumentCount=r,this.outputDocumentSize=n,this.indexHitDocumentCount=i,this.totalQueryExecutionTime=o,this.queryPreparationTimes=s,this.indexLookupTime=a,this.documentLoadTime=c,this.vmExecutionTime=u,this.runtimeExecutionTimes=f,this.documentWriteTime=h,this.clientSideMetrics=d}get indexHitRatio(){return 0===this.retrievedDocumentCount?1:this.indexHitDocumentCount/this.retrievedDocumentCount}add(e){if(null==arguments||0===arguments.length)throw new Error("arguments was null or empty");let t=0,r=0,i=0,o=0,f=0,h=c.TimeSpan.zero;const d=[];let l=c.TimeSpan.zero,p=c.TimeSpan.zero,b=c.TimeSpan.zero;const y=[];let m=c.TimeSpan.zero;const g=[];e.push(this);for(const n of e){if(null==n)throw new Error("queryMetricsArray has null or undefined item(s)");t+=n.retrievedDocumentCount,r+=n.retrievedDocumentSize,i+=n.outputDocumentCount,o+=n.outputDocumentSize,f+=n.indexHitDocumentCount,h=h.add(n.totalQueryExecutionTime),d.push(n.queryPreparationTimes),l=l.add(n.indexLookupTime),p=p.add(n.documentLoadTime),b=b.add(n.vmExecutionTime),y.push(n.runtimeExecutionTimes),m=m.add(n.documentWriteTime),g.push(n.clientSideMetrics)}return new u(t,r,i,o,f,h,s.QueryPreparationTimes.createFromArray(d),l,p,b,a.RuntimeExecutionTimes.createFromArray(y),m,n.ClientSideMetrics.createFromArray(...g))}toDelimitedString(){return i.default.RetrievedDocumentCount+"="+this.retrievedDocumentCount+";"+i.default.RetrievedDocumentSize+"="+this.retrievedDocumentSize+";"+i.default.OutputDocumentCount+"="+this.outputDocumentCount+";"+i.default.OutputDocumentSize+"="+this.outputDocumentSize+";"+i.default.IndexHitRatio+"="+this.indexHitRatio+";"+i.default.TotalQueryExecutionTimeInMs+"="+this.totalQueryExecutionTime.totalMilliseconds()+";"+this.queryPreparationTimes.toDelimitedString()+";"+i.default.IndexLookupTimeInMs+"="+this.indexLookupTime.totalMilliseconds()+";"+i.default.DocumentLoadTimeInMs+"="+this.documentLoadTime.totalMilliseconds()+";"+i.default.VMExecutionTimeInMs+"="+this.vmExecutionTime.totalMilliseconds()+";"+this.runtimeExecutionTimes.toDelimitedString()+";"+i.default.DocumentWriteTimeInMs+"="+this.documentWriteTime.totalMilliseconds()}static createFromArray(e){if(null==e)throw new Error("queryMetricsArray is null or undefined item(s)");return u.zero.add(e)}static createFromDelimitedString(e,t){const r=o.QueryMetricsUtils.parseDelimitedString(e),c=r[i.default.IndexHitRatio]||0,f=r[i.default.RetrievedDocumentCount]||0,h=c*f,d=r[i.default.OutputDocumentCount]||0,l=r[i.default.OutputDocumentSize]||0,p=r[i.default.RetrievedDocumentSize]||0,b=o.QueryMetricsUtils.timeSpanFromMetrics(r,i.default.TotalQueryExecutionTimeInMs);return new u(f,p,d,l,h,b,s.QueryPreparationTimes.createFromDelimitedString(e),o.QueryMetricsUtils.timeSpanFromMetrics(r,i.default.IndexLookupTimeInMs),o.QueryMetricsUtils.timeSpanFromMetrics(r,i.default.DocumentLoadTimeInMs),o.QueryMetricsUtils.timeSpanFromMetrics(r,i.default.VMExecutionTimeInMs),a.RuntimeExecutionTimes.createFromDelimitedString(e),o.QueryMetricsUtils.timeSpanFromMetrics(r,i.default.DocumentWriteTimeInMs),t||n.ClientSideMetrics.zero)}}u.zero=new u(0,0,0,0,0,c.TimeSpan.zero,s.QueryPreparationTimes.zero,c.TimeSpan.zero,c.TimeSpan.zero,c.TimeSpan.zero,a.RuntimeExecutionTimes.zero,c.TimeSpan.zero,n.ClientSideMetrics.zero),t.QueryMetrics=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.AverageAggregator=class{aggregate(e){null!=e&&null!=e.sum&&(null==this.sum&&(this.sum=0,this.count=0),this.sum+=e.sum,this.count+=e.count)}getResult(){if(!(null==this.sum||this.count<=0))return this.sum/this.count}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CountAggregator=class{constructor(){this.value=0}aggregate(e){this.value+=e}getResult(){return this.value}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(43);t.MaxAggregator=class{constructor(){this.value=void 0,this.comparer=new n.OrderByDocumentProducerComparator(["Ascending"])}aggregate(e){void 0===this.value?this.value=e:this.comparer.compareValue(e,typeof e,this.value,typeof this.value)>0&&(this.value=e)}getResult(){return this.value}}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(43);t.MinAggregator=class{constructor(){this.value=void 0,this.comparer=new n.OrderByDocumentProducerComparator(["Ascending"])}aggregate(e){if(void 0===this.value)this.value=e;else{const t=null==e?"NoValue":typeof e;this.comparer.compareValue(e,t,this.value,typeof this.value)<0&&(this.value=e)}}getResult(){return this.value}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SumAggregator=class{aggregate(e){void 0!==e&&(void 0===this.sum?this.sum=e:this.sum+=e)}getResult(){return this.sum}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(64);t.AggregateEndpointComponent=class{constructor(e,t){this.executionContext=e,this.executionContext=e,this.localAggregators=[],t.forEach(e=>{switch(e){case"Average":this.localAggregators.push(new i.AverageAggregator);break;case"Count":this.localAggregators.push(new i.CountAggregator);break;case"Max":this.localAggregators.push(new i.MaxAggregator);break;case"Min":this.localAggregators.push(new i.MinAggregator);break;case"Sum":this.localAggregators.push(new i.SumAggregator)}})}_getAggregateResult(){return n(this,void 0,void 0,function*(){this.toArrayTempResources=[],this.aggregateValues=[],this.aggregateValuesIndex=-1;try{const{result:e,headers:t}=yield this._getQueryResults();return e.forEach(e=>{this.localAggregators.forEach(t=>{let r;if(e&&Object.keys(e).length>0){const t=Object.keys(e)[0];r=e[t]}t.aggregate(r)})}),this.localAggregators.forEach(e=>{this.aggregateValues.push(e.getResult())}),{result:this.aggregateValues,headers:t}}catch(e){throw e}})}_getQueryResults(){return n(this,void 0,void 0,function*(){try{const{result:e,headers:t}=yield this.executionContext.nextItem();return void 0===e?{result:this.toArrayTempResources,headers:t}:(this.toArrayTempResources=this.toArrayTempResources.concat(e),this._getQueryResults())}catch(e){throw e}})}nextItem(){return n(this,void 0,void 0,function*(){try{let e,t;return void 0===this.aggregateValues&&({result:t,headers:e}=yield this._getAggregateResult()),{result:this.aggregateValuesIndex<this.aggregateValues.length?this.aggregateValues[++this.aggregateValuesIndex]:void 0,headers:e}}catch(e){throw e}})}current(){return n(this,void 0,void 0,function*(){if(void 0===this.aggregateValues){const{result:e,headers:t}=yield this._getAggregateResult();return{result:this.aggregateValues[this.aggregateValuesIndex],headers:t}}return{result:this.aggregateValues[this.aggregateValuesIndex],headers:void 0}})}hasMoreResults(){return null!=this.aggregateValues&&this.aggregateValuesIndex<this.aggregateValues.length-1}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.OrderByEndpointComponent=class{constructor(e){this.executionContext=e}nextItem(){return n(this,void 0,void 0,function*(){try{const{result:e,headers:t}=yield this.executionContext.nextItem();return{result:void 0!==e?e.payload:void 0,headers:t}}catch(e){throw e}})}current(){return n(this,void 0,void 0,function*(){try{const{result:e,headers:t}=yield this.executionContext.current();return{result:void 0!==e?e.payload:void 0,headers:t}}catch(e){throw e}})}hasMoreResults(){return this.executionContext.hasMoreResults()}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.TopEndpointComponent=class{constructor(e,t){this.executionContext=e,this.topCount=t}nextItem(){return n(this,void 0,void 0,function*(){if(this.topCount<=0)return{result:void 0,headers:void 0};this.topCount--;try{return this.executionContext.nextItem()}catch(e){throw e}})}current(){return n(this,void 0,void 0,function*(){if(this.topCount<=0)return{result:void 0,headers:void 0};try{return this.executionContext.current()}catch(e){throw e}})}hasMoreResults(){return this.topCount>0&&this.executionContext.hasMoreResults()}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(13),o=r(1),s=r(63),a=r(66),c=r(59);o.Constants;var u;!function(e){e.started="started",e.inProgress="inProgress",e.ended="ended"}(u||(u={}));class f{constructor(e,t,r,i,a){this.clientContext=e,this.fetchFunction=(e=>n(this,void 0,void 0,function*(){const t=o.Helper.getPathFromLink(this.collectionLink,"docs"),r=o.Helper.getIdFromLink(this.collectionLink);return this.clientContext.queryFeed(t,"docs",r,e=>e.Documents,this.query,e,this.targetPartitionKeyRange.id)})),this.collectionLink=t,this.query=r,this.targetPartitionKeyRange=i,this.fetchResults=[],this.state=f.STATES.started,this.allFetched=!1,this.err=void 0,this.previousContinuationToken=void 0,this.continuationToken=void 0,this.respHeaders=c.HeaderUtils.getInitialHeader(),this.internalExecutionContext=new s.DefaultQueryExecutionContext(e,r,a,this.fetchFunction),this.state=f.STATES.inProgress}peekBufferedItems(){const e=[];for(let t=0,r=!1;t<this.fetchResults.length&&!r;t++){const n=this.fetchResults[t];switch(n.fetchResultType){case a.FetchResultType.Done:case a.FetchResultType.Exception:r=!0;break;case a.FetchResultType.Result:e.push(n.feedResponse)}}return e}hasMoreResults(){return this.internalExecutionContext.hasMoreResults()||0!==this.fetchResults.length}gotSplit(){const e=this.fetchResults[0];return!(e.fetchResultType!==a.FetchResultType.Exception||!f._needPartitionKeyRangeCacheRefresh(e.error))}_getAndResetActiveResponseHeaders(){const e=this.respHeaders;return this.respHeaders=c.HeaderUtils.getInitialHeader(),e}_updateStates(e,t){if(e)return this.state=f.STATES.ended,void(this.err=e);t&&(this.allFetched=!0),this.allFetched&&0===this.peekBufferedItems().length&&(this.state=f.STATES.ended),this.internalExecutionContext.continuation!==this.continuationToken&&(this.previousContinuationToken=this.continuationToken,this.continuationToken=this.internalExecutionContext.continuation)}static _needPartitionKeyRangeCacheRefresh(e){return e.code===o.StatusCodes.Gone&&"substatus"in e&&e.substatus===o.SubStatusCodes.PartitionKeyRangeGone}bufferMore(){return n(this,void 0,void 0,function*(){if(this.err)throw this.err;try{const{result:e,headers:t}=yield this.internalExecutionContext.fetchMore();if(this._updateStates(void 0,void 0===e),void 0!==e&&e.forEach(e=>{this.fetchResults.push(new a.FetchResult(e,void 0))}),null!=t&&o.Constants.HttpHeaders.QueryMetrics in t){const e=t[o.Constants.HttpHeaders.QueryMetrics][0];t[o.Constants.HttpHeaders.QueryMetrics]={},t[o.Constants.HttpHeaders.QueryMetrics][this.targetPartitionKeyRange.id]=e}return{result:e,headers:t}}catch(e){if(f._needPartitionKeyRangeCacheRefresh(e)){const t=new a.FetchResult(void 0,e);return this.fetchResults.push(t),{result:[t],headers:e.headers}}throw this._updateStates(e,void 0===e.resources),e}})}getTargetParitionKeyRange(){return this.targetPartitionKeyRange}nextItem(){return n(this,void 0,void 0,function*(){if(this.err)throw this._updateStates(this.err,void 0),this.err;try{const{result:e,headers:t}=yield this.current(),r=this.fetchResults.shift();switch(this._updateStates(void 0,void 0===e),i.equal(r.feedResponse,e),r.fetchResultType){case a.FetchResultType.Done:return{result:void 0,headers:t};case a.FetchResultType.Exception:throw r.error.headers=t,r.error;case a.FetchResultType.Result:return{result:r.feedResponse,headers:t}}}catch(e){throw this._updateStates(e,void 0===e.item),e}})}current(){return n(this,void 0,void 0,function*(){if(this.fetchResults.length>0){const e=this.fetchResults[0];switch(e.fetchResultType){case a.FetchResultType.Done:return{result:void 0,headers:this._getAndResetActiveResponseHeaders()};case a.FetchResultType.Exception:throw e.error.headers=this._getAndResetActiveResponseHeaders(),e.error;case a.FetchResultType.Result:return{result:e.feedResponse,headers:this._getAndResetActiveResponseHeaders()}}}if(this.allFetched)return{result:void 0,headers:this._getAndResetActiveResponseHeaders()};try{const{result:e,headers:t}=yield this.bufferMore();return void 0===e?{result:void 0,headers:t}:(c.HeaderUtils.mergeHeaders(this.respHeaders,t),this.current())}catch(e){throw e}})}}f.STATES=u,t.DocumentProducer=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(13),i=r(24),o={QueryInfoPath:"queryInfo",TopPath:["queryInfo","top"],OrderByPath:["queryInfo","orderBy"],AggregatePath:["queryInfo","aggregates"],QueryRangesPath:"queryRanges",RewrittenQueryPath:["queryInfo","rewrittenQuery"]};t.PartitionedQueryExecutionContextInfoParser=class{static parseRewrittenQuery(e){return this._extract(e,o.RewrittenQueryPath)}static parseQueryRanges(e){return this._extract(e,o.QueryRangesPath)}static parseOrderBy(e){return this._extract(e,o.OrderByPath)}static parseAggregates(e){return this._extract(e,o.AggregatePath)}static parseTop(e){return this._extract(e,o.TopPath)}static _extract(e,t){let r=e;if("string"==typeof t)return r[t];n.ok(Array.isArray(t),i.format("%s is expected to be an array",JSON.stringify(t)));for(const e of t)if(void 0===(r=r[e]))return;return r}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(13),o=r(67),s=r(180),a=r(68),c=r(24),u=r(12),f=r(1),h=r(25);var d;!function(e){e.started="started",e.inProgress="inProgress",e.ended="ended"}(d=t.ParallelQueryExecutionContextBaseStates||(t.ParallelQueryExecutionContextBaseStates={}));class l{constructor(e,t,r,i,o){this.clientContext=e,this.collectionLink=t,this.query=r,this.options=i,this.partitionedQueryExecutionInfo=o,this.clientContext=e,this.collectionLink=t,this.query=r,this.options=i,this.partitionedQueryExecutionInfo=o,this.err=void 0,this.state=l.STATES.started,this.routingProvider=new h.SmartRoutingMapProvider(this.clientContext),this.sortOrders=u.PartitionedQueryExecutionContextInfoParser.parseOrderBy(this.partitionedQueryExecutionInfo),void 0===i||void 0===i.maxItemCount?(this.pageSize=l.DEFAULT_PAGE_SIZE,this.options.maxItemCount=this.pageSize):this.pageSize=i.maxItemCount,this.requestContinuation=i?i.continuation:null,this.respHeaders=u.HeaderUtils.getInitialHeader(),this.orderByPQ=new s((e,t)=>this.documentProducerComparator(t,e)),this.sem=a(1);this.sem.take(()=>n(this,void 0,void 0,function*(){try{const e=yield this._onTargetPartitionRanges();this.waitingForInternalExecutionContexts=e.length;const t=i.maxDegreeOfParallelism>0?Math.min(i.maxDegreeOfParallelism,e.length):e.length,r=a(t);let o=[];const s=[];if(this.requestContinuation)try{const t=JSON.parse(this.requestContinuation);(o=this.getPartitionKeyRangesForContinuation(t,e)).length>0&&(s.push(this._createTargetPartitionQueryExecutionContext(o[0],t.token)),o=o.slice(1))}catch(e){this.err=e,this.sem.leave()}else o=e;o.forEach(e=>{s.push(this._createTargetPartitionQueryExecutionContext(e))}),s.forEach(e=>{r.take(()=>n(this,void 0,void 0,function*(){try{const{result:t,headers:n}=yield e.current();if(this._mergeWithActiveResponseHeaders(n),void 0===t)return;try{this.orderByPQ.enq(e)}catch(e){this.err=e}}catch(e){this._mergeWithActiveResponseHeaders(e.headers),this.err=e}finally{r.leave(),this._decrementInitiationLock()}}))})}catch(e){return this.err=e,void this.sem.leave()}}))}getPartitionKeyRangesForContinuation(e,t){const r={};r[h.PARITIONKEYRANGE.MinInclusive]=e.range.min,r[h.PARITIONKEYRANGE.MaxExclusive]=e.range.max;const n=o.le(t,r,(e,t)=>e[h.PARITIONKEYRANGE.MinInclusive]>t[h.PARITIONKEYRANGE.MinInclusive]?1:e[h.PARITIONKEYRANGE.MinInclusive]<t[h.PARITIONKEYRANGE.MinInclusive]?-1:0);if(n>0)throw new Error("BadRequestException: InvalidContinuationToken");return t.slice(n,t.length-n)}_decrementInitiationLock(){this.waitingForInternalExecutionContexts=this.waitingForInternalExecutionContexts-1,0===this.waitingForInternalExecutionContexts&&(this.sem.leave(),0===this.orderByPQ.size()&&(this.state=l.STATES.inProgress))}_mergeWithActiveResponseHeaders(e){u.HeaderUtils.mergeHeaders(this.respHeaders,e)}_getAndResetActiveResponseHeaders(){const e=this.respHeaders;return this.respHeaders=u.HeaderUtils.getInitialHeader(),e}_onTargetPartitionRanges(){return n(this,void 0,void 0,function*(){const e=u.PartitionedQueryExecutionContextInfoParser.parseQueryRanges(this.partitionedQueryExecutionInfo).map(e=>h.QueryRange.parseFromDict(e));return this.routingProvider.getOverlappingRanges(this.collectionLink,e)})}_getReplacementPartitionKeyRanges(e){return n(this,void 0,void 0,function*(){this.clientContext.partitionKeyDefinitionCache;const t=e.targetPartitionKeyRange;this.routingProvider=new h.SmartRoutingMapProvider(this.clientContext);const r=h.QueryRange.parsePartitionKeyRange(t);return this.routingProvider.getOverlappingRanges(this.collectionLink,[r])})}_repairExecutionContext(e){return n(this,void 0,void 0,function*(){const t=this.orderByPQ.deq();try{const r=yield this._getReplacementPartitionKeyRanges(t),i=[];r.forEach(e=>{const r=this._createTargetPartitionQueryExecutionContext(e,t.continuationToken);i.push(r)});const o=(e,t)=>n(this,void 0,void 0,function*(){try{const{result:r,headers:n}=yield e.current();void 0===r||this.orderByPQ.enq(e),yield t()}catch(e){return void(this.err=e)}}),s=t=>n(this,void 0,void 0,function*(){if(!(t.length>0))return e();{const e=t.shift();yield o(e,()=>n(this,void 0,void 0,function*(){yield s(t)}))}});yield s(i)}catch(e){throw this.err=e,e}})}static _needPartitionKeyRangeCacheRefresh(e){return e.code===f.StatusCodes.Gone&&"substatus"in e&&e.substatus===f.SubStatusCodes.PartitionKeyRangeGone}_repairExecutionContextIfNeeded(e,t){return n(this,void 0,void 0,function*(){const r=this.orderByPQ.peek();try{const{result:n,headers:i}=yield r.current();t()}catch(t){if(l._needPartitionKeyRangeCacheRefresh(t))return this._repairExecutionContext(e);throw this.err=t,t}})}nextItem(){return n(this,void 0,void 0,function*(){if(this.err)throw this.err;return new Promise((e,t)=>{this.sem.take(()=>{if(this.err)return this.sem.leave(),this.err.headers=this._getAndResetActiveResponseHeaders(),void t(this.err);if(0===this.orderByPQ.size())return this.state=l.STATES.ended,this.sem.leave(),e({result:void 0,headers:this._getAndResetActiveResponseHeaders()});this._repairExecutionContextIfNeeded(()=>(this.sem.leave(),e(this.nextItem())),()=>n(this,void 0,void 0,function*(){let r,n,o;try{r=this.orderByPQ.deq()}catch(e){return this.err=e,this.sem.leave(),this.err.headers=this._getAndResetActiveResponseHeaders(),void t(this.err)}try{const i=yield r.nextItem();if(n=i.result,o=i.headers,this._mergeWithActiveResponseHeaders(o),void 0===n)return this.err=new Error(c.format("Extracted DocumentProducer from the priority queue                                             doesn't have any buffered item!")),this.sem.leave(),e({result:void 0,headers:this._getAndResetActiveResponseHeaders()})}catch(e){return this.err=new Error(`Extracted DocumentProducer from the priority queue fails to get the                                     buffered item. Due to ${JSON.stringify(e)}`),this.err.headers=this._getAndResetActiveResponseHeaders(),this.sem.leave(),void t(this.err)}try{const{result:e,headers:n}=yield r.current();if(void 0===e);else try{const e=r.fetchResults[0];i.notStrictEqual(e,void 0,"Extracted DocumentProducer from PQ is invalid state with no result!"),this.orderByPQ.enq(r)}catch(e){this.err=e}}catch(e){l._needPartitionKeyRangeCacheRefresh(e)?this.orderByPQ.enq(r):(this.err=e,t(this.err))}finally{this.sem.leave()}return e({result:n,headers:this._getAndResetActiveResponseHeaders()})})).catch(t)})})})}current(){return n(this,void 0,void 0,function*(){if(this.err)throw this.err.headerse=this._getAndResetActiveResponseHeaders(),this.err;return new Promise((e,t)=>{this.sem.take(()=>{try{if(this.err)throw this.err=this._getAndResetActiveResponseHeaders(),this.err;if(0===this.orderByPQ.size())return e({result:void 0,headers:this._getAndResetActiveResponseHeaders()});const r=()=>e(this.current()),n=()=>{const t=this.orderByPQ.peek();return e(t.current())};this._repairExecutionContextIfNeeded(r,n).catch(t)}finally{this.sem.leave()}})})})}hasMoreResults(){return!(this.state===l.STATES.ended||void 0!==this.err)}_createTargetPartitionQueryExecutionContext(e,t){let r=u.PartitionedQueryExecutionContextInfoParser.parseRewrittenQuery(this.partitionedQueryExecutionInfo),n=this.query;"string"==typeof n&&(n={query:n});r&&(n=JSON.parse(JSON.stringify(n)),r=r.replace("{documentdb-formattableorderbyquery-filter}","true"),n.query=r);const i=JSON.parse(JSON.stringify(this.options));return i.continuationToken=t,new u.DocumentProducer(this.clientContext,this.collectionLink,n,e,i)}}l.DEFAULT_PAGE_SIZE=10,l.STATES=d,t.ParallelQueryExecutionContextBase=l},function(e,t){function r(e){this._comparator=e||r.DEFAULT_COMPARATOR,this._elements=[]}e.exports=r,r.DEFAULT_COMPARATOR=function(e,t){return"number"==typeof e&&"number"==typeof t?e-t:(e=e.toString())==(t=t.toString())?0:e>t?1:-1},r.prototype.isEmpty=function(){return 0===this.size()},r.prototype.peek=function(){if(this.isEmpty())throw new Error("PriorityQueue is empty");return this._elements[0]},r.prototype.deq=function(){var e=this.peek(),t=this._elements.pop(),r=this.size();if(0===r)return e;this._elements[0]=t;for(var n=0;n<r;){var i=n,o=2*n+1,s=2*n+2;if(o<r&&this._compare(o,i)>=0&&(i=o),s<r&&this._compare(s,i)>=0&&(i=s),i===n)break;this._swap(i,n),n=i}return e},r.prototype.enq=function(e){for(var t=this._elements.push(e),r=t-1;r>0;){var n=Math.floor((r-1)/2);if(this._compare(r,n)<=0)break;this._swap(n,r),r=n}return t},r.prototype.size=function(){return this._elements.length},r.prototype.forEach=function(e){return this._elements.forEach(e)},r.prototype._compare=function(e,t){return this._comparator(this._elements[e],this._elements[t])},r.prototype._swap=function(e,t){var r=this._elements[e];this._elements[e]=this._elements[t],this._elements[t]=r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(182),i=r(25),o=r(1);t.CollectionRoutingMapFactory=class{static createCompleteRoutingMap(e,t){const r={},s={};let a=[];for(const t of e)r[t[0][o.Constants.PartitionKeyRange.Id]]=t,s[t[1]]=t[0],a.push(t);const c=(a=n.sortBy(a,e=>e[0][o.Constants.PartitionKeyRange.MinInclusive])).map(e=>e[0]),u=a.map(e=>e[1]);if(this._isCompleteSetOfRange(c))return new i.InMemoryCollectionRoutingMap(r,s,c,u,t)}static _isCompleteSetOfRange(e){let t=!1;if(e.length>0){const r=e[0],n=e[e.length-1];t=(t=r[o.Constants.PartitionKeyRange.MinInclusive]===o.Constants.EffectiveParitionKeyConstants.MinimumInclusiveEffectivePartitionKey)&&n[o.Constants.PartitionKeyRange.MaxExclusive]===o.Constants.EffectiveParitionKeyConstants.MaximumExclusiveEffectivePartitionKey;for(let r=1;r<e.length;r++){const n=e[r-1],i=e[r];if(!(t=t&&n[o.Constants.PartitionKeyRange.MaxExclusive]===i[o.Constants.PartitionKeyRange.MinInclusive])){if(n[o.Constants.PartitionKeyRange.MaxExclusive]>i[o.Constants.PartitionKeyRange.MinInclusive])throw Error("Ranges overlap");break}}}return t}}},function(e,t,r){var n;(function(){var r=this,i=r._,o=Array.prototype,s=Object.prototype,a=Function.prototype,c=o.push,u=o.slice,f=s.toString,h=s.hasOwnProperty,d=Array.isArray,l=Object.keys,p=a.bind,b=Object.create,y=function(){},m=function(e){return e instanceof m?e:this instanceof m?void(this._wrapped=e):new m(e)};void 0!==e&&e.exports&&(t=e.exports=m),t._=m,m.VERSION="1.8.3";var g=function(e,t,r){if(void 0===t)return e;switch(null==r?3:r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)};case 4:return function(r,n,i,o){return e.call(t,r,n,i,o)}}return function(){return e.apply(t,arguments)}},v=function(e,t,r){return null==e?m.identity:m.isFunction(e)?g(e,t,r):m.isObject(e)?m.matcher(e):m.property(e)};m.iteratee=function(e,t){return v(e,t,1/0)};var w=function(e,t){return function(r){var n=arguments.length;if(n<2||null==r)return r;for(var i=1;i<n;i++)for(var o=arguments[i],s=e(o),a=s.length,c=0;c<a;c++){var u=s[c];t&&void 0!==r[u]||(r[u]=o[u])}return r}},_=function(e){if(!m.isObject(e))return{};if(b)return b(e);y.prototype=e;var t=new y;return y.prototype=null,t},S=function(e){return function(t){return null==t?void 0:t[e]}},x=Math.pow(2,53)-1,M=S("length"),E=function(e){var t=M(e);return"number"==typeof t&&t>=0&&t<=x};function C(e){return function(t,r,n,i){r=g(r,i,4);var o=!E(t)&&m.keys(t),s=(o||t).length,a=e>0?0:s-1;return arguments.length<3&&(n=t[o?o[a]:a],a+=e),function(t,r,n,i,o,s){for(;o>=0&&o<s;o+=e){var a=i?i[o]:o;n=r(n,t[a],a,t)}return n}(t,r,n,o,a,s)}}m.each=m.forEach=function(e,t,r){var n,i;if(t=g(t,r),E(e))for(n=0,i=e.length;n<i;n++)t(e[n],n,e);else{var o=m.keys(e);for(n=0,i=o.length;n<i;n++)t(e[o[n]],o[n],e)}return e},m.map=m.collect=function(e,t,r){t=v(t,r);for(var n=!E(e)&&m.keys(e),i=(n||e).length,o=Array(i),s=0;s<i;s++){var a=n?n[s]:s;o[s]=t(e[a],a,e)}return o},m.reduce=m.foldl=m.inject=C(1),m.reduceRight=m.foldr=C(-1),m.find=m.detect=function(e,t,r){var n;if(void 0!==(n=E(e)?m.findIndex(e,t,r):m.findKey(e,t,r))&&-1!==n)return e[n]},m.filter=m.select=function(e,t,r){var n=[];return t=v(t,r),m.each(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n},m.reject=function(e,t,r){return m.filter(e,m.negate(v(t)),r)},m.every=m.all=function(e,t,r){t=v(t,r);for(var n=!E(e)&&m.keys(e),i=(n||e).length,o=0;o<i;o++){var s=n?n[o]:o;if(!t(e[s],s,e))return!1}return!0},m.some=m.any=function(e,t,r){t=v(t,r);for(var n=!E(e)&&m.keys(e),i=(n||e).length,o=0;o<i;o++){var s=n?n[o]:o;if(t(e[s],s,e))return!0}return!1},m.contains=m.includes=m.include=function(e,t,r,n){return E(e)||(e=m.values(e)),("number"!=typeof r||n)&&(r=0),m.indexOf(e,t,r)>=0},m.invoke=function(e,t){var r=u.call(arguments,2),n=m.isFunction(t);return m.map(e,function(e){var i=n?t:e[t];return null==i?i:i.apply(e,r)})},m.pluck=function(e,t){return m.map(e,m.property(t))},m.where=function(e,t){return m.filter(e,m.matcher(t))},m.findWhere=function(e,t){return m.find(e,m.matcher(t))},m.max=function(e,t,r){var n,i,o=-1/0,s=-1/0;if(null==t&&null!=e)for(var a=0,c=(e=E(e)?e:m.values(e)).length;a<c;a++)(n=e[a])>o&&(o=n);else t=v(t,r),m.each(e,function(e,r,n){((i=t(e,r,n))>s||i===-1/0&&o===-1/0)&&(o=e,s=i)});return o},m.min=function(e,t,r){var n,i,o=1/0,s=1/0;if(null==t&&null!=e)for(var a=0,c=(e=E(e)?e:m.values(e)).length;a<c;a++)(n=e[a])<o&&(o=n);else t=v(t,r),m.each(e,function(e,r,n){((i=t(e,r,n))<s||i===1/0&&o===1/0)&&(o=e,s=i)});return o},m.shuffle=function(e){for(var t,r=E(e)?e:m.values(e),n=r.length,i=Array(n),o=0;o<n;o++)(t=m.random(0,o))!==o&&(i[o]=i[t]),i[t]=r[o];return i},m.sample=function(e,t,r){return null==t||r?(E(e)||(e=m.values(e)),e[m.random(e.length-1)]):m.shuffle(e).slice(0,Math.max(0,t))},m.sortBy=function(e,t,r){return t=v(t,r),m.pluck(m.map(e,function(e,r,n){return{value:e,index:r,criteria:t(e,r,n)}}).sort(function(e,t){var r=e.criteria,n=t.criteria;if(r!==n){if(r>n||void 0===r)return 1;if(r<n||void 0===n)return-1}return e.index-t.index}),"value")};var P=function(e){return function(t,r,n){var i={};return r=v(r,n),m.each(t,function(n,o){var s=r(n,o,t);e(i,n,s)}),i}};m.groupBy=P(function(e,t,r){m.has(e,r)?e[r].push(t):e[r]=[t]}),m.indexBy=P(function(e,t,r){e[r]=t}),m.countBy=P(function(e,t,r){m.has(e,r)?e[r]++:e[r]=1}),m.toArray=function(e){return e?m.isArray(e)?u.call(e):E(e)?m.map(e,m.identity):m.values(e):[]},m.size=function(e){return null==e?0:E(e)?e.length:m.keys(e).length},m.partition=function(e,t,r){t=v(t,r);var n=[],i=[];return m.each(e,function(e,r,o){(t(e,r,o)?n:i).push(e)}),[n,i]},m.first=m.head=m.take=function(e,t,r){if(null!=e)return null==t||r?e[0]:m.initial(e,e.length-t)},m.initial=function(e,t,r){return u.call(e,0,Math.max(0,e.length-(null==t||r?1:t)))},m.last=function(e,t,r){if(null!=e)return null==t||r?e[e.length-1]:m.rest(e,Math.max(0,e.length-t))},m.rest=m.tail=m.drop=function(e,t,r){return u.call(e,null==t||r?1:t)},m.compact=function(e){return m.filter(e,m.identity)};var k=function(e,t,r,n){for(var i=[],o=0,s=n||0,a=M(e);s<a;s++){var c=e[s];if(E(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=k(c,t,r));var u=0,f=c.length;for(i.length+=f;u<f;)i[o++]=c[u++]}else r||(i[o++]=c)}return i};function A(e){return function(t,r,n){r=v(r,n);for(var i=M(t),o=e>0?0:i-1;o>=0&&o<i;o+=e)if(r(t[o],o,t))return o;return-1}}function I(e,t,r){return function(n,i,o){var s=0,a=M(n);if("number"==typeof o)e>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(r&&o&&a)return n[o=r(n,i)]===i?o:-1;if(i!=i)return(o=t(u.call(n,s,a),m.isNaN))>=0?o+s:-1;for(o=e>0?s:a-1;o>=0&&o<a;o+=e)if(n[o]===i)return o;return-1}}m.flatten=function(e,t){return k(e,t,!1)},m.without=function(e){return m.difference(e,u.call(arguments,1))},m.uniq=m.unique=function(e,t,r,n){m.isBoolean(t)||(n=r,r=t,t=!1),null!=r&&(r=v(r,n));for(var i=[],o=[],s=0,a=M(e);s<a;s++){var c=e[s],u=r?r(c,s,e):c;t?(s&&o===u||i.push(c),o=u):r?m.contains(o,u)||(o.push(u),i.push(c)):m.contains(i,c)||i.push(c)}return i},m.union=function(){return m.uniq(k(arguments,!0,!0))},m.intersection=function(e){for(var t=[],r=arguments.length,n=0,i=M(e);n<i;n++){var o=e[n];if(!m.contains(t,o)){for(var s=1;s<r&&m.contains(arguments[s],o);s++);s===r&&t.push(o)}}return t},m.difference=function(e){var t=k(arguments,!0,!0,1);return m.filter(e,function(e){return!m.contains(t,e)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(e){for(var t=e&&m.max(e,M).length||0,r=Array(t),n=0;n<t;n++)r[n]=m.pluck(e,n);return r},m.object=function(e,t){for(var r={},n=0,i=M(e);n<i;n++)t?r[e[n]]=t[n]:r[e[n][0]]=e[n][1];return r},m.findIndex=A(1),m.findLastIndex=A(-1),m.sortedIndex=function(e,t,r,n){for(var i=(r=v(r,n,1))(t),o=0,s=M(e);o<s;){var a=Math.floor((o+s)/2);r(e[a])<i?o=a+1:s=a}return o},m.indexOf=I(1,m.findIndex,m.sortedIndex),m.lastIndexOf=I(-1,m.findLastIndex),m.range=function(e,t,r){null==t&&(t=e||0,e=0),r=r||1;for(var n=Math.max(Math.ceil((t-e)/r),0),i=Array(n),o=0;o<n;o++,e+=r)i[o]=e;return i};var R=function(e,t,r,n,i){if(!(n instanceof t))return e.apply(r,i);var o=_(e.prototype),s=e.apply(o,i);return m.isObject(s)?s:o};m.bind=function(e,t){if(p&&e.bind===p)return p.apply(e,u.call(arguments,1));if(!m.isFunction(e))throw new TypeError("Bind must be called on a function");var r=u.call(arguments,2),n=function(){return R(e,n,t,this,r.concat(u.call(arguments)))};return n},m.partial=function(e){var t=u.call(arguments,1),r=function(){for(var n=0,i=t.length,o=Array(i),s=0;s<i;s++)o[s]=t[s]===m?arguments[n++]:t[s];for(;n<arguments.length;)o.push(arguments[n++]);return R(e,r,this,this,o)};return r},m.bindAll=function(e){var t,r,n=arguments.length;if(n<=1)throw new Error("bindAll must be passed function names");for(t=1;t<n;t++)e[r=arguments[t]]=m.bind(e[r],e);return e},m.memoize=function(e,t){var r=function(n){var i=r.cache,o=""+(t?t.apply(this,arguments):n);return m.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return r.cache={},r},m.delay=function(e,t){var r=u.call(arguments,2);return setTimeout(function(){return e.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(e,t,r){var n,i,o,s=null,a=0;r||(r={});var c=function(){a=!1===r.leading?0:m.now(),s=null,o=e.apply(n,i),s||(n=i=null)};return function(){var u=m.now();a||!1!==r.leading||(a=u);var f=t-(u-a);return n=this,i=arguments,f<=0||f>t?(s&&(clearTimeout(s),s=null),a=u,o=e.apply(n,i),s||(n=i=null)):s||!1===r.trailing||(s=setTimeout(c,f)),o}},m.debounce=function(e,t,r){var n,i,o,s,a,c=function(){var u=m.now()-s;u<t&&u>=0?n=setTimeout(c,t-u):(n=null,r||(a=e.apply(o,i),n||(o=i=null)))};return function(){o=this,i=arguments,s=m.now();var u=r&&!n;return n||(n=setTimeout(c,t)),u&&(a=e.apply(o,i),o=i=null),a}},m.wrap=function(e,t){return m.partial(t,e)},m.negate=function(e){return function(){return!e.apply(this,arguments)}},m.compose=function(){var e=arguments,t=e.length-1;return function(){for(var r=t,n=e[t].apply(this,arguments);r--;)n=e[r].call(this,n);return n}},m.after=function(e,t){return function(){if(--e<1)return t.apply(this,arguments)}},m.before=function(e,t){var r;return function(){return--e>0&&(r=t.apply(this,arguments)),e<=1&&(t=null),r}},m.once=m.partial(m.before,2);var T=!{toString:null}.propertyIsEnumerable("toString"),O=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];function B(e,t){var r=O.length,n=e.constructor,i=m.isFunction(n)&&n.prototype||s,o="constructor";for(m.has(e,o)&&!m.contains(t,o)&&t.push(o);r--;)(o=O[r])in e&&e[o]!==i[o]&&!m.contains(t,o)&&t.push(o)}m.keys=function(e){if(!m.isObject(e))return[];if(l)return l(e);var t=[];for(var r in e)m.has(e,r)&&t.push(r);return T&&B(e,t),t},m.allKeys=function(e){if(!m.isObject(e))return[];var t=[];for(var r in e)t.push(r);return T&&B(e,t),t},m.values=function(e){for(var t=m.keys(e),r=t.length,n=Array(r),i=0;i<r;i++)n[i]=e[t[i]];return n},m.mapObject=function(e,t,r){t=v(t,r);for(var n,i=m.keys(e),o=i.length,s={},a=0;a<o;a++)s[n=i[a]]=t(e[n],n,e);return s},m.pairs=function(e){for(var t=m.keys(e),r=t.length,n=Array(r),i=0;i<r;i++)n[i]=[t[i],e[t[i]]];return n},m.invert=function(e){for(var t={},r=m.keys(e),n=0,i=r.length;n<i;n++)t[e[r[n]]]=r[n];return t},m.functions=m.methods=function(e){var t=[];for(var r in e)m.isFunction(e[r])&&t.push(r);return t.sort()},m.extend=w(m.allKeys),m.extendOwn=m.assign=w(m.keys),m.findKey=function(e,t,r){t=v(t,r);for(var n,i=m.keys(e),o=0,s=i.length;o<s;o++)if(t(e[n=i[o]],n,e))return n},m.pick=function(e,t,r){var n,i,o={},s=e;if(null==s)return o;m.isFunction(t)?(i=m.allKeys(s),n=g(t,r)):(i=k(arguments,!1,!1,1),n=function(e,t,r){return t in r},s=Object(s));for(var a=0,c=i.length;a<c;a++){var u=i[a],f=s[u];n(f,u,s)&&(o[u]=f)}return o},m.omit=function(e,t,r){if(m.isFunction(t))t=m.negate(t);else{var n=m.map(k(arguments,!1,!1,1),String);t=function(e,t){return!m.contains(n,t)}}return m.pick(e,t,r)},m.defaults=w(m.allKeys,!0),m.create=function(e,t){var r=_(e);return t&&m.extendOwn(r,t),r},m.clone=function(e){return m.isObject(e)?m.isArray(e)?e.slice():m.extend({},e):e},m.tap=function(e,t){return t(e),e},m.isMatch=function(e,t){var r=m.keys(t),n=r.length;if(null==e)return!n;for(var i=Object(e),o=0;o<n;o++){var s=r[o];if(t[s]!==i[s]||!(s in i))return!1}return!0};var D=function(e,t,r,n){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return e===t;e instanceof m&&(e=e._wrapped),t instanceof m&&(t=t._wrapped);var i=f.call(e);if(i!==f.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var s=e.constructor,a=t.constructor;if(s!==a&&!(m.isFunction(s)&&s instanceof s&&m.isFunction(a)&&a instanceof a)&&"constructor"in e&&"constructor"in t)return!1}r=r||[],n=n||[];for(var c=r.length;c--;)if(r[c]===e)return n[c]===t;if(r.push(e),n.push(t),o){if((c=e.length)!==t.length)return!1;for(;c--;)if(!D(e[c],t[c],r,n))return!1}else{var u,h=m.keys(e);if(c=h.length,m.keys(t).length!==c)return!1;for(;c--;)if(u=h[c],!m.has(t,u)||!D(e[u],t[u],r,n))return!1}return r.pop(),n.pop(),!0};m.isEqual=function(e,t){return D(e,t)},m.isEmpty=function(e){return null==e||(E(e)&&(m.isArray(e)||m.isString(e)||m.isArguments(e))?0===e.length:0===m.keys(e).length)},m.isElement=function(e){return!(!e||1!==e.nodeType)},m.isArray=d||function(e){return"[object Array]"===f.call(e)},m.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){m["is"+e]=function(t){return f.call(t)==="[object "+e+"]"}}),m.isArguments(arguments)||(m.isArguments=function(e){return m.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(e){return"function"==typeof e||!1}),m.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},m.isNaN=function(e){return m.isNumber(e)&&e!==+e},m.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===f.call(e)},m.isNull=function(e){return null===e},m.isUndefined=function(e){return void 0===e},m.has=function(e,t){return null!=e&&h.call(e,t)},m.noConflict=function(){return r._=i,this},m.identity=function(e){return e},m.constant=function(e){return function(){return e}},m.noop=function(){},m.property=S,m.propertyOf=function(e){return null==e?function(){}:function(t){return e[t]}},m.matcher=m.matches=function(e){return e=m.extendOwn({},e),function(t){return m.isMatch(t,e)}},m.times=function(e,t,r){var n=Array(Math.max(0,e));t=g(t,r,1);for(var i=0;i<e;i++)n[i]=t(i);return n},m.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},m.now=Date.now||function(){return(new Date).getTime()};var q={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},H=m.invert(q),j=function(e){var t=function(t){return e[t]},r="(?:"+m.keys(e).join("|")+")",n=RegExp(r),i=RegExp(r,"g");return function(e){return e=null==e?"":""+e,n.test(e)?e.replace(i,t):e}};m.escape=j(q),m.unescape=j(H),m.result=function(e,t,r){var n=null==e?void 0:e[t];return void 0===n&&(n=r),m.isFunction(n)?n.call(e):n};var L=0;m.uniqueId=function(e){var t=++L+"";return e?e+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var U=/(.)^/,F={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},N=/\\|'|\r|\n|\u2028|\u2029/g,z=function(e){return"\\"+F[e]};m.template=function(e,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var n=RegExp([(t.escape||U).source,(t.interpolate||U).source,(t.evaluate||U).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(n,function(t,r,n,s,a){return o+=e.slice(i,a).replace(N,z),i=a+t.length,r?o+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":n?o+="'+\n((__t=("+n+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),t}),o+="';\n",t.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(t.variable||"obj","_",o)}catch(e){throw e.source=o,e}var a=function(e){return s.call(this,e,m)},c=t.variable||"obj";return a.source="function("+c+"){\n"+o+"}",a},m.chain=function(e){var t=m(e);return t._chain=!0,t};var K=function(e,t){return e._chain?m(t).chain():t};m.mixin=function(e){m.each(m.functions(e),function(t){var r=m[t]=e[t];m.prototype[t]=function(){var e=[this._wrapped];return c.apply(e,arguments),K(this,r.apply(m,e))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=o[e];m.prototype[e]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==e&&"splice"!==e||0!==r.length||delete r[0],K(this,r)}}),m.each(["concat","join","slice"],function(e){var t=o[e];m.prototype[e]=function(){return K(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},void 0===(n=function(){return m}.apply(t,[]))||(e.exports=n)}).call(this)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(13),i=r(67),o=r(1),s=r(69);class a{constructor(e,t,r,n,i){this.rangeById=e,this.rangeByInfo=t,this.orderedPartitionKeyRanges=r,this.orderedRanges=r.map(e=>new s.QueryRange(e[o.Constants.PartitionKeyRange.MinInclusive],e[o.Constants.PartitionKeyRange.MaxExclusive],!0,!1)),this.orderedPartitionInfo=n,this.collectionUniqueId=i}getOrderedParitionKeyRanges(){return this.orderedPartitionKeyRanges}getRangeByEffectivePartitionKey(e){if(o.Constants.EffectiveParitionKeyConstants.MinimumInclusiveEffectivePartitionKey===e)return this.orderedPartitionKeyRanges[0];if(o.Constants.EffectiveParitionKeyConstants.MaximumExclusiveEffectivePartitionKey===e)return;const t=this.orderedRanges.map(e=>({v:e.min,b:!e.isMinInclusive})),r=i.le(t,{v:e,b:!0},a._vbCompareFunction);return n.ok(r>=0,"error in collection routing map, queried partition key is less than the start range."),this.orderedPartitionKeyRanges[r]}static _vbCompareFunction(e,t){return e.v>t.v?1:e.v<t.v?-1:e.b>t.b?1:e.b<t.b?-1:0}getOverlappingRanges(e){const t=Array.isArray(e)?e:[e],r={},s=this.orderedRanges.map(e=>({v:e.min,b:!e.isMinInclusive})),c=this.orderedRanges.map(e=>({v:e.max,b:e.isMaxInclusive}));for(const e of t){if(e.isEmpty())continue;const t=i.le(s,{v:e.min,b:!e.isMinInclusive},a._vbCompareFunction);n.ok(t>=0,"error in collection routing map, queried value is less than the start range.");const u=i.ge(c,{v:e.max,b:e.isMaxInclusive},a._vbCompareFunction);n.ok(u<c.length,"error in collection routing map, queried value is greater than the end range.");for(let n=t;n<u+1;n++)e.overlaps(this.orderedRanges[n])&&(r[this.orderedPartitionKeyRanges[n][o.Constants.PartitionKeyRange.MinInclusive]]=this.orderedPartitionKeyRanges[n])}return Object.keys(r).map(e=>r[e]).sort(e=>e[o.Constants.PartitionKeyRange.MinInclusive])}}t.InMemoryCollectionRoutingMap=a},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(68),o=r(25),s=r(1);t.PartitionKeyRangeCache=class{constructor(e){this.clientContext=e,this.collectionRoutingMapByCollectionId={},this.sem=i(1)}onCollectionRoutingMap(e){return n(this,void 0,void 0,function*(){const t=s.Helper.getIdFromLink(e);let r=this.collectionRoutingMapByCollectionId[t];return void 0===r&&(r=yield new Promise((r,i)=>{this.sem.take(()=>n(this,void 0,void 0,function*(){let n=this.collectionRoutingMapByCollectionId[t];if(void 0===n)try{const{result:s}=yield this.clientContext.queryPartitionKeyRanges(e).toArray();n=o.CollectionRoutingMapFactory.createCompleteRoutingMap(s.map(e=>[e,!0]),t),this.collectionRoutingMapByCollectionId[t]=n,this.sem.leave(),r(n)}catch(e){this.sem.leave(),i(e)}else this.sem.leave(),i(new Error("Not yet implemented"))}))})),r})}getOverlappingRanges(e,t){return n(this,void 0,void 0,function*(){return(yield this.onCollectionRoutingMap(e)).getOverlappingRanges(t)})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(13),o=r(25),s=r(1);t.PARITIONKEYRANGE=s.Constants.PartitionKeyRange;class a{constructor(e){this.partitionKeyRangeCache=new o.PartitionKeyRangeCache(e)}static _secondRangeIsAfterFirstRange(e,t){return i.notEqual(e.max,void 0,"invalid arg"),i.notEqual(t.min,void 0,"invalid arg"),!(e.max>t.min)&&(e.max!==t.min||!e.isMaxInclusive||!t.isMinInclusive)}static _isSortedAndNonOverlapping(e){for(let t=1;t<e.length;t++){const r=e[t-1],n=e[t];if(!this._secondRangeIsAfterFirstRange(r,n))return!1}return!0}static _stringMax(e,t){return e>=t?e:t}static _stringCompare(e,t){return e===t?0:e>t?1:-1}static _subtractRange(e,r){const n=this._stringMax(r[t.PARITIONKEYRANGE.MaxExclusive],e.min),i=0===this._stringCompare(n,e.min)&&e.isMinInclusive;return new o.QueryRange(n,e.max,i,e.isMaxInclusive)}getOverlappingRanges(e,t){return n(this,void 0,void 0,function*(){if(!a._isSortedAndNonOverlapping(t))throw new Error("the list of ranges is not a non-overlapping sorted ranges");let r=[];if(0===t.length)return r;const n=yield this.partitionKeyRangeCache.onCollectionRoutingMap(e);let s=0,c=t[s];for(;;){if(c.isEmpty()){if(++s>=t.length)return r;c=t[s];continue}let e;e=r.length>0?a._subtractRange(c,r[r.length-1]):c;const u=n.getOverlappingRanges(e);i.ok(u.length>0,`error: returned overlapping ranges for queryRange ${e} is empty`),r=r.concat(u);const f=o.QueryRange.parsePartitionKeyRange(r[r.length-1]);if(i.notEqual(f,void 0),i.ok(a._stringCompare(c.max,f.max)<=0,`error: returned overlapping ranges ${u}                     does not contain the requested range ${e}`),++s>=t.length)return r;for(c=t[s];a._stringCompare(c.max,f.max)<=0;){if(++s>=t.length)return r;c=t[s]}}})}}t.SmartRoutingMapProvider=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(12),i=r(25);t.ParallelQueryExecutionContext=class extends n.ParallelQueryExecutionContextBase{constructor(e,t,r,n,i){super(e,t,r,n,i)}documentProducerComparator(e,t){const r=e.getTargetParitionKeyRange().minInclusive,n=t.getTargetParitionKeyRange().minInclusive;return r===n?0:r>n?1:-1}_buildContinuationTokenFrom(e){if(e.allFetched&&0===e.peekBufferedItems().length)return;const t={min:e.targetPartitionKeyRange[i.PARITIONKEYRANGE.MinInclusive],max:e.targetPartitionKeyRange[i.PARITIONKEYRANGE.MaxExclusive],id:e.targetPartitionKeyRange.id};return{token:(e=>e||(null===e||void 0===e?null:void 0))(e.peekBufferedItems().length>0?e.previousContinuationToken:e.continuationToken),range:t}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(12);t.OrderByQueryExecutionContext=class extends n.ParallelQueryExecutionContextBase{constructor(e,t,r,i,o){super(e,t,r,i,o),this.orderByComparator=new n.OrderByDocumentProducerComparator(this.sortOrders)}documentProducerComparator(e,t){return this.orderByComparator.compare(e,t)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(12),o=r(65);class s{constructor(e,t,r,n,a){this.clientContext=e,this.collectionLink=t,this.query=r,this.options=n,this.partitionedQueryExecutionInfo=a,this.endpoint=null,this.pageSize=n.maxItemCount,void 0===this.pageSize&&(this.pageSize=s.DEFAULT_PAGE_SIZE);const c=i.PartitionedQueryExecutionContextInfoParser.parseOrderBy(a);Array.isArray(c)&&c.length>0?this.endpoint=new o.OrderByEndpointComponent(new i.OrderByQueryExecutionContext(this.clientContext,this.collectionLink,this.query,this.options,this.partitionedQueryExecutionInfo)):this.endpoint=new i.ParallelQueryExecutionContext(this.clientContext,this.collectionLink,this.query,this.options,this.partitionedQueryExecutionInfo);const u=i.PartitionedQueryExecutionContextInfoParser.parseAggregates(a);Array.isArray(u)&&u.length>0&&(this.endpoint=new o.AggregateEndpointComponent(this.endpoint,u));const f=i.PartitionedQueryExecutionContextInfoParser.parseTop(a);"number"==typeof f&&(this.endpoint=new o.TopEndpointComponent(this.endpoint,f))}nextItem(){return n(this,void 0,void 0,function*(){return this.endpoint.nextItem()})}current(){return n(this,void 0,void 0,function*(){return this.endpoint.current()})}hasMoreResults(){return this.endpoint.hasMoreResults()}fetchMore(){return n(this,void 0,void 0,function*(){return"function"==typeof this.endpoint.fetchMore?this.endpoint.fetchMore():(this.fetchBuffer=[],this.fetchMoreRespHeaders=i.HeaderUtils.getInitialHeader(),this._fetchMoreImplementation())})}_fetchMoreImplementation(){return n(this,void 0,void 0,function*(){try{const{result:e,headers:t}=yield this.endpoint.nextItem();if(i.HeaderUtils.mergeHeaders(this.fetchMoreRespHeaders,t),void 0===e){if(0===this.fetchBuffer.length)return{result:void 0,headers:this.fetchMoreRespHeaders};{const e=this.fetchBuffer;return this.fetchBuffer=[],{result:e,headers:this.fetchMoreRespHeaders}}}if(this.fetchBuffer.push(e),this.fetchBuffer.length>=this.pageSize){const e=this.fetchBuffer.slice(0,this.pageSize);return this.fetchBuffer=this.fetchBuffer.splice(this.pageSize),{result:e,headers:this.fetchMoreRespHeaders}}return this._fetchMoreImplementation()}catch(e){if(i.HeaderUtils.mergeHeaders(this.fetchMoreRespHeaders,e.headers),e.headers=this.fetchMoreRespHeaders,e)throw e}})}}s.DEFAULT_PAGE_SIZE=10,t.PipelinedQueryExecutionContext=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(13),o=r(12),s=r(1);t.ProxyQueryExecutionContext=class{constructor(e,t,r,n,i){this.clientContext=e,this.query=t,this.options=r,this.fetchFunctions=n,this.resourceLink=i,this.query=t,this.fetchFunctions=n,this.options=JSON.parse(JSON.stringify(r||{})),this.resourceLink=i,this.queryExecutionContext=new o.DefaultQueryExecutionContext(this.clientContext,this.query,this.options,this.fetchFunctions)}nextItem(){return n(this,void 0,void 0,function*(){try{return yield this.queryExecutionContext.nextItem()}catch(e){if(!this._hasPartitionedExecutionInfo(e))throw e;{const t=this._getParitionedExecutionInfo(e);this.queryExecutionContext=this._createPipelinedExecutionContext(t);try{return this.nextItem()}catch(e){throw e}}}})}_createPipelinedExecutionContext(e){i.notStrictEqual(this.resourceLink,void 0,"for top/orderby resourceLink is required."),i.ok(!Array.isArray(this.resourceLink)||1===this.resourceLink.length,"for top/orderby exactly one collectionLink is required");const t=Array.isArray(this.resourceLink)?this.resourceLink[0]:this.resourceLink;return new o.PipelinedQueryExecutionContext(this.clientContext,t,this.query,this.options,e)}current(){return n(this,void 0,void 0,function*(){try{return yield this.queryExecutionContext.current()}catch(e){if(!this._hasPartitionedExecutionInfo(e))throw e;{const t=this._getParitionedExecutionInfo(e);this.queryExecutionContext=this._createPipelinedExecutionContext(t);try{return this.current()}catch(e){throw e}}}})}hasMoreResults(){return this.queryExecutionContext.hasMoreResults()}fetchMore(){return n(this,void 0,void 0,function*(){try{return yield this.queryExecutionContext.fetchMore()}catch(e){if(!this._hasPartitionedExecutionInfo(e))throw e;{const t=this._getParitionedExecutionInfo(e);this.queryExecutionContext=this._createPipelinedExecutionContext(t);try{return this.queryExecutionContext.fetchMore()}catch(e){throw e}}}})}_hasPartitionedExecutionInfo(e){return e.code===s.StatusCodes.BadRequest&&"substatus"in e&&e.substatus===s.SubStatusCodes.CrossPartitionQueryNotServable}_getParitionedExecutionInfo(e){return JSON.parse(JSON.parse(e.body).additionalErrorInfo)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(44),o=r(200),s=r(18),a=r(32),c=r(80),u=r(97),f=r(216),h=r(1),d=r(17),l=r(303);t.CosmosClient=class{constructor(e){this.options=e,e.auth=e.auth||{},e.connectionPolicy=e.connectionPolicy||new d.ConnectionPolicy,e.defaultHeaders=e.defaultHeaders||{},e.defaultHeaders[a.Constants.HttpHeaders.CacheControl]="no-cache",e.defaultHeaders[a.Constants.HttpHeaders.Version]=a.Constants.CurrentVersion,void 0!==e.consistencyLevel&&(e.defaultHeaders[a.Constants.HttpHeaders.ConsistencyLevel]=e.consistencyLevel);const t=h.Platform.getPlatformDefaultHeaders()||{};for(const r of Object.keys(t))e.defaultHeaders[r]=t[r];if(e.defaultHeaders[a.Constants.HttpHeaders.UserAgent]=h.Platform.getUserAgent(),!this.options.agent){const e={keepAlive:!0,maxSockets:256,maxFreeSockets:256};if(this.options.connectionPolicy.ProxyUrl){const t=s.parse(this.options.connectionPolicy.ProxyUrl),r=parseInt(t.port,10);e.proxy={host:t.hostname,port:r,headers:{}},t.auth&&(e.proxy.proxyAuth=t.auth),this.options.agent="https:"===t.protocol.toLowerCase()?o.httpsOverHttps(e):o.httpsOverHttp(e)}else this.options.agent=new i.Agent(e)}const r=new l.GlobalEndpointManager(this.options,e=>n(this,void 0,void 0,function*(){return this.getDatabaseAccount(e)}));this.clientContext=new f.ClientContext(e,r),this.databases=new c.Databases(this,this.clientContext),this.offers=new u.Offers(this,this.clientContext)}getDatabaseAccount(e){return n(this,void 0,void 0,function*(){const t=yield this.clientContext.getDatabaseAccount(e);return{body:t.result,headers:t.headers,ref:this}})}database(e){return new c.Database(this,e,this.clientContext)}offer(e){return new u.Offer(this,e,this.clientContext)}}},function(e,t,r){(function(t,n,i){var o=r(70),s=r(0),a=r(71),c=r(72),u=r(197),f=a.IncomingMessage,h=a.readyStates;var d=e.exports=function(e){var r,n=this;c.Writable.call(n),n._opts=e,n._body=[],n._headers={},e.auth&&n.setHeader("Authorization","Basic "+new t(e.auth).toString("base64")),Object.keys(e.headers).forEach(function(t){n.setHeader(t,e.headers[t])});var i=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!o.abortController)i=!1,r=!0;else if("prefer-streaming"===e.mode)r=!1;else if("allow-wrong-content-type"===e.mode)r=!o.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");r=!0}n._mode=function(e,t){return o.fetch&&t?"fetch":o.mozchunkedarraybuffer?"moz-chunked-arraybuffer":o.msstream?"ms-stream":o.arraybuffer&&e?"arraybuffer":o.vbArray&&e?"text:vbarray":"text"}(r,i),n._fetchTimer=null,n.on("finish",function(){n._onFinish()})};s(d,c.Writable),d.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===l.indexOf(r)&&(this._headers[r]={name:e,value:t})},d.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},d.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},d.prototype._onFinish=function(){var e=this;if(!e._destroyed){var r=e._opts,s=e._headers,a=null;"GET"!==r.method&&"HEAD"!==r.method&&(a=o.arraybuffer?u(t.concat(e._body)):o.blobConstructor?new n.Blob(e._body.map(function(e){return u(e)}),{type:(s["content-type"]||{}).value||""}):t.concat(e._body).toString());var c=[];if(Object.keys(s).forEach(function(e){var t=s[e].name,r=s[e].value;Array.isArray(r)?r.forEach(function(e){c.push([t,e])}):c.push([t,r])}),"fetch"===e._mode){var f=null;if(o.abortController){var d=new AbortController;f=d.signal,e._fetchAbortController=d,"requestTimeout"in r&&0!==r.requestTimeout&&(e._fetchTimer=n.setTimeout(function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()},r.requestTimeout))}n.fetch(e._opts.url,{method:e._opts.method,headers:c,body:a||void 0,mode:"cors",credentials:r.withCredentials?"include":"same-origin",signal:f}).then(function(t){e._fetchResponse=t,e._connect()},function(t){n.clearTimeout(e._fetchTimer),e._destroyed||e.emit("error",t)})}else{var l=e._xhr=new n.XMLHttpRequest;try{l.open(e._opts.method,e._opts.url,!0)}catch(t){return void i.nextTick(function(){e.emit("error",t)})}"responseType"in l&&(l.responseType=e._mode.split(":")[0]),"withCredentials"in l&&(l.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in l&&l.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in r&&(l.timeout=r.requestTimeout,l.ontimeout=function(){e.emit("requestTimeout")}),c.forEach(function(e){l.setRequestHeader(e[0],e[1])}),e._response=null,l.onreadystatechange=function(){switch(l.readyState){case h.LOADING:case h.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(l.onprogress=function(){e._onXHRProgress()}),l.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{l.send(a)}catch(t){return void i.nextTick(function(){e.emit("error",t)})}}}},d.prototype._onXHRProgress=function(){(function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},d.prototype._connect=function(){var e=this;e._destroyed||(e._response=new f(e._xhr,e._fetchResponse,e._mode,e._fetchTimer),e._response.on("error",function(t){e.emit("error",t)}),e.emit("response",e._response))},d.prototype._write=function(e,t,r){this._body.push(e),r()},d.prototype.abort=d.prototype.destroy=function(){this._destroyed=!0,n.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},d.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),c.Writable.prototype.end.call(this,e,t,r)},d.prototype.flushHeaders=function(){},d.prototype.setTimeout=function(){},d.prototype.setNoDelay=function(){},d.prototype.setSocketKeepAlive=function(){};var l=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,r(2).Buffer,r(5),r(6))},function(e,t){},function(e,t,r){"use strict";var n=r(3).Buffer,i=r(194);function o(e,t,r){e.copy(t,r)}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t=n.allocUnsafe(e>>>0),r=this.head,i=0;r;)o(r.data,t,i),i+=r.data.length,r=r.next;return t},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i=1,o={},s=!1,a=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick(function(){f(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?function(){var t="setImmediate$"+Math.random()+"$",r=function(r){r.source===e&&"string"==typeof r.data&&0===r.data.indexOf(t)&&f(+r.data.slice(t.length))};e.addEventListener?e.addEventListener("message",r,!1):e.attachEvent("onmessage",r),n=function(r){e.postMessage(t+r,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){f(e.data)},n=function(t){e.port2.postMessage(t)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var e=a.documentElement;n=function(t){var r=a.createElement("script");r.onreadystatechange=function(){f(t),r.onreadystatechange=null,e.removeChild(r),r=null},e.appendChild(r)}}():n=function(e){setTimeout(f,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var s={callback:e,args:t};return o[i]=s,n(i),i++},c.clearImmediate=u}function u(e){delete o[e]}function f(e){if(s)setTimeout(f,0,e);else{var t=o[e];if(t){s=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{u(e),s=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(5),r(6))},function(e,t,r){"use strict";e.exports=o;var n=r(79),i=r(10);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}i.inherits=r(0),i.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){var n=r(2).Buffer;e.exports=function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(n.isBuffer(e)){for(var t=new Uint8Array(e.length),r=e.length,i=0;i<r;i++)t[i]=e[i];return t.buffer}throw new Error("Argument must be a Buffer")}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var n=arguments[t];for(var i in n)r.call(n,i)&&(e[i]=n[i])}return e};var r=Object.prototype.hasOwnProperty},function(e,t){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,t,r){e.exports=r(201)},function(e,t,r){"use strict";(function(e,n){r(202);var i,o=r(203),s=r(45),a=r(44),c=r(19),u=r(13),f=r(24);function h(e){var t=this;t.options=e||{},t.proxyOptions=t.options.proxy||{},t.maxSockets=t.options.maxSockets||s.Agent.defaultMaxSockets,t.requests=[],t.sockets=[],t.on("free",function(e,r,n,i){for(var o=l(r,n,i),s=0,a=t.requests.length;s<a;++s){var c=t.requests[s];if(c.host===o.host&&c.port===o.port)return t.requests.splice(s,1),void c.request.onSocket(e)}e.destroy(),t.removeSocket(e)})}function d(e,t){var r=this;h.prototype.createSocket.call(r,e,function(n){var i=e.request.getHeader("host"),s=p({},r.options,{socket:n,servername:i?i.replace(/:.*$/,""):e.host}),a=o.connect(0,s);r.sockets[r.sockets.indexOf(n)]=a,t(a)})}function l(e,t,r){return"string"==typeof e?{host:e,port:t,localAddress:r}:e}function p(e){for(var t=1,r=arguments.length;t<r;++t){var n=arguments[t];if("object"==typeof n)for(var i=Object.keys(n),o=0,s=i.length;o<s;++o){var a=i[o];void 0!==n[a]&&(e[a]=n[a])}}return e}t.httpOverHttp=function(e){var t=new h(e);return t.request=s.request,t},t.httpsOverHttp=function(e){var t=new h(e);return t.request=s.request,t.createSocket=d,t},t.httpOverHttps=function(e){var t=new h(e);return t.request=a.request,t},t.httpsOverHttps=function(e){var t=new h(e);return t.request=a.request,t.createSocket=d,t},f.inherits(h,c.EventEmitter),h.prototype.addRequest=function(e,t,r,n){var i=this,o=p({request:e},i.options,l(t,r,n));i.sockets.length>=this.maxSockets?i.requests.push(o):i.createSocket(o,function(t){function r(){i.emit("free",t,o)}function n(e){i.removeSocket(t),t.removeListener("free",r),t.removeListener("close",n),t.removeListener("agentRemove",n)}t.on("free",r),t.on("close",n),t.on("agentRemove",n),e.onSocket(t)})},h.prototype.createSocket=function(t,r){var o=this,s={};o.sockets.push(s);var a=p({},o.proxyOptions,{method:"CONNECT",path:t.host+":"+t.port,agent:!1});a.proxyAuth&&(a.headers=a.headers||{},a.headers["Proxy-Authorization"]="Basic "+new e(a.proxyAuth).toString("base64")),i("making CONNECT request");var c=o.request(a);function f(e,n,a){if(c.removeAllListeners(),n.removeAllListeners(),200===e.statusCode)u.equal(a.length,0),i("tunneling connection has established"),o.sockets[o.sockets.indexOf(s)]=n,r(n);else{i("tunneling socket could not be established, statusCode=%d",e.statusCode),n.destroy();var f=new Error("tunneling socket could not be established, statusCode="+e.statusCode);f.code="ECONNRESET",t.request.emit("error",f),o.removeSocket(s)}}c.useChunkedEncodingByDefault=!1,c.once("response",function(e){e.upgrade=!0}),c.once("upgrade",function(e,t,r){n.nextTick(function(){f(e,t,r)})}),c.once("connect",f),c.once("error",function(e){c.removeAllListeners(),i("tunneling socket could not be established, cause=%s\n",e.message,e.stack);var r=new Error("tunneling socket could not be established, cause="+e.message);r.code="ECONNRESET",t.request.emit("error",r),o.removeSocket(s)}),c.end()},h.prototype.removeSocket=function(e){var t=this.sockets.indexOf(e);if(-1!==t){this.sockets.splice(t,1);var r=this.requests.shift();r&&this.createSocket(r,function(e){r.request.onSocket(e)})}},i=n.env.NODE_DEBUG&&/\btunnel\b/.test(n.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments);"string"==typeof e[0]?e[0]="TUNNEL: "+e[0]:e.unshift("TUNNEL:"),console.error.apply(console,e)}:function(){},t.debug=i}).call(this,r(2).Buffer,r(6))},function(e,t){t.createServer=t.createConnection=t.connect=function(){},t.isIP=t.isIPv4=t.isIPv6=function(){return!0}},function(e,t){},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.Conflict=class{constructor(e,t,r){this.container=e,this.id=t,this.clientContext=r}get url(){return`/${this.container.url}/${i.Constants.Path.ConflictsPathSegment}/${this.id}`}read(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.read(t,"users",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,conflict:this}})}delete(e){return n(this,void 0,void 0,function*(){const t=i.Helper.getPathFromLink(this.url),r=i.Helper.getIdFromLink(this.url),n=yield this.clientContext.delete(t,"conflicts",r,void 0,e);return{body:n.result,headers:n.headers,ref:this,conflict:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1),i=r(9);t.Conflicts=class{constructor(e,t){this.container=e,this.clientContext=t}query(e,t){const r=n.Helper.getPathFromLink(this.container.url),o=n.Helper.getIdFromLink(this.container.url);return new i.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"conflicts",o,e=>e.Conflicts,e,t))}readAll(e){return this.query(void 0,e)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(86);t.Items=class{constructor(e,t){this.container=e,this.clientContext=t}query(e,t){const r=i.Helper.getPathFromLink(this.container.url,"docs"),n=i.Helper.getIdFromLink(this.container.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"docs",n,e=>e?e.Documents:[],e,t),this.container.url)}readAll(e){return this.query(void 0,e)}create(e,t={}){return n(this,void 0,void 0,function*(){if(void 0===t.partitionKey&&!0!==t.skipGetPartitionKeyDefinition){const{body:r}=yield this.container.getPartitionKeyDefinition();t.partitionKey=this.container.extractPartitionKey(e,r)}void 0!==e.id&&""!==e.id||t.disableAutomaticIdGeneration||(e.id=i.Helper.generateGuidId());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"docs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.create(e,n,"docs",o,void 0,t),c=new s.Item(this.container,a.result.id,t&&t.partitionKey,this.clientContext);return{body:a.result,headers:a.headers,ref:c,item:c}})}upsert(e,t={}){return n(this,void 0,void 0,function*(){if(void 0===t.partitionKey&&!0!==t.skipGetPartitionKeyDefinition){const{body:r}=yield this.container.getPartitionKeyDefinition();t.partitionKey=this.container.extractPartitionKey(e,r)}void 0!==e.id&&""!==e.id||t.disableAutomaticIdGeneration||(e.id=i.Helper.generateGuidId());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"docs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.upsert(e,n,"docs",o,void 0,t),c=new s.Item(this.container,a.result.id,t&&t.partitionKey,this.clientContext);return{body:a.result,headers:a.headers,ref:c,item:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(88);t.StoredProcedures=class{constructor(e,t){this.container=e,this.clientContext=t}query(e,t){const r=i.Helper.getPathFromLink(this.container.url,"sprocs"),n=i.Helper.getIdFromLink(this.container.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"sprocs",n,e=>e.StoredProcedures,e,t))}readAll(e){return this.query(void 0,e)}create(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"sprocs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.create(e,n,"sprocs",o,void 0,t),c=new s.StoredProcedure(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,storedProcedure:c,sproc:c}})}upsert(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"sprocs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.upsert(e,n,"sprocs",o,void 0,t),c=new s.StoredProcedure(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,storedProcedure:c,sproc:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(90);t.Triggers=class{constructor(e,t){this.container=e,this.clientContext=t,this.client=this.container.database.client}query(e,t){const r=i.Helper.getPathFromLink(this.container.url,"triggers"),n=i.Helper.getIdFromLink(this.container.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"triggers",n,e=>e.Triggers,e,t))}readAll(e){return this.query(void 0,e)}create(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"triggers"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.create(e,n,"triggers",o,void 0,t),c=new s.Trigger(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,trigger:c}})}upsert(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"triggers"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.upsert(e,n,"triggers",o,void 0,t),c=new s.Trigger(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,trigger:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(92);t.UserDefinedFunctions=class{constructor(e,t){this.container=e,this.clientContext=t,this.client=this.container.database.client}query(e,t){const r=i.Helper.getPathFromLink(this.container.url,"udfs"),n=i.Helper.getIdFromLink(this.container.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"udfs",n,e=>e.UserDefinedFunctions,e,t))}readAll(e){return this.query(void 0,e)}create(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"udfs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.create(e,n,"udfs",o,void 0,t),c=new s.UserDefinedFunction(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,userDefinedFunction:c,udf:c}})}upsert(e,t){return n(this,void 0,void 0,function*(){e.body&&(e.body=e.body.toString());const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.container.url,"udfs"),o=i.Helper.getIdFromLink(this.container.url),a=yield this.clientContext.upsert(e,n,"udfs",o,void 0,t),c=new s.UserDefinedFunction(this.container,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,userDefinedFunction:c,udf:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(12),s=r(9),a=r(83);t.Containers=class{constructor(e,t){this.database=e,this.clientContext=t}query(e,t){const r=i.Helper.getPathFromLink(this.database.url,"colls"),n=i.Helper.getIdFromLink(this.database.url);return new s.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"colls",n,e=>e.DocumentCollections,e,t))}create(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.database.url,"colls"),o=i.Helper.getIdFromLink(this.database.url),s=yield this.clientContext.create(e,n,"colls",o,void 0,t),c=new a.Container(this.database,s.result.id,this.clientContext);return{body:s.result,headers:s.headers,ref:c,container:c}})}createIfNotExists(e,t){return n(this,void 0,void 0,function*(){if(!e||null===e.id||void 0===e.id)throw new Error("body parameter must be an object with an id property");try{return yield this.database.container(e.id).read(t)}catch(r){if(r.code===i.StatusCodes.NotFound){const n=yield this.create(e,t);return o.HeaderUtils.mergeHeaders(n.headers,r.headers),n}throw r}})}readAll(e){return this.query(void 0,e)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(96);t.Permissions=class{constructor(e,t){this.user=e,this.clientContext=t}query(e,t){const r=i.Helper.getPathFromLink(this.user.url,"permissions"),n=i.Helper.getIdFromLink(this.user.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"permissions",n,e=>e.Permissions,e,t))}readAll(e){return this.query(void 0,e)}create(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.user.url,"permissions"),o=i.Helper.getIdFromLink(this.user.url),a=yield this.clientContext.create(e,n,"permissions",o,void 0,t),c=new s.Permission(this.user,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,permission:c}})}upsert(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.user.url,"permissions"),o=i.Helper.getIdFromLink(this.user.url),a=yield this.clientContext.upsert(e,n,"permissions",o,void 0,t),c=new s.Permission(this.user,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,permission:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(9),s=r(94);t.Users=class{constructor(e,t){this.database=e,this.clientContext=t,this.client=this.database.client}query(e,t){const r=i.Helper.getPathFromLink(this.database.url,"users"),n=i.Helper.getIdFromLink(this.database.url);return new o.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed(r,"users",n,e=>e.Users,e,t))}readAll(e){return this.query(void 0,e)}create(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.database.url,"users"),o=i.Helper.getIdFromLink(this.database.url),a=yield this.clientContext.create(e,n,"users",o,void 0,t),c=new s.User(this.database,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,user:c}})}upsert(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=i.Helper.getPathFromLink(this.database.url,"users"),o=i.Helper.getIdFromLink(this.database.url),a=yield this.clientContext.upsert(e,n,"users",o,void 0,t),c=new s.User(this.database,a.result.id,this.clientContext);return{body:a.result,headers:a.headers,ref:c,user:c}})}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1),o=r(12),s=r(9),a=r(81);t.Databases=class{constructor(e,t){this.client=e,this.clientContext=t}query(e,t){return new s.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed("/dbs","dbs","",e=>e.Databases,e,t))}create(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=yield this.clientContext.create(e,"/dbs","dbs",void 0,void 0,t),o=new a.Database(this.client,e.id,this.clientContext);return{body:n.result,headers:n.headers,ref:o,database:o}})}createIfNotExists(e,t){return n(this,void 0,void 0,function*(){if(!e||null===e.id||void 0===e.id)throw new Error("body parameter must be an object with an id property");try{return yield this.client.database(e.id).read(t)}catch(r){if(r.code===i.StatusCodes.NotFound){const n=yield this.create(e,t);return o.HeaderUtils.mergeHeaders(n.headers,r.headers),n}throw r}})}readAll(e){return this.query(void 0,e)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);t.Offer=class{constructor(e,t,r){this.client=e,this.id=t,this.clientContext=r}get url(){return`/${i.Constants.Path.OffersPathSegment}/${this.id}`}read(e){return n(this,void 0,void 0,function*(){const t=yield this.clientContext.read(this.url,"offers",this.id,void 0,e);return{body:t.result,headers:t.headers,ref:this,offer:this}})}replace(e,t){return n(this,void 0,void 0,function*(){const r={};if(!i.Helper.isResourceValid(e,r))throw r;const n=yield this.clientContext.replace(e,this.url,"offers",this.id,void 0,t);return{body:n.result,headers:n.headers,ref:this,offer:this}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(9);t.Offers=class{constructor(e,t){this.client=e,this.clientContext=t}query(e,t){return new n.QueryIterator(this.clientContext,e,t,t=>this.clientContext.queryFeed("/offers","offers","",e=>e.Offers,e,t))}readAll(e){return this.query(void 0,e)}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(32),o=r(1),s=r(17),a=r(217),c=r(98),u=r(302);t.ClientContext=class{constructor(e,t){this.cosmosClientOptions=e,this.globalEndpointManager=t,this.connectionPolicy=e.connectionPolicy||new s.ConnectionPolicy,this.sessionContainer=new u.SessionContainer(e.endpoint),this.requestHandler=new a.RequestHandler(t,this.connectionPolicy,this.cosmosClientOptions.agent),this.partitionKeyDefinitionCache={}}read(e,t,r,o,s){return n(this,void 0,void 0,function*(){try{const n=yield c.getHeaders(this.cosmosClientOptions.auth,Object.assign({},o,this.cosmosClientOptions.defaultHeaders,s&&s.initialHeaders),"get",e,r,t,s);this.applySessionToken(e,n);const a={path:e,operationType:i.Constants.OperationTypes.Read,client:this,endpointOverride:null},u=yield this.globalEndpointManager.getReadEndpoint(),f=yield this.requestHandler.get(u,a,n);return this.captureSessionToken(void 0,e,i.Constants.OperationTypes.Read,f.headers),f}catch(t){throw this.captureSessionToken(t,e,i.Constants.OperationTypes.Upsert,t.headers),t}})}queryFeed(e,t,r,o,a,u,f){return n(this,void 0,void 0,function*(){const n=yield this.globalEndpointManager.getReadEndpoint(),h={path:e,operationType:i.Constants.OperationTypes.Query,client:this,endpointOverride:null},d=Object.assign({},this.cosmosClientOptions.defaultHeaders,u&&u.initialHeaders);if(void 0===a){const s=yield c.getHeaders(this.cosmosClientOptions.auth,d,"get",e,r,t,u,f);this.applySessionToken(e,s);const{result:l,headers:p}=yield this.requestHandler.get(n,h,s);return this.captureSessionToken(void 0,e,i.Constants.OperationTypes.Query,p),this.processQueryFeedResponse({result:l,headers:p},!!a,o)}{switch(d[i.Constants.HttpHeaders.IsQuery]="true",this.cosmosClientOptions.queryCompatibilityMode){case s.QueryCompatibilityMode.SqlQuery:d[i.Constants.HttpHeaders.ContentType]=i.Constants.MediaTypes.SQL;break;case s.QueryCompatibilityMode.Query:case s.QueryCompatibilityMode.Default:default:"string"==typeof a&&(a={query:a}),d[i.Constants.HttpHeaders.ContentType]=i.Constants.MediaTypes.QueryJson}const l=yield c.getHeaders(this.cosmosClientOptions.auth,d,"post",e,r,t,u,f);this.applySessionToken(e,l);const p=yield this.requestHandler.post(n,h,a,l),{result:b,headers:y}=p;return this.captureSessionToken(void 0,e,i.Constants.OperationTypes.Query,y),this.processQueryFeedResponse({result:b,headers:y},!!a,o)}})}queryPartitionKeyRanges(e,t,r){const n=o.Helper.getPathFromLink(e,"pkranges"),s=o.Helper.getIdFromLink(e);return new i.QueryIterator(this,t,r,e=>this.queryFeed(n,"pkranges",s,e=>e.PartitionKeyRanges,t,e))}delete(e,t,r,s,a){return n(this,void 0,void 0,function*(){try{const n=yield c.getHeaders(this.cosmosClientOptions.auth,Object.assign({},s,this.cosmosClientOptions.defaultHeaders,a&&a.initialHeaders),"delete",e,r,t,a);this.applySessionToken(e,n);const u=yield this.globalEndpointManager.getWriteEndpoint(),f=yield this.requestHandler.delete(u,e,n);return"colls"!==o.Helper.parseLink(e).type?this.captureSessionToken(void 0,e,i.Constants.OperationTypes.Delete,f.headers):this.clearSessionToken(e),f}catch(t){throw this.captureSessionToken(t,e,i.Constants.OperationTypes.Upsert,t.headers),t}})}create(e,t,r,o,s,a){return n(this,void 0,void 0,function*(){try{const n=yield c.getHeaders(this.cosmosClientOptions.auth,Object.assign({},s,this.cosmosClientOptions.defaultHeaders,a&&a.initialHeaders),"post",t,o,r,a);this.applySessionToken(t,n);const u=yield this.globalEndpointManager.getWriteEndpoint(),f=yield this.requestHandler.post(u,t,e,n);return this.captureSessionToken(void 0,t,i.Constants.OperationTypes.Create,f.headers),f}catch(e){throw this.captureSessionToken(e,t,i.Constants.OperationTypes.Upsert,e.headers),e}})}processQueryFeedResponse(e,t,r){return t?{result:r(e.result),headers:e.headers}:{result:r(e.result).map(e=>e),headers:e.headers}}applySessionToken(e,t){const r=this.getSessionParams(e);if((!t||!t[i.Constants.HttpHeaders.SessionToken])&&t[i.Constants.HttpHeaders.ConsistencyLevel]&&r.resourceAddress){const e=this.sessionContainer.resolveGlobalSessionToken(r);""!==e&&(t[i.Constants.HttpHeaders.SessionToken]=e)}}replace(e,t,r,o,s,a){return n(this,void 0,void 0,function*(){try{const n=yield c.getHeaders(this.cosmosClientOptions.auth,Object.assign({},s,this.cosmosClientOptions.defaultHeaders,a&&a.initialHeaders),"put",t,o,r,a);this.applySessionToken(t,n);const u=yield this.globalEndpointManager.getWriteEndpoint(),f=yield this.requestHandler.put(u,t,e,n);return this.captureSessionToken(void 0,t,i.Constants.OperationTypes.Replace,f.headers),f}catch(e){throw this.captureSessionToken(e,t,i.Constants.OperationTypes.Upsert,e.headers),e}})}upsert(e,t,r,s,a,u){return n(this,void 0,void 0,function*(){try{const n=yield c.getHeaders(this.cosmosClientOptions.auth,Object.assign({},a,this.cosmosClientOptions.defaultHeaders,u&&u.initialHeaders),"post",t,s,r,u);o.Helper.setIsUpsertHeader(n),this.applySessionToken(t,n);const f=yield this.globalEndpointManager.getWriteEndpoint(),h=yield this.requestHandler.post(f,t,e,n);return this.captureSessionToken(void 0,t,i.Constants.OperationTypes.Upsert,h.headers),h}catch(e){throw this.captureSessionToken(e,t,i.Constants.OperationTypes.Upsert,e.headers),e}})}execute(e,t,r){return n(this,void 0,void 0,function*(){const n=Object.assign({},this.cosmosClientOptions.defaultHeaders,r&&r.initialHeaders);null===t||void 0===t||Array.isArray(t)||(t=[t]);const i=o.Helper.getPathFromLink(e),s=o.Helper.getIdFromLink(e),a=yield c.getHeaders(this.cosmosClientOptions.auth,n,"post",i,s,"sprocs",r),u=yield this.globalEndpointManager.getWriteEndpoint();return this.requestHandler.post(u,i,t,a)})}getDatabaseAccount(e={}){return n(this,void 0,void 0,function*(){const t=e.urlConnection||this.cosmosClientOptions.endpoint,r=yield c.getHeaders(this.cosmosClientOptions.auth,this.cosmosClientOptions.defaultHeaders,"get","","","",{}),{result:n,headers:o}=yield this.requestHandler.get(t,"",r),a=new s.DatabaseAccount;return a.DatabasesLink="/dbs/",a.MediaLink="/media/",a.MaxMediaStorageUsageInMB=o[i.Constants.HttpHeaders.MaxMediaStorageUsageInMB],a.CurrentMediaStorageUsageInMB=o[i.Constants.HttpHeaders.CurrentMediaStorageUsageInMB],a.ConsistencyPolicy=n.userConsistencyPolicy,i.Constants.WritableLocations in n&&"localhost"!==n.id&&(a._writableLocations=n[i.Constants.WritableLocations]),i.Constants.ReadableLocations in n&&"localhost"!==n.id&&(a._readableLocations=n[i.Constants.ReadableLocations]),{result:a,headers:o}})}captureSessionToken(e,t,r,n){const i=this.getSessionParams(t);i.operationType=r,e&&(this.isMasterResource(i.resourceType)||e.code!==o.StatusCodes.PreconditionFailed&&e.code!==o.StatusCodes.Conflict&&(e.code!==o.StatusCodes.NotFound||e.substatus===o.SubStatusCodes.ReadSessionNotAvailable))||this.sessionContainer.setSessionToken(i,n)}getSessionToken(e){if(!e)throw new Error("collectionLink cannot be null");if(void 0===o.Helper.parseLink(e))return"";const t=this.getSessionParams(e);return this.sessionContainer.resolveGlobalSessionToken(t)}clearSessionToken(e){const t=this.getSessionParams(e);this.sessionContainer.clearToken(t)}getSessionParams(e){let t=null;const r=o.Helper.parseLink(e);return{resourceId:null,resourceAddress:t=r.objectBody.self,resourceType:r.type,isNameBased:!0}}isMasterResource(e){return e===i.Constants.Path.OffersPathSegment||e===i.Constants.Path.DatabasesPathSegment||e===i.Constants.Path.UsersPathSegment||e===i.Constants.Path.PermissionsPathSegment||e===i.Constants.Path.TopologyPathSegment||e===i.Constants.Path.DatabaseAccountPathSegment||e===i.Constants.Path.PartitionKeyRangesPathSegment||e===i.Constants.Path.CollectionsPathSegment}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(218);t.RequestHandler=n.RequestHandler},function(e,t,r){"use strict";(function(e){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(57),o=r(32),s=r(33),a=r(98);class c{constructor(e,t,r){this.globalEndpointManager=e,this.connectionPolicy=t,this.requestAgent=r}static createRequestObjectStub(e,t,r){return n(this,void 0,void 0,function*(){return a.createRequestObject(e,t,r)})}static request(t,r,c,u,f,h,d,l,p){return n(this,void 0,void 0,function*(){const n=void 0===h.path?h:h.path;let b,y,m;if(d&&!(b=a.bodyFromData(d)))return{result:{message:"parameter data must be a javascript object, string, Buffer, or stream"},headers:void 0};if(b)if(e.isBuffer(b))y=b;else if(b.pipe)m=b;else{if("string"!=typeof b)return{result:{message:"body must be string, Buffer, or stream"},headers:void 0};y=new e(b,"utf8")}const g=a.parse(f);return g.method=u,g.path+=n,g.headers=p,g.agent=c,g.secureProtocol="TLSv1_client_method",!0===r.DisableSSLVerification&&(g.rejectUnauthorized=!1),l&&(g.path+="?"+i.stringify(l)),y?(g.headers[o.Constants.HttpHeaders.ContentLength]=y.length,s.RetryUtility.execute(t,{buffer:y,stream:null},this.createRequestObjectStub,r,g,h)):m?s.RetryUtility.execute(t,{buffer:null,stream:m},this.createRequestObjectStub,r,g,h):s.RetryUtility.execute(t,{buffer:null,stream:null},this.createRequestObjectStub,r,g,h)})}get(e,t,r){return c.request(this.globalEndpointManager,this.connectionPolicy,this.requestAgent,"GET",e,t,void 0,"",r)}post(e,t,r,n){return c.request(this.globalEndpointManager,this.connectionPolicy,this.requestAgent,"POST",e,t,r,"",n)}put(e,t,r,n){return c.request(this.globalEndpointManager,this.connectionPolicy,this.requestAgent,"PUT",e,t,r,"",n)}head(e,t,r){return c.request(this.globalEndpointManager,this.connectionPolicy,this.requestAgent,"HEAD",e,t,void 0,"",r)}delete(e,t,r){return c.request(this.globalEndpointManager,this.connectionPolicy,this.requestAgent,"DELETE",e,t,void 0,"",r)}}t.RequestHandler=c}).call(this,r(2).Buffer)},function(e,t,r){"use strict";(function(e){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(220),o=r(1);class s{static getAuthorizationHeader(e,t,r,i,a,c){return n(this,void 0,void 0,function*(){if(e.permissionFeed){e.resourceTokens={};for(const t of e.permissionFeed){const r=o.Helper.getResourceIdFromPath(t.resource);if(!r)throw new Error(`authorization error: ${r}                           is an invalid resourceId in permissionFeed`);e.resourceTokens[r]=t._token}}return e.masterKey?encodeURIComponent(s.getAuthorizationTokenUsingMasterKey(t,i,a,c,e.masterKey)):e.resourceTokens?encodeURIComponent(s.getAuthorizationTokenUsingResourceTokens(e.resourceTokens,r,i)):e.tokenProvider?encodeURIComponent(yield s.getAuthorizationTokenUsingTokenProvider(e.tokenProvider,{verb:t,path:r,resourceId:i,resourceType:a,headers:c})):void 0})}static getAuthorizationTokenUsingMasterKey(t,r,n,o,s){const a=new e(s,"base64"),c=(t||"").toLowerCase()+"\n"+(n||"").toLowerCase()+"\n"+(r||"")+"\n"+(o["x-ms-date"]||"").toLowerCase()+"\n"+(o.date||"").toLowerCase()+"\n",u=new e(c,"utf8");return`type=master&ver=1.0&sig=${i.createHmac("sha256",a).update(u).digest("base64")}`}static getAuthorizationTokenUsingResourceTokens(e,t,r){if(e&&Object.keys(e).length>0){if(!t&&!r)return e[Object.keys(e)[0]];if(r&&e[r])return e[r];if(!t||t.length<4)return null;const n=(t="/"===(t="/"===t[0]?t.substring(1):t)[t.length-1]?t.substring(0,t.length-1):t)&&t.split("/")||[];let i=n.length%2==0?n.length-1:n.length-2;for(;i>0;i-=2){const t=decodeURI(n[i]);if(e[t])return e[t]}}return null}static getAuthorizationTokenUsingTokenProvider(e,t){return t.getAuthorizationTokenUsingMasterKey=s.getAuthorizationTokenUsingMasterKey,new Promise((r,i)=>n(this,void 0,void 0,function*(){const n=e.getToken(t,(e,t)=>{if(i)return i(e);r(t)});n.then&&"function"==typeof n.then&&r(yield n)}))}}t.AuthHandler=s}).call(this,r(2).Buffer)},function(e,t,r){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=r(21),t.createHash=t.Hash=r(27),t.createHmac=t.Hmac=r(106);var n=r(234),i=Object.keys(n),o=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(i);t.getHashes=function(){return o};var s=r(109);t.pbkdf2=s.pbkdf2,t.pbkdf2Sync=s.pbkdf2Sync;var a=r(236);t.Cipher=a.Cipher,t.createCipher=a.createCipher,t.Cipheriv=a.Cipheriv,t.createCipheriv=a.createCipheriv,t.Decipher=a.Decipher,t.createDecipher=a.createDecipher,t.Decipheriv=a.Decipheriv,t.createDecipheriv=a.createDecipheriv,t.getCiphers=a.getCiphers,t.listCiphers=a.listCiphers;var c=r(254);t.DiffieHellmanGroup=c.DiffieHellmanGroup,t.createDiffieHellmanGroup=c.createDiffieHellmanGroup,t.getDiffieHellman=c.getDiffieHellman,t.createDiffieHellman=c.createDiffieHellman,t.DiffieHellman=c.DiffieHellman;var u=r(259);t.createSign=u.createSign,t.Sign=u.Sign,t.createVerify=u.createVerify,t.Verify=u.Verify,t.createECDH=r(297);var f=r(298);t.publicEncrypt=f.publicEncrypt,t.privateEncrypt=f.privateEncrypt,t.publicDecrypt=f.publicDecrypt,t.privateDecrypt=f.privateDecrypt;var h=r(301);t.randomFill=h.randomFill,t.randomFillSync=h.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t){},function(e,t,r){"use strict";var n=r(3).Buffer,i=r(223);function o(e,t,r){e.copy(t,r)}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t=n.allocUnsafe(e>>>0),r=this.head,i=0;r;)o(r.data,t,i),i+=r.data.length,r=r.next;return t},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){"use strict";e.exports=o;var n=r(103),i=r(10);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}i.inherits=r(0),i.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(49)},function(e,t,r){e.exports=r(16)},function(e,t,r){e.exports=r(48).Transform},function(e,t,r){e.exports=r(48).PassThrough},function(e,t,r){var n=r(0),i=r(22),o=r(3).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function c(){this.init(),this._w=a,i.call(this,64,56)}function u(e){return e<<5|e>>>27}function f(e){return e<<30|e>>>2}function h(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(c,i),c.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},c.prototype._update=function(e){for(var t=this._w,r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,c=0;c<16;++c)t[c]=e.readInt32BE(4*c);for(;c<80;++c)t[c]=t[c-3]^t[c-8]^t[c-14]^t[c-16];for(var d=0;d<80;++d){var l=~~(d/20),p=u(r)+h(l,n,i,o)+a+t[d]+s[l]|0;a=o,o=i,i=f(n),n=r,r=p}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0},c.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=c},function(e,t,r){var n=r(0),i=r(22),o=r(3).Buffer,s=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function c(){this.init(),this._w=a,i.call(this,64,56)}function u(e){return e<<1|e>>>31}function f(e){return e<<5|e>>>27}function h(e){return e<<30|e>>>2}function d(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(c,i),c.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},c.prototype._update=function(e){for(var t=this._w,r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,a=0|this._e,c=0;c<16;++c)t[c]=e.readInt32BE(4*c);for(;c<80;++c)t[c]=u(t[c-3]^t[c-8]^t[c-14]^t[c-16]);for(var l=0;l<80;++l){var p=~~(l/20),b=f(r)+d(p,n,i,o)+a+t[l]+s[p]|0;a=o,o=i,i=h(n),n=r,r=b}this._a=r+this._a|0,this._b=n+this._b|0,this._c=i+this._c|0,this._d=o+this._d|0,this._e=a+this._e|0},c.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=c},function(e,t,r){var n=r(0),i=r(104),o=r(22),s=r(3).Buffer,a=new Array(64);function c(){this.init(),this._w=a,o.call(this,64,56)}n(c,i),c.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},c.prototype._hash=function(){var e=s.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=c},function(e,t,r){var n=r(0),i=r(105),o=r(22),s=r(3).Buffer,a=new Array(160);function c(){this.init(),this._w=a,o.call(this,128,112)}n(c,i),c.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},c.prototype._hash=function(){var e=s.allocUnsafe(48);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=c},function(e,t,r){"use strict";var n=r(0),i=r(3).Buffer,o=r(15),s=i.alloc(128),a=64;function c(e,t){o.call(this,"digest"),"string"==typeof t&&(t=i.from(t)),this._alg=e,this._key=t,t.length>a?t=e(t):t.length<a&&(t=i.concat([t,s],a));for(var r=this._ipad=i.allocUnsafe(a),n=this._opad=i.allocUnsafe(a),c=0;c<a;c++)r[c]=54^t[c],n[c]=92^t[c];this._hash=[r]}n(c,o),c.prototype._update=function(e){this._hash.push(e)},c.prototype._final=function(){var e=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,e]))},e.exports=c},function(e,t,r){e.exports=r(108)},function(e,t,r){(function(t,n){var i,o=r(110),s=r(111),a=r(112),c=r(3).Buffer,u=t.crypto&&t.crypto.subtle,f={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},h=[];function d(e,t,r,n,i){return u.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then(function(e){return u.deriveBits({name:"PBKDF2",salt:t,iterations:r,hash:{name:i}},e,n<<3)}).then(function(e){return c.from(e)})}e.exports=function(e,r,l,p,b,y){"function"==typeof b&&(y=b,b=void 0);var m=f[(b=b||"sha1").toLowerCase()];if(!m||"function"!=typeof t.Promise)return n.nextTick(function(){var t;try{t=a(e,r,l,p,b)}catch(e){return y(e)}y(null,t)});if(o(e,r,l,p),"function"!=typeof y)throw new Error("No callback provided to pbkdf2");c.isBuffer(e)||(e=c.from(e,s)),c.isBuffer(r)||(r=c.from(r,s)),function(e,t){e.then(function(e){n.nextTick(function(){t(null,e)})},function(e){n.nextTick(function(){t(e)})})}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!u||!u.importKey||!u.deriveBits)return Promise.resolve(!1);if(void 0!==h[e])return h[e];var r=d(i=i||c.alloc(8),i,10,128,e).then(function(){return!0}).catch(function(){return!1});return h[e]=r,r}(m).then(function(t){return t?d(e,r,l,p,m):a(e,r,l,p,b)}),y)}}).call(this,r(5),r(6))},function(e,t,r){var n=r(237),i=r(53),o=r(54),s=r(253),a=r(37);function c(e,t,r){if(e=e.toLowerCase(),o[e])return i.createCipheriv(e,t,r);if(s[e])return new n({key:t,iv:r,mode:e});throw new TypeError("invalid suite type")}function u(e,t,r){if(e=e.toLowerCase(),o[e])return i.createDecipheriv(e,t,r);if(s[e])return new n({key:t,iv:r,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!s[e])throw new TypeError("invalid suite type");r=8*s[e].key,n=s[e].iv}var i=a(t,!1,r,n);return c(e,i.key,i.iv)},t.createCipheriv=t.Cipheriv=c,t.createDecipher=t.Decipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!s[e])throw new TypeError("invalid suite type");r=8*s[e].key,n=s[e].iv}var i=a(t,!1,r,n);return u(e,i.key,i.iv)},t.createDecipheriv=t.Decipheriv=u,t.listCiphers=t.getCiphers=function(){return Object.keys(s).concat(i.getCiphers())}},function(e,t,r){var n=r(15),i=r(52),o=r(0),s=r(243).Buffer,a={"des-ede3-cbc":i.CBC.instantiate(i.EDE),"des-ede3":i.EDE,"des-ede-cbc":i.CBC.instantiate(i.EDE),"des-ede":i.EDE,"des-cbc":i.CBC.instantiate(i.DES),"des-ecb":i.DES};function c(e){n.call(this);var t,r=e.mode.toLowerCase(),i=a[r];t=e.decrypt?"decrypt":"encrypt";var o=e.key;s.isBuffer(o)||(o=s.from(o)),"des-ede"!==r&&"des-ede-cbc"!==r||(o=s.concat([o,o.slice(0,8)]));var c=e.iv;s.isBuffer(c)||(c=s.from(c)),this._des=i.create({key:o,iv:c,type:t})}a.des=a["des-cbc"],a.des3=a["des-ede3-cbc"],e.exports=c,o(c,n),c.prototype._update=function(e){return s.from(this._des.update(e))},c.prototype._final=function(){return s.from(this._des.final())}},function(e,t,r){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,r){e[0+r]=t>>>24,e[1+r]=t>>>16&255,e[2+r]=t>>>8&255,e[3+r]=255&t},t.ip=function(e,t,r,n){for(var i=0,o=0,s=6;s>=0;s-=2){for(var a=0;a<=24;a+=8)i<<=1,i|=t>>>a+s&1;for(a=0;a<=24;a+=8)i<<=1,i|=e>>>a+s&1}for(s=6;s>=0;s-=2){for(a=1;a<=25;a+=8)o<<=1,o|=t>>>a+s&1;for(a=1;a<=25;a+=8)o<<=1,o|=e>>>a+s&1}r[n+0]=i>>>0,r[n+1]=o>>>0},t.rip=function(e,t,r,n){for(var i=0,o=0,s=0;s<4;s++)for(var a=24;a>=0;a-=8)i<<=1,i|=t>>>a+s&1,i<<=1,i|=e>>>a+s&1;for(s=4;s<8;s++)for(a=24;a>=0;a-=8)o<<=1,o|=t>>>a+s&1,o<<=1,o|=e>>>a+s&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.pc1=function(e,t,r,n){for(var i=0,o=0,s=7;s>=5;s--){for(var a=0;a<=24;a+=8)i<<=1,i|=t>>a+s&1;for(a=0;a<=24;a+=8)i<<=1,i|=e>>a+s&1}for(a=0;a<=24;a+=8)i<<=1,i|=t>>a+s&1;for(s=1;s<=3;s++){for(a=0;a<=24;a+=8)o<<=1,o|=t>>a+s&1;for(a=0;a<=24;a+=8)o<<=1,o|=e>>a+s&1}for(a=0;a<=24;a+=8)o<<=1,o|=e>>a+s&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var n=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,r,i){for(var o=0,s=0,a=n.length>>>1,c=0;c<a;c++)o<<=1,o|=e>>>n[c]&1;for(c=a;c<n.length;c++)s<<=1,s|=t>>>n[c]&1;r[i+0]=o>>>0,r[i+1]=s>>>0},t.expand=function(e,t,r){var n=0,i=0;n=(1&e)<<5|e>>>27;for(var o=23;o>=15;o-=4)n<<=6,n|=e>>>o&63;for(o=11;o>=3;o-=4)i|=e>>>o&63,i<<=6;i|=(31&e)<<1|e>>>31,t[r+0]=n>>>0,t[r+1]=i>>>0};var i=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var r=0,n=0;n<4;n++){r<<=4,r|=i[64*n+(e>>>18-6*n&63)]}for(n=0;n<4;n++){r<<=4,r|=i[256+64*n+(t>>>18-6*n&63)]}return r>>>0};var o=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,r=0;r<o.length;r++)t<<=1,t|=e>>>o[r]&1;return t>>>0},t.padSplit=function(e,t,r){for(var n=e.toString(2);n.length<t;)n="0"+n;for(var i=[],o=0;o<t;o+=r)i.push(n.slice(o,o+r));return i.join(" ")}},function(e,t,r){"use strict";var n=r(8);function i(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=i,i.prototype._init=function(){},i.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},i.prototype._buffer=function(e,t){for(var r=Math.min(this.buffer.length-this.bufferOff,e.length-t),n=0;n<r;n++)this.buffer[this.bufferOff+n]=e[t+n];return this.bufferOff+=r,r},i.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},i.prototype._updateEncrypt=function(e){var t=0,r=0,n=(this.bufferOff+e.length)/this.blockSize|0,i=new Array(n*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(i,r)));for(var o=e.length-(e.length-t)%this.blockSize;t<o;t+=this.blockSize)this._update(e,t,i,r),r+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return i},i.prototype._updateDecrypt=function(e){for(var t=0,r=0,n=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,i=new Array(n*this.blockSize);n>0;n--)t+=this._buffer(e,t),r+=this._flushBuffer(i,r);return t+=this._buffer(e,t),i},i.prototype.final=function(e){var t,r;return e&&(t=this.update(e)),r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(r):r},i.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},i.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},i.prototype._unpad=function(e){return e},i.prototype._finalDecrypt=function(){n.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,r){"use strict";var n=r(8),i=r(0),o=r(52),s=o.utils,a=o.Cipher;function c(e){a.call(this,e);var t=new function(){this.tmp=new Array(2),this.keys=null};this._desState=t,this.deriveKeys(t,e.key)}i(c,a),e.exports=c,c.create=function(e){return new c(e)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(e,t){e.keys=new Array(32),n.equal(t.length,this.blockSize,"Invalid key length");var r=s.readUInt32BE(t,0),i=s.readUInt32BE(t,4);s.pc1(r,i,e.tmp,0),r=e.tmp[0],i=e.tmp[1];for(var o=0;o<e.keys.length;o+=2){var a=u[o>>>1];r=s.r28shl(r,a),i=s.r28shl(i,a),s.pc2(r,i,e.keys,o)}},c.prototype._update=function(e,t,r,n){var i=this._desState,o=s.readUInt32BE(e,t),a=s.readUInt32BE(e,t+4);s.ip(o,a,i.tmp,0),o=i.tmp[0],a=i.tmp[1],"encrypt"===this.type?this._encrypt(i,o,a,i.tmp,0):this._decrypt(i,o,a,i.tmp,0),o=i.tmp[0],a=i.tmp[1],s.writeUInt32BE(r,o,n),s.writeUInt32BE(r,a,n+4)},c.prototype._pad=function(e,t){for(var r=e.length-t,n=t;n<e.length;n++)e[n]=r;return!0},c.prototype._unpad=function(e){for(var t=e[e.length-1],r=e.length-t;r<e.length;r++)n.equal(e[r],t);return e.slice(0,e.length-t)},c.prototype._encrypt=function(e,t,r,n,i){for(var o=t,a=r,c=0;c<e.keys.length;c+=2){var u=e.keys[c],f=e.keys[c+1];s.expand(a,e.tmp,0),u^=e.tmp[0],f^=e.tmp[1];var h=s.substitute(u,f),d=a;a=(o^s.permute(h))>>>0,o=d}s.rip(a,o,n,i)},c.prototype._decrypt=function(e,t,r,n,i){for(var o=r,a=t,c=e.keys.length-2;c>=0;c-=2){var u=e.keys[c],f=e.keys[c+1];s.expand(o,e.tmp,0),u^=e.tmp[0],f^=e.tmp[1];var h=s.substitute(u,f),d=o;o=(a^s.permute(h))>>>0,a=d}s.rip(o,a,n,i)}},function(e,t,r){"use strict";var n=r(8),i=r(0),o={};t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}i(t,e);for(var r=Object.keys(o),n=0;n<r.length;n++){var s=r[n];t.prototype[s]=o[s]}return t.create=function(e){return new t(e)},t},o._cbcInit=function(){var e=new function(e){n.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}(this.options.iv);this._cbcState=e},o._update=function(e,t,r,n){var i=this._cbcState,o=this.constructor.super_.prototype,s=i.iv;if("encrypt"===this.type){for(var a=0;a<this.blockSize;a++)s[a]^=e[t+a];o._update.call(this,s,0,r,n);for(a=0;a<this.blockSize;a++)s[a]=r[n+a]}else{o._update.call(this,e,t,r,n);for(a=0;a<this.blockSize;a++)r[n+a]^=s[a];for(a=0;a<this.blockSize;a++)s[a]=e[t+a]}}},function(e,t,r){"use strict";var n=r(8),i=r(0),o=r(52),s=o.Cipher,a=o.DES;function c(e){s.call(this,e);var t=new function(e,t){n.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),i=t.slice(8,16),o=t.slice(16,24);this.ciphers="encrypt"===e?[a.create({type:"encrypt",key:r}),a.create({type:"decrypt",key:i}),a.create({type:"encrypt",key:o})]:[a.create({type:"decrypt",key:o}),a.create({type:"encrypt",key:i}),a.create({type:"decrypt",key:r})]}(this.type,this.options.key);this._edeState=t}i(c,s),e.exports=c,c.create=function(e){return new c(e)},c.prototype._update=function(e,t,r,n){var i=this._edeState;i.ciphers[0]._update(e,t,r,n),i.ciphers[1]._update(r,n,r,n),i.ciphers[2]._update(r,n,r,n)},c.prototype._pad=a.prototype._pad,c.prototype._unpad=a.prototype._unpad},function(e,t,r){var n=r(2),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=s),o(i,s),s.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},s.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){var n=r(54),i=r(116),o=r(3).Buffer,s=r(117),a=r(15),c=r(36),u=r(37);function f(e,t,r){a.call(this),this._cache=new d,this._cipher=new c.AES(t),this._prev=o.from(r),this._mode=e,this._autopadding=!0}r(0)(f,a),f.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get();)r=this._mode.encrypt(this,t),n.push(r);return o.concat(n)};var h=o.alloc(16,16);function d(){this.cache=o.allocUnsafe(0)}function l(e,t,r){var a=n[e.toLowerCase()];if(!a)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=o.from(t)),t.length!==a.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof r&&(r=o.from(r)),"GCM"!==a.mode&&r.length!==a.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===a.type?new s(a.module,t,r):"auth"===a.type?new i(a.module,t,r):new f(a.module,t,r)}f.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},f.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},d.prototype.add=function(e){this.cache=o.concat([this.cache,e])},d.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},d.prototype.flush=function(){for(var e=16-this.cache.length,t=o.allocUnsafe(e),r=-1;++r<e;)t.writeUInt8(e,r);return o.concat([this.cache,t])},t.createCipheriv=l,t.createCipher=function(e,t){var r=n[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=u(t,!1,r.key,r.iv);return l(e,i.key,i.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,r){var n=r(28);t.encrypt=function(e,t){var r=n(t,e._prev);return e._prev=e._cipher.encryptBlock(r),e._prev},t.decrypt=function(e,t){var r=e._prev;e._prev=t;var i=e._cipher.decryptBlock(t);return n(i,r)}},function(e,t,r){var n=r(3).Buffer,i=r(28);function o(e,t,r){var o=t.length,s=i(t,e._cache);return e._cache=e._cache.slice(o),e._prev=n.concat([e._prev,r?t:s]),s}t.encrypt=function(e,t,r){for(var i,s=n.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=n.allocUnsafe(0)),!(e._cache.length<=t.length)){s=n.concat([s,o(e,t,r)]);break}i=e._cache.length,s=n.concat([s,o(e,t.slice(0,i),r)]),t=t.slice(i)}return s}},function(e,t,r){var n=r(3).Buffer;function i(e,t,r){var i=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=n.concat([e._prev.slice(1),n.from([r?t:i])]),i}t.encrypt=function(e,t,r){for(var o=t.length,s=n.allocUnsafe(o),a=-1;++a<o;)s[a]=i(e,t[a],r);return s}},function(e,t,r){var n=r(3).Buffer;function i(e,t,r){for(var n,i,s,a=-1,c=0;++a<8;)n=e._cipher.encryptBlock(e._prev),i=t&1<<7-a?128:0,c+=(128&(s=n[0]^i))>>a%8,e._prev=o(e._prev,r?i:s);return c}function o(e,t){var r=e.length,i=-1,o=n.allocUnsafe(e.length);for(e=n.concat([e,n.from([t])]);++i<r;)o[i]=e[i]<<1|e[i+1]>>7;return o}t.encrypt=function(e,t,r){for(var o=t.length,s=n.allocUnsafe(o),a=-1;++a<o;)s[a]=i(e,t[a],r);return s}},function(e,t,r){(function(e){var n=r(28);function i(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,r){for(;t._cache.length<r.length;)t._cache=e.concat([t._cache,i(t)]);var o=t._cache.slice(0,r.length);return t._cache=t._cache.slice(r.length),n(r,o)}}).call(this,r(2).Buffer)},function(e,t,r){var n=r(3).Buffer,i=n.alloc(16,0);function o(e){var t=n.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function s(e){this.h=e,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}s.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},s.prototype._multiply=function(){for(var e,t,r=function(e){return[e.readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)]}(this.h),n=[0,0,0,0],i=-1;++i<128;){for(0!=(this.state[~~(i/8)]&1<<7-i%8)&&(n[0]^=r[0],n[1]^=r[1],n[2]^=r[2],n[3]^=r[3]),t=0!=(1&r[3]),e=3;e>0;e--)r[e]=r[e]>>>1|(1&r[e-1])<<31;r[0]=r[0]>>>1,t&&(r[0]=r[0]^225<<24)}this.state=o(n)},s.prototype.update=function(e){var t;for(this.cache=n.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},s.prototype.final=function(e,t){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(o([0,e,0,t])),this.state},e.exports=s},function(e,t,r){var n=r(116),i=r(3).Buffer,o=r(54),s=r(117),a=r(15),c=r(36),u=r(37);function f(e,t,r){a.call(this),this._cache=new h,this._last=void 0,this._cipher=new c.AES(t),this._prev=i.from(r),this._mode=e,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function d(e,t,r){var a=o[e.toLowerCase()];if(!a)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==a.mode&&r.length!==a.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof t&&(t=i.from(t)),t.length!==a.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===a.type?new s(a.module,t,r,!0):"auth"===a.type?new n(a.module,t,r,!0):new f(a.module,t,r)}r(0)(f,a),f.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,t),n.push(r);return i.concat(n)},f.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<t;)if(e[r+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},f.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},h.prototype.add=function(e){this.cache=i.concat([this.cache,e])},h.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var r=o[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=u(t,!1,r.key,r.iv);return d(e,n.key,n.iv)},t.createDecipheriv=d},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,r){(function(e){var n=r(118),i=r(257),o=r(258);var s={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var r=new e(i[t].prime,"hex"),n=new e(i[t].gen,"hex");return new o(r,n)},t.createDiffieHellman=t.DiffieHellman=function t(r,i,a,c){return e.isBuffer(i)||void 0===s[i]?t(r,"binary",i,a):(i=i||"binary",c=c||"binary",a=a||new e([2]),e.isBuffer(a)||(a=new e(a,c)),"number"==typeof r?new o(n(r,a),a,!0):(e.isBuffer(r)||(r=new e(r,i)),new o(r,a,!0)))}}).call(this,r(2).Buffer)},function(e,t){},function(e,t){},function(e){e.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},function(e,t,r){(function(t){var n=r(4),i=new(r(119)),o=new n(24),s=new n(11),a=new n(10),c=new n(3),u=new n(7),f=r(118),h=r(21);function d(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._pub=new n(e),this}function l(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._priv=new n(e),this}e.exports=b;var p={};function b(e,t,r){this.setGenerator(t),this.__prime=new n(e),this._prime=n.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,r?(this.setPublicKey=d,this.setPrivateKey=l):this._primeCode=8}function y(e,r){var n=new t(e.toArray());return r?n.toString(r):n}Object.defineProperty(b.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var r=t.toString("hex"),n=[r,e.toString(16)].join("_");if(n in p)return p[n];var h,d=0;if(e.isEven()||!f.simpleSieve||!f.fermatTest(e)||!i.test(e))return d+=1,d+="02"===r||"05"===r?8:4,p[n]=d,d;switch(i.test(e.shrn(1))||(d+=2),r){case"02":e.mod(o).cmp(s)&&(d+=8);break;case"05":(h=e.mod(a)).cmp(c)&&h.cmp(u)&&(d+=8);break;default:d+=4}return p[n]=d,d}(this.__prime,this.__gen)),this._primeCode}}),b.prototype.generateKeys=function(){return this._priv||(this._priv=new n(h(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},b.prototype.computeSecret=function(e){var r=(e=(e=new n(e)).toRed(this._prime)).redPow(this._priv).fromRed(),i=new t(r.toArray()),o=this.getPrime();if(i.length<o.length){var s=new t(o.length-i.length);s.fill(0),i=t.concat([s,i])}return i},b.prototype.getPublicKey=function(e){return y(this._pub,e)},b.prototype.getPrivateKey=function(e){return y(this._priv,e)},b.prototype.getPrime=function(e){return y(this.__prime,e)},b.prototype.getGenerator=function(e){return y(this._gen,e)},b.prototype.setGenerator=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.__gen=e,this._gen=new n(e),this}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(27),i=r(47),o=r(0),s=r(260),a=r(296),c=r(108);function u(e){i.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function f(e){i.Writable.call(this);var t=c[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function h(e){return new u(e)}function d(e){return new f(e)}Object.keys(c).forEach(function(e){c[e].id=new t(c[e].id,"hex"),c[e.toLowerCase()]=c[e]}),o(u,i.Writable),u.prototype._write=function(e,t,r){this._hash.update(e),r()},u.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},u.prototype.sign=function(e,t){this.end();var r=this._hash.digest(),n=s(r,e,this._hashType,this._signType,this._tag);return t?n.toString(t):n},o(f,i.Writable),f.prototype._write=function(e,t,r){this._hash.update(e),r()},f.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},f.prototype.verify=function(e,r,n){"string"==typeof r&&(r=new t(r,n)),this.end();var i=this._hash.digest();return a(r,i,e,this._signType,this._tag)},e.exports={Sign:h,Verify:d,createSign:h,createVerify:d}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(106),i=r(55),o=r(7).ec,s=r(4),a=r(39),c=r(129);function u(e,r,i,o){if((e=new t(e.toArray())).length<r.byteLength()){var s=new t(r.byteLength()-e.length);s.fill(0),e=t.concat([s,e])}var a=i.length,c=function(e,r){e=(e=f(e,r)).mod(r);var n=new t(e.toArray());if(n.length<r.byteLength()){var i=new t(r.byteLength()-n.length);i.fill(0),n=t.concat([i,n])}return n}(i,r),u=new t(a);u.fill(1);var h=new t(a);return h.fill(0),h=n(o,h).update(u).update(new t([0])).update(e).update(c).digest(),u=n(o,h).update(u).digest(),{k:h=n(o,h).update(u).update(new t([1])).update(e).update(c).digest(),v:u=n(o,h).update(u).digest()}}function f(e,t){var r=new s(e),n=(e.length<<3)-t.bitLength();return n>0&&r.ishrn(n),r}function h(e,r,i){var o,s;do{for(o=new t(0);8*o.length<e.bitLength();)r.v=n(i,r.k).update(r.v).digest(),o=t.concat([o,r.v]);s=f(o,e),r.k=n(i,r.k).update(r.v).update(new t([0])).digest(),r.v=n(i,r.k).update(r.v).digest()}while(-1!==s.cmp(e));return s}function d(e,t,r,n){return e.toRed(s.mont(r)).redPow(t).fromRed().mod(n)}e.exports=function(e,r,n,l,p){var b=a(r);if(b.curve){if("ecdsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");return function(e,r){var n=c[r.curve.join(".")];if(!n)throw new Error("unknown curve "+r.curve.join("."));var i=new o(n).keyFromPrivate(r.privateKey).sign(e);return new t(i.toDER())}(e,b)}if("dsa"===b.type){if("dsa"!==l)throw new Error("wrong private key type");return function(e,r,n){for(var i,o=r.params.priv_key,a=r.params.p,c=r.params.q,l=r.params.g,p=new s(0),b=f(e,c).mod(c),y=!1,m=u(o,c,e,n);!1===y;)i=h(c,m,n),p=d(l,i,a,c),0===(y=i.invm(c).imul(b.add(o.mul(p))).mod(c)).cmpn(0)&&(y=!1,p=new s(0));return function(e,r){e=e.toArray(),r=r.toArray(),128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r));var n=[48,e.length+r.length+4,2,e.length];return n=n.concat(e,[2,r.length],r),new t(n)}(p,y)}(e,b,n)}if("rsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");e=t.concat([p,e]);for(var y=b.modulus.byteLength(),m=[0,1];e.length+m.length+1<y;)m.push(255);m.push(0);for(var g=-1;++g<e.length;)m.push(e[g]);return i(m,b)},e.exports.getKey=u,e.exports.makeKey=h}).call(this,r(2).Buffer)},function(e){e.exports={_from:"elliptic@^6.0.0",_id:"elliptic@6.4.0",_inBundle:!1,_integrity:"sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",_location:"/elliptic",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"elliptic@^6.0.0",name:"elliptic",escapedName:"elliptic",rawSpec:"^6.0.0",saveSpec:null,fetchSpec:"^6.0.0"},_requiredBy:["/browserify-sign","/create-ecdh"],_resolved:"https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",_shasum:"cac9af8762c85836187003c8dfe193e5e2eae5df",_spec:"elliptic@^6.0.0",_where:"C:\\workspace\\cosmosdb\\azure-cosmos-js\\node_modules\\browserify-sign",author:{name:"Fedor Indutny",email:"fedor@indutny.com"},bugs:{url:"https://github.com/indutny/elliptic/issues"},bundleDependencies:!1,dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},deprecated:!1,description:"EC cryptography",devDependencies:{brfs:"^1.4.3",coveralls:"^2.11.3",grunt:"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2",istanbul:"^0.4.2",jscs:"^2.9.0",jshint:"^2.6.0",mocha:"^2.1.0"},files:["lib"],homepage:"https://github.com/indutny/elliptic",keywords:["EC","Elliptic","curve","Cryptography"],license:"MIT",main:"lib/elliptic.js",name:"elliptic",repository:{type:"git",url:"git+ssh://git@github.com/indutny/elliptic.git"},scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",test:"npm run lint && npm run unit",unit:"istanbul test _mocha --reporter=spec test/index.js",version:"grunt dist && git add dist/"},version:"6.4.0"}},function(e,t,r){"use strict";var n=t,i=r(4),o=r(8),s=r(121);n.assert=o,n.toArray=s.toArray,n.zero2=s.zero2,n.toHex=s.toHex,n.encode=s.encode,n.getNAF=function(e,t){for(var r=[],n=1<<t+1,i=e.clone();i.cmpn(1)>=0;){var o;if(i.isOdd()){var s=i.andln(n-1);o=s>(n>>1)-1?(n>>1)-s:s,i.isubn(o)}else o=0;r.push(o);for(var a=0!==i.cmpn(0)&&0===i.andln(n-1)?t+1:1,c=1;c<a;c++)r.push(0);i.iushrn(a)}return r},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n=0,i=0;e.cmpn(-n)>0||t.cmpn(-i)>0;){var o,s,a,c=e.andln(3)+n&3,u=t.andln(3)+i&3;3===c&&(c=-1),3===u&&(u=-1),o=0==(1&c)?0:3!=(a=e.andln(7)+n&7)&&5!==a||2!==u?c:-c,r[0].push(o),s=0==(1&u)?0:3!=(a=t.andln(7)+i&7)&&5!==a||2!==c?u:-u,r[1].push(s),2*n===o+1&&(n=1-n),2*i===s+1&&(i=1-i),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new i(e,"hex","le")}},function(e,t,r){"use strict";var n=r(4),i=r(7).utils,o=i.getNAF,s=i.getJSF,a=i.assert;function c(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function u(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=c,c.prototype.point=function(){throw new Error("Not implemented")},c.prototype.validate=function(){throw new Error("Not implemented")},c.prototype._fixedNafMul=function(e,t){a(e.precomputed);var r=e._getDoubles(),n=o(t,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var s=[],c=0;c<n.length;c+=r.step){var u=0;for(t=c+r.step-1;t>=c;t--)u=(u<<1)+n[t];s.push(u)}for(var f=this.jpoint(null,null,null),h=this.jpoint(null,null,null),d=i;d>0;d--){for(c=0;c<s.length;c++){(u=s[c])===d?h=h.mixedAdd(r.points[c]):u===-d&&(h=h.mixedAdd(r.points[c].neg()))}f=f.add(h)}return f.toP()},c.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,s=o(t,r),c=this.jpoint(null,null,null),u=s.length-1;u>=0;u--){for(t=0;u>=0&&0===s[u];u--)t++;if(u>=0&&t++,c=c.dblp(t),u<0)break;var f=s[u];a(0!==f),c="affine"===e.type?f>0?c.mixedAdd(i[f-1>>1]):c.mixedAdd(i[-f-1>>1].neg()):f>0?c.add(i[f-1>>1]):c.add(i[-f-1>>1].neg())}return"affine"===e.type?c.toP():c},c.prototype._wnafMulAdd=function(e,t,r,n,i){for(var a=this._wnafT1,c=this._wnafT2,u=this._wnafT3,f=0,h=0;h<n;h++){var d=(E=t[h])._getNAFPoints(e);a[h]=d.wnd,c[h]=d.points}for(h=n-1;h>=1;h-=2){var l=h-1,p=h;if(1===a[l]&&1===a[p]){var b=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(b[1]=t[l].add(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].add(t[p].neg())):(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],m=s(r[l],r[p]);f=Math.max(m[0].length,f),u[l]=new Array(f),u[p]=new Array(f);for(var g=0;g<f;g++){var v=0|m[0][g],w=0|m[1][g];u[l][g]=y[3*(v+1)+(w+1)],u[p][g]=0,c[l]=b}}else u[l]=o(r[l],a[l]),u[p]=o(r[p],a[p]),f=Math.max(u[l].length,f),f=Math.max(u[p].length,f)}var _=this.jpoint(null,null,null),S=this._wnafT4;for(h=f;h>=0;h--){for(var x=0;h>=0;){var M=!0;for(g=0;g<n;g++)S[g]=0|u[g][h],0!==S[g]&&(M=!1);if(!M)break;x++,h--}if(h>=0&&x++,_=_.dblp(x),h<0)break;for(g=0;g<n;g++){var E,C=S[g];0!==C&&(C>0?E=c[g][C-1>>1]:C<0&&(E=c[g][-C-1>>1].neg()),_="affine"===E.type?_.mixedAdd(E):_.add(E))}}for(h=0;h<n;h++)c[h]=null;return i?_:_.toP()},c.BasePoint=u,u.prototype.eq=function(){throw new Error("Not implemented")},u.prototype.validate=function(){return this.curve.validate(this)},c.prototype.decodePoint=function(e,t){e=i.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?a(e[e.length-1]%2==0):7===e[0]&&a(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},u.prototype.encodeCompressed=function(e){return this.encode(e,!0)},u.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},u.prototype.encode=function(e,t){return i.encode(this._encode(t),e)},u.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},u.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},u.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},u.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},u.prototype._getBeta=function(){return null},u.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){"use strict";var n=r(38),i=r(7),o=r(4),s=r(0),a=n.base,c=i.utils.assert;function u(e){a.call(this,"short",e),this.a=new o(e.a,16).toRed(this.red),this.b=new o(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function f(e,t,r,n){a.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new o(t,16),this.y=new o(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function h(e,t,r,n){a.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new o(0)):(this.x=new o(t,16),this.y=new o(r,16),this.z=new o(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}s(u,a),e.exports=u,u.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new o(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new o(e.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?r=i[0]:(r=i[1],c(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map(function(e){return{a:new o(e.a,16),b:new o(e.b,16)}}):this._getEndoBasis(r)}}},u.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:o.mont(e),r=new o(2).toRed(t).redInvm(),n=r.redNeg(),i=new o(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},u.prototype._getEndoBasis=function(e){for(var t,r,n,i,s,a,c,u,f,h=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,l=this.n.clone(),p=new o(1),b=new o(0),y=new o(0),m=new o(1),g=0;0!==d.cmpn(0);){var v=l.div(d);u=l.sub(v.mul(d)),f=y.sub(v.mul(p));var w=m.sub(v.mul(b));if(!n&&u.cmp(h)<0)t=c.neg(),r=p,n=u.neg(),i=f;else if(n&&2==++g)break;c=u,l=d,d=u,y=p,p=f,m=b,b=w}s=u.neg(),a=f;var _=n.sqr().add(i.sqr());return s.sqr().add(a.sqr()).cmp(_)>=0&&(s=t,a=r),n.negative&&(n=n.neg(),i=i.neg()),s.negative&&(s=s.neg(),a=a.neg()),[{a:n,b:i},{a:s,b:a}]},u.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),c=i.mul(r.b),u=o.mul(n.b);return{k1:e.sub(s).sub(a),k2:c.add(u).neg()}},u.prototype.pointFromX=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(t&&!i||!t&&i)&&(n=n.redNeg()),this.point(e,n)},u.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},u.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var s=this._endoSplit(t[o]),a=e[o],c=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),c=c.neg(!0)),n[2*o]=a,n[2*o+1]=c,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var u=this._wnafMulAdd(1,n,i,2*o,r),f=0;f<2*o;f++)n[f]=null,i[f]=null;return u},s(f,a.BasePoint),u.prototype.point=function(e,t,r){return new f(this,e,t,r)},u.prototype.pointFromJSON=function(e,t){return f.fromJSON(this,e,t)},f.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},f.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},f.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return this.inf},f.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},f.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},f.prototype.getX=function(){return this.x.fromRed()},f.prototype.getY=function(){return this.y.fromRed()},f.prototype.mul=function(e){return e=new o(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},f.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},f.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},f.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},f.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},f.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},s(h,a.BasePoint),u.prototype.jpoint=function(e,t,r){return new h(this,e,t,r)},h.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},h.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},h.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),a=n.redSub(i),c=o.redSub(s);if(0===a.cmpn(0))return 0!==c.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=a.redSqr(),f=u.redMul(a),h=n.redMul(u),d=c.redSqr().redIAdd(f).redISub(h).redISub(h),l=c.redMul(h.redISub(d)).redISub(o.redMul(f)),p=this.z.redMul(e.z).redMul(a);return this.curve.jpoint(d,l,p)},h.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),u=c.redMul(s),f=r.redMul(c),h=a.redSqr().redIAdd(u).redISub(f).redISub(f),d=a.redMul(f.redISub(h)).redISub(i.redMul(u)),l=this.z.redMul(s);return this.curve.jpoint(h,d,l)},h.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,c=a.redSqr().redSqr(),u=s.redAdd(s);for(r=0;r<e;r++){var f=o.redSqr(),h=u.redSqr(),d=h.redSqr(),l=f.redAdd(f).redIAdd(f).redIAdd(n.redMul(c)),p=o.redMul(h),b=l.redSqr().redISub(p.redAdd(p)),y=p.redISub(b),m=l.redMul(y);m=m.redIAdd(m).redISub(d);var g=u.redMul(a);r+1<e&&(c=c.redMul(d)),o=b,a=g,u=m}return this.curve.jpoint(o,u.redMul(i),a)},h.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},h.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),c=a.redSqr().redISub(s).redISub(s),u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),e=c,t=a.redMul(s.redISub(c)).redISub(u),r=this.y.redAdd(this.y)}else{var f=this.x.redSqr(),h=this.y.redSqr(),d=h.redSqr(),l=this.x.redAdd(h).redSqr().redISub(f).redISub(d);l=l.redIAdd(l);var p=f.redAdd(f).redIAdd(f),b=p.redSqr(),y=d.redIAdd(d);y=(y=y.redIAdd(y)).redIAdd(y),e=b.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},h.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),c=a.redSqr().redISub(s).redISub(s);e=c;var u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),t=a.redMul(s.redISub(c)).redISub(u),r=this.y.redAdd(this.y)}else{var f=this.z.redSqr(),h=this.y.redSqr(),d=this.x.redMul(h),l=this.x.redSub(f).redMul(this.x.redAdd(f));l=l.redAdd(l).redIAdd(l);var p=d.redIAdd(d),b=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(f);var y=h.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(p.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},h.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),c=t.redAdd(t),u=(c=c.redIAdd(c)).redMul(s),f=a.redSqr().redISub(u.redAdd(u)),h=u.redISub(f),d=s.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=a.redMul(h).redISub(d),p=r.redAdd(r).redMul(n);return this.curve.jpoint(f,l,p)},h.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),c=n.redIAdd(n);c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var u=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c),f=t.redMul(u);f=(f=f.redIAdd(f)).redIAdd(f);var h=this.x.redMul(a).redISub(f);h=(h=h.redIAdd(h)).redIAdd(h);var d=this.y.redMul(u.redMul(c.redISub(u)).redISub(s.redMul(a)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(h,d,l)},h.prototype.mul=function(e,t){return e=new o(e,t),this.curve._wnafMul(this,e)},h.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},h.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}return!1},h.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},h.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var n=r(38),i=r(4),o=r(0),s=n.base,a=r(7).utils;function c(e){s.call(this,"mont",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.i4=new i(4).toRed(this.red).redInvm(),this.two=new i(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function u(e,t,r){s.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new i(t,16),this.z=new i(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}o(c,s),e.exports=c,c.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),n=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===n.redSqrt().redSqr().cmp(n)},o(u,s.BasePoint),c.prototype.decodePoint=function(e,t){return this.point(a.toArray(e,t),1)},c.prototype.point=function(e,t){return new u(this,e,t)},c.prototype.pointFromJSON=function(e){return u.fromJSON(this,e)},u.prototype.precompute=function(){},u.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},u.fromJSON=function(e,t){return new u(e,t[0],t[1]||e.one)},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},u.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),n=e.redMul(t),i=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(n,i)},u.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),n=this.x.redSub(this.z),i=e.x.redAdd(e.z),o=e.x.redSub(e.z).redMul(r),s=i.redMul(n),a=t.z.redMul(o.redAdd(s).redSqr()),c=t.x.redMul(o.redISub(s).redSqr());return this.curve.point(a,c)},u.prototype.mul=function(e){for(var t=e.clone(),r=this,n=this.curve.point(null,null),i=[];0!==t.cmpn(0);t.iushrn(1))i.push(t.andln(1));for(var o=i.length-1;o>=0;o--)0===i[o]?(r=r.diffAdd(n,this),n=n.dbl()):(n=r.diffAdd(n,this),r=r.dbl());return n},u.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},u.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},u.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var n=r(38),i=r(7),o=r(4),s=r(0),a=n.base,c=i.utils.assert;function u(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,a.call(this,"edwards",e),this.a=new o(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new o(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new o(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),c(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function f(e,t,r,n,i){a.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new o(t,16),this.y=new o(r,16),this.z=n?new o(n,16):this.curve.one,this.t=i&&new o(i,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}s(u,a),e.exports=u,u.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},u.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},u.prototype.jpoint=function(e,t,r,n){return this.point(e,t,r,n)},u.prototype.pointFromX=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=this.c2.redSub(this.a.redMul(r)),i=this.one.redSub(this.c2.redMul(this.d).redMul(r)),s=n.redMul(i.redInvm()),a=s.redSqrt();if(0!==a.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");var c=a.fromRed().isOdd();return(t&&!c||!t&&c)&&(a=a.redNeg()),this.point(e,a)},u.prototype.pointFromY=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=r.redSub(this.one),i=r.redMul(this.d).redAdd(this.one),s=n.redMul(i.redInvm());if(0===s.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var a=s.redSqrt();if(0!==a.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");return a.isOdd()!==t&&(a=a.redNeg()),this.point(a,e)},u.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),n=t.redMul(this.a).redAdd(r),i=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===n.cmp(i)},s(f,a.BasePoint),u.prototype.pointFromJSON=function(e){return f.fromJSON(this,e)},u.prototype.point=function(e,t,r,n){return new f(this,e,t,r,n)},f.fromJSON=function(e,t){return new f(e,t[0],t[1],t[2])},f.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&0===this.y.cmp(this.z)},f.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var n=this.curve._mulA(e),i=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),o=n.redAdd(t),s=o.redSub(r),a=n.redSub(t),c=i.redMul(s),u=o.redMul(a),f=i.redMul(a),h=s.redMul(o);return this.curve.point(c,u,h,f)},f.prototype._projDbl=function(){var e,t,r,n=this.x.redAdd(this.y).redSqr(),i=this.x.redSqr(),o=this.y.redSqr();if(this.curve.twisted){var s=(u=this.curve._mulA(i)).redAdd(o);if(this.zOne)e=n.redSub(i).redSub(o).redMul(s.redSub(this.curve.two)),t=s.redMul(u.redSub(o)),r=s.redSqr().redSub(s).redSub(s);else{var a=this.z.redSqr(),c=s.redSub(a).redISub(a);e=n.redSub(i).redISub(o).redMul(c),t=s.redMul(u.redSub(o)),r=s.redMul(c)}}else{var u=i.redAdd(o);a=this.curve._mulC(this.c.redMul(this.z)).redSqr(),c=u.redSub(a).redSub(a);e=this.curve._mulC(n.redISub(u)).redMul(c),t=this.curve._mulC(u).redMul(i.redISub(o)),r=u.redMul(c)}return this.curve.point(e,t,r)},f.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},f.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),i=this.z.redMul(e.z.redAdd(e.z)),o=r.redSub(t),s=i.redSub(n),a=i.redAdd(n),c=r.redAdd(t),u=o.redMul(s),f=a.redMul(c),h=o.redMul(c),d=s.redMul(a);return this.curve.point(u,f,d,h)},f.prototype._projAdd=function(e){var t,r,n=this.z.redMul(e.z),i=n.redSqr(),o=this.x.redMul(e.x),s=this.y.redMul(e.y),a=this.curve.d.redMul(o).redMul(s),c=i.redSub(a),u=i.redAdd(a),f=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(s),h=n.redMul(c).redMul(f);return this.curve.twisted?(t=n.redMul(u).redMul(s.redSub(this.curve._mulA(o))),r=c.redMul(u)):(t=n.redMul(u).redMul(s.redSub(o)),r=this.curve._mulC(c).redMul(u)),this.curve.point(h,t,r)},f.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},f.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},f.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},f.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},f.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},f.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},f.prototype.getX=function(){return this.normalize(),this.x.fromRed()},f.prototype.getY=function(){return this.normalize(),this.y.fromRed()},f.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},f.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),n=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),0===this.x.cmp(t))return!0}return!1},f.prototype.toP=f.prototype.normalize,f.prototype.mixedAdd=f.prototype.add},function(e,t,r){"use strict";var n,i=t,o=r(56),s=r(7),a=s.utils.assert;function c(e){"short"===e.type?this.curve=new s.curve.short(e):"edwards"===e.type?this.curve=new s.curve.edwards(e):this.curve=new s.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,a(this.g.validate(),"Invalid curve"),a(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function u(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new c(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=c,u("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),u("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),u("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),u("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),u("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),u("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),u("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=r(274)}catch(e){n=void 0}u("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},function(e,t,r){"use strict";t.sha1=r(269),t.sha224=r(270),t.sha256=r(123),t.sha384=r(271),t.sha512=r(124)},function(e,t,r){"use strict";var n=r(11),i=r(29),o=r(122),s=n.rotl32,a=n.sum32,c=n.sum32_5,u=o.ft_1,f=i.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function d(){if(!(this instanceof d))return new d;f.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(d,f),e.exports=d,d.blockSize=512,d.outSize=160,d.hmacStrength=80,d.padLength=64,d.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=s(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],f=this.h[2],d=this.h[3],l=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),b=c(s(i,5),u(p,o,f,d),l,r[n],h[p]);l=d,d=f,f=s(o,30),o=i,i=b}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],f),this.h[3]=a(this.h[3],d),this.h[4]=a(this.h[4],l)},d.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(11),i=r(123);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var n=r(11),i=r(124);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var n=r(11),i=r(29),o=n.rotl32,s=n.sum32,a=n.sum32_3,c=n.sum32_4,u=i.BlockHash;function f(){if(!(this instanceof f))return new f;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function h(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function d(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(f,u),t.ripemd160=f,f.blockSize=512,f.outSize=160,f.hmacStrength=192,f.padLength=64,f.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],u=this.h[3],f=this.h[4],g=r,v=n,w=i,_=u,S=f,x=0;x<80;x++){var M=s(o(c(r,h(x,n,i,u),e[p[x]+t],d(x)),y[x]),f);r=f,f=u,u=o(i,10),i=n,n=M,M=s(o(c(g,h(79-x,v,w,_),e[b[x]+t],l(x)),m[x]),S),g=S,S=_,_=o(w,10),w=v,v=M}M=a(this.h[1],i,_),this.h[1]=a(this.h[2],u,S),this.h[2]=a(this.h[3],f,g),this.h[3]=a(this.h[4],r,v),this.h[4]=a(this.h[0],n,w),this.h[0]=M},f.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],m=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var n=r(11),i=r(8);function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r))}e.exports=o,o.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var n=r(4),i=r(276),o=r(7),s=o.utils.assert,a=r(277),c=r(278);function u(e){if(!(this instanceof u))return new u(e);"string"==typeof e&&(s(o.curves.hasOwnProperty(e),"Unknown curve "+e),e=o.curves[e]),e instanceof o.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=u,u.prototype.keyPair=function(e){return new a(this,e)},u.prototype.keyFromPrivate=function(e,t){return a.fromPrivate(this,e,t)},u.prototype.keyFromPublic=function(e,t){return a.fromPublic(this,e,t)},u.prototype.genKeyPair=function(e){e||(e={});for(var t=new i({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||o.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),s=this.n.sub(new n(2));;){var a=new n(t.generate(r));if(!(a.cmp(s)>0))return a.iaddn(1),this.keyFromPrivate(a)}},u.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},u.prototype.sign=function(e,t,r,o){"object"==typeof r&&(o=r,r=null),o||(o={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new n(e,16));for(var s=this.n.byteLength(),a=t.getPrivate().toArray("be",s),u=e.toArray("be",s),f=new i({hash:this.hash,entropy:a,nonce:u,pers:o.pers,persEnc:o.persEnc||"utf8"}),h=this.n.sub(new n(1)),d=0;;d++){var l=o.k?o.k(d):new n(f.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(h)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),y=b.umod(this.n);if(0!==y.cmpn(0)){var m=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(m=m.umod(this.n)).cmpn(0)){var g=(p.getY().isOdd()?1:0)|(0!==b.cmp(y)?2:0);return o.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),g^=1),new c({r:y,s:m,recoveryParam:g})}}}}}},u.prototype.verify=function(e,t,r,i){e=this._truncateToN(new n(e,16)),r=this.keyFromPublic(r,i);var o=(t=new c(t,"hex")).r,s=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var a,u=s.invm(this.n),f=u.mul(e).umod(this.n),h=u.mul(o).umod(this.n);return this.curve._maxwellTrick?!(a=this.g.jmulAdd(f,r.getPublic(),h)).isInfinity()&&a.eqXToP(o):!(a=this.g.mulAdd(f,r.getPublic(),h)).isInfinity()&&0===a.getX().umod(this.n).cmp(o)},u.prototype.recoverPubKey=function(e,t,r,i){s((3&r)===r,"The recovery param is more than two bits"),t=new c(t,i);var o=this.n,a=new n(e),u=t.r,f=t.s,h=1&r,d=r>>1;if(u.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");u=d?this.curve.pointFromX(u.add(this.curve.n),h):this.curve.pointFromX(u,h);var l=t.r.invm(o),p=o.sub(a).mul(l).umod(o),b=f.mul(l).umod(o);return this.g.mulAdd(p,u,b)},u.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new c(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var n=r(56),i=r(121),o=r(8);function s(e){if(!(this instanceof s))return new s(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=i.toArray(e.entropy,e.entropyEnc||"hex"),r=i.toArray(e.nonce,e.nonceEnc||"hex"),n=i.toArray(e.pers,e.persEnc||"hex");o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}e.exports=s,s.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},s.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},s.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},s.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=i.toArray(e,t),r=i.toArray(r,n),o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},s.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=i.toArray(r,n||"hex"),this._update(r));for(var o=[];o.length<e;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var s=o.slice(0,e);return this._update(r),this._reseed++,i.encode(s,t)}},function(e,t,r){"use strict";var n=r(4),i=r(7).utils.assert;function o(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=o,o.fromPublic=function(e,t,r){return t instanceof o?t:new o(e,{pub:t,pubEnc:r})},o.fromPrivate=function(e,t,r){return t instanceof o?t:new o(e,{priv:t,privEnc:r})},o.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},o.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?i(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},o.prototype.derive=function(e){return e.mul(this.priv).getX()},o.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},o.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var n=r(4),i=r(7).utils,o=i.assert;function s(e,t){if(e instanceof s)return e;this._importDER(e,t)||(o(e.r&&e.s,"Signature without r or s"),this.r=new n(e.r,16),this.s=new n(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function a(e,t){var r=e[t.place++];if(!(128&r))return r;for(var n=15&r,i=0,o=0,s=t.place;o<n;o++,s++)i<<=8,i|=e[s];return t.place=s,i}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=s,s.prototype._importDER=function(e,t){e=i.toArray(e,t);var r=new function(){this.place=0};if(48!==e[r.place++])return!1;if(a(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var o=a(e,r),s=e.slice(r.place,o+r.place);if(r.place+=o,2!==e[r.place++])return!1;var c=a(e,r);if(e.length!==c+r.place)return!1;var u=e.slice(r.place,c+r.place);return 0===s[0]&&128&s[1]&&(s=s.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new n(s),this.s=new n(u),this.recoveryParam=null,!0},s.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];u(n,t.length),(n=n.concat(t)).push(2),u(n,r.length);var o=n.concat(r),s=[48];return u(s,o.length),s=s.concat(o),i.encode(s,e)}},function(e,t,r){"use strict";var n=r(56),i=r(7),o=i.utils,s=o.assert,a=o.parseBytes,c=r(280),u=r(281);function f(e){if(s("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof f))return new f(e);e=i.curves[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=n.sha512}e.exports=f,f.prototype.sign=function(e,t){e=a(e);var r=this.keyFromSecret(t),n=this.hashInt(r.messagePrefix(),e),i=this.g.mul(n),o=this.encodePoint(i),s=this.hashInt(o,r.pubBytes(),e).mul(r.priv()),c=n.add(s).umod(this.curve.n);return this.makeSignature({R:i,S:c,Rencoded:o})},f.prototype.verify=function(e,t,r){e=a(e),t=this.makeSignature(t);var n=this.keyFromPublic(r),i=this.hashInt(t.Rencoded(),n.pubBytes(),e),o=this.g.mul(t.S());return t.R().add(n.pub().mul(i)).eq(o)},f.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return o.intFromLE(e.digest()).umod(this.curve.n)},f.prototype.keyFromPublic=function(e){return c.fromPublic(this,e)},f.prototype.keyFromSecret=function(e){return c.fromSecret(this,e)},f.prototype.makeSignature=function(e){return e instanceof u?e:new u(this,e)},f.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},f.prototype.decodePoint=function(e){var t=(e=o.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),n=0!=(128&e[t]),i=o.intFromLE(r);return this.curve.pointFromY(i,n)},f.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},f.prototype.decodeInt=function(e){return o.intFromLE(e)},f.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var n=r(7).utils,i=n.assert,o=n.parseBytes,s=n.cachedProperty;function a(e,t){this.eddsa=e,this._secret=o(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=o(t.pub)}a.fromPublic=function(e,t){return t instanceof a?t:new a(e,{pub:t})},a.fromSecret=function(e,t){return t instanceof a?t:new a(e,{secret:t})},a.prototype.secret=function(){return this._secret},s(a,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),s(a,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),s(a,"privBytes",function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[r]&=127,n[r]|=64,n}),s(a,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),s(a,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),s(a,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),a.prototype.sign=function(e){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},a.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},a.prototype.getSecret=function(e){return i(this._secret,"KeyPair is public only"),n.encode(this.secret(),e)},a.prototype.getPublic=function(e){return n.encode(this.pubBytes(),e)},e.exports=a},function(e,t,r){"use strict";var n=r(4),i=r(7).utils,o=i.assert,s=i.cachedProperty,a=i.parseBytes;function c(e,t){this.eddsa=e,"object"!=typeof t&&(t=a(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),o(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof n&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}s(c,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),s(c,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),s(c,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),s(c,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),c.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},c.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},e.exports=c},function(e,t,r){"use strict";var n=r(30);t.certificate=r(293);var i=n.define("RSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())});t.RSAPrivateKey=i;var o=n.define("RSAPublicKey",function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())});t.RSAPublicKey=o;var s=n.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(a),this.key("subjectPublicKey").bitstr())});t.PublicKey=s;var a=n.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())}),c=n.define("PrivateKeyInfo",function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(a),this.key("subjectPrivateKey").octstr())});t.PrivateKey=c;var u=n.define("EncryptedPrivateKeyInfo",function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())});t.EncryptedPrivateKey=u;var f=n.define("DSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())});t.DSAPrivateKey=f,t.DSAparam=n.define("DSAparam",function(){this.int()});var h=n.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(d),this.key("publicKey").optional().explicit(1).bitstr())});t.ECPrivateKey=h;var d=n.define("ECParameters",function(){this.choice({namedCurve:this.objid()})});t.signature=n.define("signature",function(){this.seq().obj(this.key("r").int(),this.key("s").int())})},function(e,t,r){var n=r(30),i=r(0);function o(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new o(e,t)},o.prototype._createNamed=function(e){var t;try{t=r(284).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return i(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},o.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(n.decoders[e])),this.decoders[e]},o.prototype.decode=function(e,t,r){return this._getDecoder(t).decode(e,r)},o.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(n.encoders[e])),this.encoders[e]},o.prototype.encode=function(e,t,r){return this._getEncoder(t).encode(e,r)}},function(module,exports,__webpack_require__){var indexOf=__webpack_require__(285),Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,n=r.eval,i=r.execScript;!n&&i&&(i.call(r,"null"),n=r.eval),forEach(Object_keys(e),function(t){r[t]=e[t]}),forEach(globals,function(t){e[t]&&(r[t]=e[t])});var o=Object_keys(r),s=n.call(r,this.code);return forEach(Object_keys(r),function(t){(t in e||-1===indexOf(o,t))&&(e[t]=r[t])}),forEach(globals,function(t){t in e||defineProp(e,t,r[t])}),document.body.removeChild(t),s},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return forEach(Object_keys(t),function(r){e[r]=t[r]}),r},forEach(Object_keys(Script.prototype),function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}}),exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),function(r){t[r]=e[r]}),t}},function(e,t){var r=[].indexOf;e.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,r){var n=r(0);function i(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function o(e,t){this.path=e,this.rethrow(t)}t.Reporter=i,i.prototype.isError=function(e){return e instanceof o},i.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},i.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},i.prototype.enterKey=function(e){return this._reporterState.path.push(e)},i.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},i.prototype.leaveKey=function(e,t,r){var n=this._reporterState;this.exitKey(e),null!==n.obj&&(n.obj[t]=r)},i.prototype.path=function(){return this._reporterState.path.join("/")},i.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},i.prototype.leaveObject=function(e){var t=this._reporterState,r=t.obj;return t.obj=e,r},i.prototype.error=function(e){var t,r=this._reporterState,n=e instanceof o;if(t=n?e:new o(r.path.map(function(e){return"["+JSON.stringify(e)+"]"}).join(""),e.message||e,e.stack),!r.options.partial)throw t;return n||r.errors.push(t),t},i.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},n(o,Error),o.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,o),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,r){var n=r(31).Reporter,i=r(31).EncoderBuffer,o=r(31).DecoderBuffer,s=r(8),a=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],c=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(a);function u(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}e.exports=u;var f=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];u.prototype.clone=function(){var e=this._baseState,t={};f.forEach(function(r){t[r]=e[r]});var r=new this.constructor(t.parent);return r._baseState=t,r},u.prototype._wrap=function(){var e=this._baseState;c.forEach(function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}},this)},u.prototype._init=function(e){var t=this._baseState;s(null===t.parent),e.call(this),t.children=t.children.filter(function(e){return e._baseState.parent===this},this),s.equal(t.children.length,1,"Root node can have only one child")},u.prototype._useArgs=function(e){var t=this._baseState,r=e.filter(function(e){return e instanceof this.constructor},this);e=e.filter(function(e){return!(e instanceof this.constructor)},this),0!==r.length&&(s(null===t.children),t.children=r,r.forEach(function(e){e._baseState.parent=this},this)),0!==e.length&&(s(null===t.args),t.args=e,t.reverseArgs=e.map(function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach(function(r){r==(0|r)&&(r|=0);var n=e[r];t[n]=r}),t}))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach(function(e){u.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}}),a.forEach(function(e){u.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return s(null===t.tag),t.tag=e,this._useArgs(r),this}}),u.prototype.use=function(e){s(e);var t=this._baseState;return s(null===t.use),t.use=e,this},u.prototype.optional=function(){return this._baseState.optional=!0,this},u.prototype.def=function(e){var t=this._baseState;return s(null===t.default),t.default=e,t.optional=!0,this},u.prototype.explicit=function(e){var t=this._baseState;return s(null===t.explicit&&null===t.implicit),t.explicit=e,this},u.prototype.implicit=function(e){var t=this._baseState;return s(null===t.explicit&&null===t.implicit),t.implicit=e,this},u.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},u.prototype.key=function(e){var t=this._baseState;return s(null===t.key),t.key=e,this},u.prototype.any=function(){return this._baseState.any=!0,this},u.prototype.choice=function(e){var t=this._baseState;return s(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map(function(t){return e[t]})),this},u.prototype.contains=function(e){var t=this._baseState;return s(null===t.use),t.contains=e,this},u.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var n,i=r.default,s=!0,a=null;if(null!==r.key&&(a=e.enterKey(r.key)),r.optional){var c=null;if(null!==r.explicit?c=r.explicit:null!==r.implicit?c=r.implicit:null!==r.tag&&(c=r.tag),null!==c||r.any){if(s=this._peekTag(e,c,r.any),e.isError(s))return s}else{var u=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),s=!0}catch(e){s=!1}e.restore(u)}}if(r.obj&&s&&(n=e.enterObject()),s){if(null!==r.explicit){var f=this._decodeTag(e,r.explicit);if(e.isError(f))return f;e=f}var h=e.offset;if(null===r.use&&null===r.choice){if(r.any)u=e.save();var d=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(d))return d;r.any?i=e.raw(u):e=d}if(t&&t.track&&null!==r.tag&&t.track(e.path(),h,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),i=r.any?i:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(i))return i;if(r.any||null!==r.choice||null===r.children||r.children.forEach(function(r){r._decode(e,t)}),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var l=new o(i);i=this._getUse(r.contains,e._reporterState.obj)._decode(l,t)}}return r.obj&&s&&(i=e.leaveObject(n)),null===r.key||null===i&&!0!==s?null!==a&&e.exitKey(a):e.leaveKey(a,r.key,i),i},u.prototype._decodeGeneric=function(e,t,r){var n=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,n.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&n.args?this._decodeObjid(t,n.args[0],n.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,n.args&&n.args[0],r):null!==n.use?this._getUse(n.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},u.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),s(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},u.prototype._decodeChoice=function(e,t){var r=this._baseState,n=null,i=!1;return Object.keys(r.choice).some(function(o){var s=e.save(),a=r.choice[o];try{var c=a._decode(e,t);if(e.isError(c))return!1;n={type:o,value:c},i=!0}catch(t){return e.restore(s),!1}return!0},this),i?n:e.error("Choice not matched")},u.prototype._createEncoderBuffer=function(e){return new i(e,this.reporter)},u.prototype._encode=function(e,t,r){var n=this._baseState;if(null===n.default||n.default!==e){var i=this._encodeValue(e,t,r);if(void 0!==i&&!this._skipDefault(i,t,r))return i}},u.prototype._encodeValue=function(e,t,r){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(e,t||new n);var o=null;if(this.reporter=t,i.optional&&void 0===e){if(null===i.default)return;e=i.default}var s=null,a=!1;if(i.any)o=this._createEncoderBuffer(e);else if(i.choice)o=this._encodeChoice(e,t);else if(i.contains)s=this._getUse(i.contains,r)._encode(e,t),a=!0;else if(i.children)s=i.children.map(function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var n=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var i=r._encode(e[r._baseState.key],t,e);return t.leaveKey(n),i},this).filter(function(e){return e}),s=this._createEncoderBuffer(s);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return t.error("Too many args for : "+i.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var c=this.clone();c._baseState.implicit=null,s=this._createEncoderBuffer(e.map(function(r){var n=this._baseState;return this._getUse(n.args[0],e)._encode(r,t)},c))}else null!==i.use?o=this._getUse(i.use,r)._encode(e,t):(s=this._encodePrimitive(i.tag,e),a=!0);if(!i.any&&null===i.choice){var u=null!==i.implicit?i.implicit:i.tag,f=null===i.implicit?"universal":"context";null===u?null===i.use&&t.error("Tag could be omitted only for .use()"):null===i.use&&(o=this._encodeComposite(u,a,f,s))}return null!==i.explicit&&(o=this._encodeComposite(i.explicit,!1,"context",o)),o},u.prototype._encodeChoice=function(e,t){var r=this._baseState,n=r.choice[e.type];return n||s(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),n._encode(e.value,t)},u.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},u.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},u.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,r){var n=r(126);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=n._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=n._reverse(t.tag)},function(e,t,r){var n=t;n.der=r(127),n.pem=r(290)},function(e,t,r){var n=r(0),i=r(2).Buffer,o=r(127);function s(e){o.call(this,e),this.enc="pem"}n(s,o),e.exports=s,s.prototype.decode=function(e,t){for(var r=e.toString().split(/[\r\n]+/g),n=t.label.toUpperCase(),s=/^-----(BEGIN|END) ([^-]+)-----$/,a=-1,c=-1,u=0;u<r.length;u++){var f=r[u].match(s);if(null!==f&&f[2]===n){if(-1!==a){if("END"!==f[1])break;c=u;break}if("BEGIN"!==f[1])break;a=u}}if(-1===a||-1===c)throw new Error("PEM section not found for: "+n);var h=r.slice(a+1,c).join("");h.replace(/[^a-z0-9\+\/=]+/gi,"");var d=new i(h,"base64");return o.prototype.decode.call(this,d,t)}},function(e,t,r){var n=t;n.der=r(128),n.pem=r(292)},function(e,t,r){var n=r(0),i=r(128);function o(e){i.call(this,e),this.enc="pem"}n(o,i),e.exports=o,o.prototype.encode=function(e,t){for(var r=i.prototype.encode.call(this,e).toString("base64"),n=["-----BEGIN "+t.label+"-----"],o=0;o<r.length;o+=64)n.push(r.slice(o,o+64));return n.push("-----END "+t.label+"-----"),n.join("\n")}},function(e,t,r){"use strict";var n=r(30),i=n.define("Time",function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})}),o=n.define("AttributeTypeValue",function(){this.seq().obj(this.key("type").objid(),this.key("value").any())}),s=n.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional())}),a=n.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())}),c=n.define("RelativeDistinguishedName",function(){this.setof(o)}),u=n.define("RDNSequence",function(){this.seqof(c)}),f=n.define("Name",function(){this.choice({rdnSequence:this.use(u)})}),h=n.define("Validity",function(){this.seq().obj(this.key("notBefore").use(i),this.key("notAfter").use(i))}),d=n.define("Extension",function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())}),l=n.define("TBSCertificate",function(){this.seq().obj(this.key("version").explicit(0).int(),this.key("serialNumber").int(),this.key("signature").use(s),this.key("issuer").use(f),this.key("validity").use(h),this.key("subject").use(f),this.key("subjectPublicKeyInfo").use(a),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(d).optional())}),p=n.define("X509Certificate",function(){this.seq().obj(this.key("tbsCertificate").use(l),this.key("signatureAlgorithm").use(s),this.key("signatureValue").bitstr())});e.exports=p},function(e){e.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},function(e,t,r){(function(t){var n=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,i=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,o=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,s=r(37),a=r(53);e.exports=function(e,r){var c,u=e.toString(),f=u.match(n);if(f){var h="aes"+f[1],d=new t(f[2],"hex"),l=new t(f[3].replace(/[\r\n]/g,""),"base64"),p=s(r,d.slice(0,8),parseInt(f[1],10)).key,b=[],y=a.createDecipheriv(h,p,d);b.push(y.update(l)),b.push(y.final()),c=t.concat(b)}else{var m=u.match(o);c=new t(m[2].replace(/[\r\n]/g,""),"base64")}return{tag:u.match(i)[1],data:c}}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(4),i=r(7).ec,o=r(39),s=r(129);function a(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,r,c,u,f){var h=o(c);if("ec"===h.type){if("ecdsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");return function(e,t,r){var n=s[r.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+r.data.algorithm.curve.join("."));var o=new i(n),a=r.data.subjectPrivateKey.data;return o.verify(t,e,a)}(e,r,h)}if("dsa"===h.type){if("dsa"!==u)throw new Error("wrong public key type");return function(e,t,r){var i=r.data.p,s=r.data.q,c=r.data.g,u=r.data.pub_key,f=o.signature.decode(e,"der"),h=f.s,d=f.r;a(h,s),a(d,s);var l=n.mont(i),p=h.invm(s);return 0===c.toRed(l).redPow(new n(t).mul(p).mod(s)).fromRed().mul(u.toRed(l).redPow(d.mul(p).mod(s)).fromRed()).mod(i).mod(s).cmp(d)}(e,r,h)}if("rsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");r=t.concat([f,r]);for(var d=h.modulus.byteLength(),l=[1],p=0;r.length+l.length+2<d;)l.push(255),p++;l.push(0);for(var b=-1;++b<r.length;)l.push(r[b]);l=new t(l);var y=n.mont(h.modulus);e=(e=new n(e).toRed(y)).redPow(new n(h.publicExponent)),e=new t(e.fromRed().toArray());var m=p<8?1:0;for(d=Math.min(e.length,l.length),e.length!==l.length&&(m=1),b=-1;++b<d;)m|=e[b]^l[b];return 0===m}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(7),i=r(4);e.exports=function(e){return new s(e)};var o={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function s(e){this.curveType=o[e],this.curveType||(this.curveType={name:e}),this.curve=new n.ec(this.curveType.name),this.keys=void 0}function a(e,r,n){Array.isArray(e)||(e=e.toArray());var i=new t(e);if(n&&i.length<n){var o=new t(n-i.length);o.fill(0),i=t.concat([o,i])}return r?i.toString(r):i}o.p224=o.secp224r1,o.p256=o.secp256r1=o.prime256v1,o.p192=o.secp192r1=o.prime192v1,o.p384=o.secp384r1,o.p521=o.secp521r1,s.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},s.prototype.computeSecret=function(e,r,n){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),a(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),n,this.curveType.byteLength)},s.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),a(r,e)},s.prototype.getPrivateKey=function(e){return a(this.keys.getPrivate(),e)},s.prototype.setPublicKey=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.keys._importPublic(e),this},s.prototype.setPrivateKey=function(e,r){r=r||"utf8",t.isBuffer(e)||(e=new t(e,r));var n=new i(e);return n=n.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(n),this}}).call(this,r(2).Buffer)},function(e,t,r){t.publicEncrypt=r(299),t.privateDecrypt=r(300),t.privateEncrypt=function(e,r){return t.publicEncrypt(e,r,!0)},t.publicDecrypt=function(e,r){return t.privateDecrypt(e,r,!0)}},function(e,t,r){(function(t){var n=r(39),i=r(21),o=r(27),s=r(130),a=r(131),c=r(4),u=r(132),f=r(55);e.exports=function(e,r,h){var d;d=e.padding?e.padding:h?1:4;var l,p=n(e);if(4===d)l=function(e,r){var n=e.modulus.byteLength(),u=r.length,f=o("sha1").update(new t("")).digest(),h=f.length,d=2*h;if(u>n-d-2)throw new Error("message too long");var l=new t(n-u-d-2);l.fill(0);var p=n-h-1,b=i(h),y=a(t.concat([f,l,new t([1]),r],p),s(b,p)),m=a(b,s(y,h));return new c(t.concat([new t([0]),m,y],n))}(p,r);else if(1===d)l=function(e,r,n){var o,s=r.length,a=e.modulus.byteLength();if(s>a-11)throw new Error("message too long");n?(o=new t(a-s-3)).fill(255):o=function(e,r){var n,o=new t(e),s=0,a=i(2*e),c=0;for(;s<e;)c===a.length&&(a=i(2*e),c=0),(n=a[c++])&&(o[s++]=n);return o}(a-s-3);return new c(t.concat([new t([0,n?1:2]),o,new t([0]),r],a))}(p,r,h);else{if(3!==d)throw new Error("unknown padding");if((l=new c(r)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return h?f(l,p):u(l,p)}}).call(this,r(2).Buffer)},function(e,t,r){(function(t){var n=r(39),i=r(130),o=r(131),s=r(4),a=r(55),c=r(27),u=r(132);e.exports=function(e,r,f){var h;h=e.padding?e.padding:f?1:4;var d,l=n(e),p=l.modulus.byteLength();if(r.length>p||new s(r).cmp(l.modulus)>=0)throw new Error("decryption error");d=f?u(new s(r),l):a(r,l);var b=new t(p-d.length);if(b.fill(0),d=t.concat([b,d],p),4===h)return function(e,r){e.modulus;var n=e.modulus.byteLength(),s=(r.length,c("sha1").update(new t("")).digest()),a=s.length;if(0!==r[0])throw new Error("decryption error");var u=r.slice(1,a+1),f=r.slice(a+1),h=o(u,i(f,a)),d=o(f,i(h,n-a-1));if(function(e,r){e=new t(e),r=new t(r);var n=0,i=e.length;e.length!==r.length&&(n++,i=Math.min(e.length,r.length));var o=-1;for(;++o<i;)n+=e[o]^r[o];return n}(s,d.slice(0,a)))throw new Error("decryption error");var l=a;for(;0===d[l];)l++;if(1!==d[l++])throw new Error("decryption error");return d.slice(l)}(l,d);if(1===h)return function(e,t,r){var n=t.slice(0,2),i=2,o=0;for(;0!==t[i++];)if(i>=t.length){o++;break}var s=t.slice(2,i-1);t.slice(i-1,i);("0002"!==n.toString("hex")&&!r||"0001"!==n.toString("hex")&&r)&&o++;s.length<8&&o++;if(o)throw new Error("decryption error");return t.slice(i)}(0,d,f);if(3===h)return d;throw new Error("unknown padding")}}).call(this,r(2).Buffer)},function(e,t,r){"use strict";(function(e,n){function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=r(3),s=r(21),a=o.Buffer,c=o.kMaxLength,u=e.crypto||e.msCrypto,f=Math.pow(2,32)-1;function h(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>f||e<0)throw new TypeError("offset must be a uint32");if(e>c||e>t)throw new RangeError("offset out of range")}function d(e,t,r){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>f||e<0)throw new TypeError("size must be a uint32");if(e+t>r||e>c)throw new RangeError("buffer too small")}function l(e,t,r,i){if(n.browser){var o=e.buffer,a=new Uint8Array(o,t,r);return u.getRandomValues(a),i?void n.nextTick(function(){i(null,e)}):e}if(!i)return s(r).copy(e,t),e;s(r,function(r,n){if(r)return i(r);n.copy(e,t),i(null,e)})}u&&u.getRandomValues||!n.browser?(t.randomFill=function(t,r,n,i){if(!(a.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof r)i=r,r=0,n=t.length;else if("function"==typeof n)i=n,n=t.length-r;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return h(r,t.length),d(n,r,t.length),l(t,r,n,i)},t.randomFillSync=function(t,r,n){void 0===r&&(r=0);if(!(a.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');h(r,t.length),void 0===n&&(n=t.length-r);return d(n,r,t.length),l(t,r,n)}):(t.randomFill=i,t.randomFillSync=i)}).call(this,r(5),r(6))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(58),i=r(1);t.SessionContainer=class{constructor(e,t={},r={}){this.hostname=e,this.collectionNameToCollectionResourceId=t,this.collectionResourceIdToSessionTokens=r}getHostName(){return this.hostname}getPartitionKeyRangeIdToTokenMap(e){return this.getPartitionKeyRangeIdToTokenMapPrivate(e.isNameBased,e.resourceId,e.resourceAddress)}getPartitionKeyRangeIdToTokenMapPrivate(e,t,r){let n=null;if(e){r=i.Helper.trimSlashes(r);const e=i.Helper.getContainerLink(r);e&&e in this.collectionNameToCollectionResourceId&&(n=this.collectionResourceIdToSessionTokens[this.collectionNameToCollectionResourceId[e]])}else if(t){const e=(new i.ResourceId).parse(t);e.documentCollection!==i.EMPTY&&(n=this.collectionResourceIdToSessionTokens[e.getUniqueDocumentCollectionId()])}return n}resolveGlobalSessionToken(e){if(!e)throw new Error("request cannot be null");return this.resolveGlobalSessionTokenPrivate(e.isNameBased,e.resourceId,e.resourceAddress)}resolveGlobalSessionTokenPrivate(e,t,r){const n=this.getPartitionKeyRangeIdToTokenMapPrivate(e,t,r);return null!=n?this.getCombinedSessionToken(n):""}clearToken(e){let t;if(e.isNameBased){const r=i.Helper.trimSlashes(e.resourceAddress),n=i.Helper.getContainerLink(r);n&&(t=this.collectionNameToCollectionResourceId[n],delete this.collectionNameToCollectionResourceId[n])}else if(e.resourceId){const r=(new i.ResourceId).parse(e.resourceId);r.documentCollection!==i.EMPTY&&(t=r.getUniqueDocumentCollectionId())}void 0!==t&&delete this.collectionResourceIdToSessionTokens[t]}setSessionToken(e,t){if(t&&!this.isReadingFromMaster(e.resourceType,e.opearationType)){const r=t[i.Constants.HttpHeaders.SessionToken];if(r){let n=t[i.Constants.HttpHeaders.OwnerFullName];n||(n=i.Helper.trimSlashes(e.resourceAddress));const o=i.Helper.getContainerLink(n),s=e.isNameBased&&t[i.Constants.HttpHeaders.OwnerId]||e.resourceId;if(s){const e=(new i.ResourceId).parse(s);if(e.documentCollection!==i.EMPTY&&o){const t=e.getUniqueDocumentCollectionId();this.setSesisonTokenPrivate(t,o,r)}}}}}setSesisonTokenPrivate(e,t,r){e in this.collectionResourceIdToSessionTokens||(this.collectionResourceIdToSessionTokens[e]={}),this.compareAndSetToken(r,this.collectionResourceIdToSessionTokens[e]),t in this.collectionNameToCollectionResourceId||(this.collectionNameToCollectionResourceId[t]=e)}getCombinedSessionToken(e){let t="";if(e)for(const r in e)e.hasOwnProperty(r)&&(t=t+r+":"+e[r]+",");return t.slice(0,-1)}compareAndSetToken(e,t){if(e){const r=e.split(":");if(2===r.length){const e=r[0],i=n(r[1]),o=n(t[e]);o&&!o.lesser(i)||(t[e]=i.toString())}}}isReadingFromMaster(e,t){return e===i.Constants.Path.OffersPathSegment||e===i.Constants.Path.DatabasesPathSegment||e===i.Constants.Path.UsersPathSegment||e===i.Constants.Path.PermissionsPathSegment||e===i.Constants.Path.TopologyPathSegment||e===i.Constants.Path.DatabaseAccountPathSegment||e===i.Constants.Path.PartitionKeyRangesPathSegment||e===i.Constants.Path.CollectionsPathSegment&&t===i.Constants.OperationTypes.Query}}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(s,a)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=r(18),o=r(1);class s{constructor(e,t){this.readDatabaseAccount=t,this.defaultEndpoint=e.endpoint,this.readEndpoint=e.endpoint,this.writeEndpoint=e.endpoint,this.enableEndpointDiscovery=e.connectionPolicy.EnableEndpointDiscovery,this.preferredLocations=e.connectionPolicy.PreferredLocations,this.isEndpointCacheInitialized=!1}getReadEndpoint(){return n(this,void 0,void 0,function*(){return this.isEndpointCacheInitialized?this.readEndpoint:(yield this.refreshEndpointList(),this.readEndpoint)})}setReadEndpoint(e){this.readEndpoint=e}getWriteEndpoint(){return n(this,void 0,void 0,function*(){return this.isEndpointCacheInitialized?this.writeEndpoint:(yield this.refreshEndpointList(),this.writeEndpoint)})}setWriteEndpoint(e){this.writeEndpoint=e}refreshEndpointList(){return n(this,void 0,void 0,function*(){let e,t=[],r=[];return this.enableEndpointDiscovery?((e=yield this._getDatabaseAccount())&&(t=e.WritableLocations,r=e.ReadableLocations),[this.writeEndpoint,this.readEndpoint]=yield this._updateLocationsCache(t,r),this.isEndpointCacheInitialized=!0,[this.writeEndpoint,this.readEndpoint]):[this.writeEndpoint,this.readEndpoint]})}_getDatabaseAccount(){return n(this,void 0,void 0,function*(){const e={urlConnection:this.defaultEndpoint};try{const{result:t}=yield this.readDatabaseAccount(e);return t}catch(e){}for(const e of this.preferredLocations)try{const t={urlConnection:s._getLocationalEndpoint(this.defaultEndpoint,e)},{result:r}=yield this.readDatabaseAccount(t);if(r)return r}catch(e){}})}static _getLocationalEndpoint(e,t){const r=i.parse(e,!0,!0);if(r.hostname){const n=r.hostname.toString().toLowerCase().split(".");if(n){const r=n[0],i=r+"-"+t.replace(" ","");return e.toLowerCase().replace(r,i)}}return null}_updateLocationsCache(e,t){return n(this,void 0,void 0,function*(){let r,n;if(!this.enableEndpointDiscovery)return[r=this.defaultEndpoint,n=this.defaultEndpoint];if(r=0===e.length?this.defaultEndpoint:e[0][o.Constants.DatabaseAccountEndpoint],0===t.length)return[r,n=r];if(n=r,!this.preferredLocations)return[r,n];for(const i of this.preferredLocations){for(const e of t)if(e[o.Constants.Name]===i)return[r,n=e[o.Constants.DatabaseAccountEndpoint]];for(const t of e)if(t[o.Constants.Name]===i)return[r,n=t[o.Constants.DatabaseAccountEndpoint]]}return[r,n]})}}t.GlobalEndpointManager=s},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(84)),n(r(82)),n(r(80)),n(r(85)),n(r(97)),n(r(95)),n(r(87)),n(r(89)),n(r(93)),n(r(91))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhenVyZWNvc21vcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==