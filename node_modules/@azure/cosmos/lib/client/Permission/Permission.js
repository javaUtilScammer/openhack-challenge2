"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
/**
 * Use to read, replace, or delete a given {@link Permission} by id.
 *
 * @see {@link Permissions} to create, upsert, query, or read all Permissions.
 */
class Permission {
    /**
     * @hidden
     * @param user The parent {@link User}.
     * @param id The id of the given {@link Permission}.
     */
    constructor(user, id, clientContext) {
        this.user = user;
        this.id = id;
        this.clientContext = clientContext;
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return common_1.UriFactory.createPermissionUri(this.user.database.id, this.user.id, this.id);
    }
    /**
     * Read the {@link PermissionDefinition} of the given {@link Permission}.
     * @param options
     */
    read(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.read(path, "permissions", id, undefined, options);
            return {
                body: response.result,
                headers: response.headers,
                ref: this,
                permission: this
            };
        });
    }
    /**
     * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.
     * @param body The specified {@link PermissionDefinition}.
     * @param options
     */
    replace(body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.replace(body, path, "permissions", id, undefined, options);
            return {
                body: response.result,
                headers: response.headers,
                ref: this,
                permission: this
            };
        });
    }
    /**
     * Delete the given {@link Permission}.
     * @param options
     */
    delete(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.delete(path, "permissions", id, undefined, options);
            return {
                body: response.result,
                headers: response.headers,
                ref: this,
                permission: this
            };
        });
    }
}
exports.Permission = Permission;
//# sourceMappingURL=Permission.js.map