"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const queryIterator_1 = require("../../queryIterator");
const User_1 = require("./User");
/**
 * Used to create, upsert, query, and read all users.
 *
 * @see {@link User} to read, replace, or delete a specific User by id.
 */
class Users {
    /**
     * @hidden
     * @param database The parent {@link Database}.
     */
    constructor(database, clientContext) {
        this.database = database;
        this.clientContext = clientContext;
        this.client = this.database.client;
    }
    /**
     * Query all users.
     * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.
     * @param options
     */
    query(query, options) {
        const path = common_1.Helper.getPathFromLink(this.database.url, "users");
        const id = common_1.Helper.getIdFromLink(this.database.url);
        return new queryIterator_1.QueryIterator(this.clientContext, query, options, innerOptions => {
            return this.clientContext.queryFeed(path, "users", id, result => result.Users, query, innerOptions);
        });
    }
    /**
     * Read all users.
     * @param options
     * @example Read all users to array.
     * ```typescript
     * const {body: usersList} = await database.users.readAll().toArray();
     * ```
     */
    readAll(options) {
        return this.query(undefined, options);
    }
    /**
     * Create a database user with the specified {@link UserDefinition}.
     * @param body The specified {@link UserDefinition}.
     * @param options
     */
    create(body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.database.url, "users");
            const id = common_1.Helper.getIdFromLink(this.database.url);
            const response = yield this.clientContext.create(body, path, "users", id, undefined, options);
            const ref = new User_1.User(this.database, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, user: ref };
        });
    }
    /**
     * Upsert a database user with a specified {@link UserDefinition}.
     * @param body The specified {@link UserDefinition}.
     * @param options
     */
    upsert(body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.database.url, "users");
            const id = common_1.Helper.getIdFromLink(this.database.url);
            const response = yield this.clientContext.upsert(body, path, "users", id, undefined, options);
            const ref = new User_1.User(this.database, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, user: ref };
        });
    }
}
exports.Users = Users;
//# sourceMappingURL=Users.js.map