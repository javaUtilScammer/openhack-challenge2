"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
/**
 * Used to read, replace, or delete a specified User Definied Function by id.
 *
 * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.
 */
class UserDefinedFunction {
    /**
     * @hidden
     * @param container The parent {@link Container}.
     * @param id The id of the given {@link UserDefinedFunction}.
     */
    constructor(container, id, clientContext) {
        this.container = container;
        this.id = id;
        this.clientContext = clientContext;
        this.client = this.container.database.client;
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return common_1.UriFactory.createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);
    }
    /**
     * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.
     * @param options
     */
    read(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.read(path, "udfs", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
        });
    }
    /**
     * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.
     * @param body The specified {@link UserDefinedFunctionDefinition}.
     * @param options
     */
    replace(body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.replace(body, path, "udfs", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
        });
    }
    /**
     * Delete the given {@link UserDefined}.
     * @param options
     */
    delete(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.delete(path, "udfs", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, userDefinedFunction: this, udf: this };
        });
    }
}
exports.UserDefinedFunction = UserDefinedFunction;
//# sourceMappingURL=UserDefinedFunction.js.map