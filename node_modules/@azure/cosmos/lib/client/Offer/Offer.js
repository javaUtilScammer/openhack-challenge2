"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
/**
 * Use to read or replace an existing {@link Offer} by id.
 *
 * @see {@link Offers} to query or read all offers.
 */
class Offer {
    /**
     * @hidden
     * @param client The parent {@link CosmosClient} for the Database Account.
     * @param id The id of the given {@link Offer}.
     */
    constructor(client, id, clientContext) {
        this.client = client;
        this.id = id;
        this.clientContext = clientContext;
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return `/${common_1.Constants.Path.OffersPathSegment}/${this.id}`;
    }
    /**
     * Read the {@link OfferDefinition} for the given {@link Offer}.
     * @param options
     */
    read(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.clientContext.read(this.url, "offers", this.id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, offer: this };
        });
    }
    /**
     * Replace the given {@link Offer} with the specified {@link OfferDefinition}.
     * @param body The specified {@link OfferDefinition}
     * @param options
     */
    replace(body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const response = yield this.clientContext.replace(body, this.url, "offers", this.id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, offer: this };
        });
    }
}
exports.Offer = Offer;
//# sourceMappingURL=Offer.js.map